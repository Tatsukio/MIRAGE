class CViewCondCreate inherit CEnhancedFrameWindow
	var CGuid					m_xGuid;
	var int						m_iSubIdx;
	var int						m_iPage;
	var ^CWindow				m_pxCurPage;

	var ^CButton				m_pxBackButton;
	var ^CButton				m_pxNextButton;
	var ^CButton				m_pxFinishButton;

	var string					m_sType;
	var ^CConditionTypePages	m_pxTypePages;
	var ^CConditionPages		m_pxPages;

	export var procref<void>	m_xOnFinish;

	export constructor(CGuid p_xGuid,int p_iSubIdx)
		m_xGuid=p_xGuid;
		m_iSubIdx=p_iSubIdx;
		if(m_iSubIdx==-1)then
			m_iPage=0;
		else
			m_iPage=1;
		endif;
		var ^CTriggerDesc.CCondition pxCond=GetCondition();
		if(pxCond!=null)then
			m_sType=pxCond^.GetType().AsString();
		else
			m_sType="TIME";
		endif;

		if(!InitFromResource("Trigger/ViewCondCreate","ConditionView")) then
			CLevelEditorWrap.LogError("UI.ViewCondCreate","InitFromResource failed");
			return;
		endif;

		var ^CButton pxCancel=cast<CButton>(GetControl("Btn_Cancel"));
		pxCancel^.SetText(CLocalizer.Get().Translate("_ViewCondCreate_Btn_Cancel"));
		pxCancel^.m_xOnClick=OnClose;
		m_pxBackButton=cast<CButton>(GetControl("Btn_Back"));
		m_pxBackButton^.SetText(CLocalizer.Get().Translate("_ViewCondCreate_Btn_Back"));
		m_pxBackButton^.m_xOnClick=OnBack;
		m_pxNextButton=cast<CButton>(GetControl("Btn_Next"));
		m_pxNextButton^.SetText(CLocalizer.Get().Translate("_ViewCondCreate_Btn_Next"));
		m_pxNextButton^.m_xOnClick=OnNext;
		m_pxFinishButton=cast<CButton>(GetControl("Btn_Ready"));
		m_pxFinishButton^.SetText(CLocalizer.Get().Translate("_ViewCondCreate_Btn_Ready"));
		m_pxFinishButton^.m_xOnClick=OnFinish;

		UpdateContent();
		UpdateButtons();

		LoadPosition("ConditionView");
		SetVisible(true);
	endconstructor;

	export destructor()
		delete m_pxPages;
	enddestructor;

	proc ^CTriggerDesc.CCondition GetCondition()
		var ^CTriggerDescMgr pxTM=^(CLevelEditorWrap.GetTriggerDescMgr());
		var int iTIdx=pxTM^.FindTrigger(m_xGuid);
		if(iTIdx==-1)then return null; endif;
		var ^CTriggerDesc pxTrigger=pxTM^.GetTrigger(iTIdx);
		if(m_iSubIdx<0||m_iSubIdx>=pxTrigger^.NumConditions())then return null;	endif;
		return pxTrigger^.GetCondition(m_iSubIdx);
	endproc;

	proc void UpdateContent()
		var ^CWindow pxNewPage=new CWindow;
		if(m_iPage==0)then
			m_pxTypePages=new CConditionTypePages(m_sType);
			pxNewPage=m_pxTypePages^.GetPage(m_iPage);
			delete m_pxPages;
			m_pxCurPage = null;
		else
			if(m_iPage==1 && m_pxPages==null)then
				if(m_pxTypePages!=null)then
					m_sType=m_pxTypePages^.GetType();
				endif;
				if(m_sType=="TIME")then
					m_pxPages=new CConditionTimePages();
				elseif(m_sType=="TRUE")then
					m_pxPages=new CConditionTruePages();
				elseif(m_sType=="USER")then
					m_pxPages=new CConditionPages();
				elseif(m_sType=="PLYR") then
					m_pxPages=new CConditionPlayerPages();
				elseif(m_sType=="PLTR") then
					m_pxPages=new CConditionTribePages();
				elseif(m_sType=="REGN") then
					m_pxPages=new CConditionRegionPages();
				elseif(m_sType=="GREG") then
					m_pxPages=new CConditionGroupRegionPages();
				elseif(m_sType=="OBJP") then
					m_pxPages=new CConditionObjPropsPages();
				elseif(m_sType=="TECH") then
					m_pxPages=new CConditionTechTreePages();
				elseif(m_sType=="DEAD") then
					m_pxPages=new CConditionDeadPages();
				elseif(m_sType=="CHKO") then
					m_pxPages=new CConditionCheckObjPages();
				elseif(m_sType=="TSKA") then
					m_pxPages=new CConditionTaskAbortPages();
				elseif(m_sType=="QUES") then
					m_pxPages=new CConditionQuestPages();
				elseif(m_sType=="SQEN") then
					m_pxPages=new CConditionSeqEndPages();
				elseif(m_sType=="DSEN") then
					m_pxPages=new CConditionDialogSceneEndPages();
				elseif(m_sType=="PLDE") then
					m_pxPages=new CConditionPlayerDeadPages();
				elseif(m_sType=="CVAR") then
					m_pxPages=new CConditionVarsPages();
				elseif(m_sType=="BLDG") then
					m_pxPages=new CConditionBuildingPages();
				elseif(m_sType=="DIPL") then
					m_pxPages=new CConditionDiplomacyPages();
				elseif(m_sType=="CHAT") then
					m_pxPages=new CConditionChatPages();
				elseif(m_sType=="ITEM") then
					m_pxPages=new CConditionItemPages();
				elseif(m_sType=="TRIB") then
					m_pxPages=new CConditionTributePages();
				elseif(m_sType=="SGHT") then
					m_pxPages=new CConditionInSightPages();
				elseif(m_sType=="WAYR") then
					m_pxPages=new CConditionWaypointReachedPages();
				elseif(m_sType=="CKGR") then
					m_pxPages=new CConditionCheckGroupPages();
				elseif(m_sType=="DGBL") then
					m_pxPages=new CConditionDimGateBuildPages();
				elseif(m_sType=="AIFE") then
					m_pxPages=new CConditionAIFightEndPages();
				elseif(m_sType=="ISAI") then
					m_pxPages=new CConditionIsAIPlayer();
				elseif(m_sType=="ISFG") then
					m_pxPages=new CConditionIsFightingPages();
				elseif(m_sType=="UNTT")then
					m_pxPages=new CUniversalTutorialConditionPage();
				elseif(m_sType=="RTME")then
					m_pxPages=new CConditionRandomTimePages();
				elseif(m_sType=="DYIN")then
					m_pxPages=new CConditionDyingPages();
				elseif(m_sType=="TIMR")then
					m_pxPages=new CConditionTimerPages();
				endif;
				if (m_pxPages!=null && GetCondition() != null) then
					m_pxPages^.OnInit(GetCondition()^.GetParams());
				endif;
				delete m_pxTypePages;
				m_pxCurPage = null;
			endif;
			pxNewPage=m_pxPages^.GetPage(m_iPage-1);
		endif;
		if(m_pxCurPage!=null)then
			RemoveChild(m_pxCurPage);
		endif;
		m_pxCurPage=pxNewPage;
		if(m_pxCurPage!=null)then
			AddChildWithLayout(m_pxCurPage,"content");
		endif;
	endproc;

	proc void UpdateButtons()
		m_pxBackButton^.SetDisabled(m_iSubIdx!=-1 || m_iPage==0);
		var int iLastPage=1;
		if(m_pxPages!=null)then
			iLastPage=m_pxPages^.NumPages();
		endif;
		m_pxNextButton^.SetDisabled(m_iPage==iLastPage);
		m_pxFinishButton^.SetDisabled(m_iPage!=iLastPage);
	endproc;

	proc bool OnClose()
		super.OnClose();
		Destroy();
		return(true);
	endproc;

	proc bool OnBack()
		m_iPage=Math.Max(m_iPage-1,0);
		UpdateContent();
		UpdateButtons();
		return(true);
	endproc;

	proc bool OnNext()
		var int iLastPage=1;
		if(m_pxPages!=null)then
			iLastPage=m_pxPages^.NumPages();
		endif;
		m_iPage=Math.Min(m_iPage+1,iLastPage);
		UpdateContent();
		UpdateButtons();
		return(true);
	endproc;

	export proc bool OnFinish()		
		var ^CTriggerDescMgr pxTM=^(CLevelEditorWrap.GetTriggerDescMgr());
		var int iTIdx=pxTM^.FindTrigger(m_xGuid);
		if(iTIdx!=-1)then			
			var ^CTriggerDesc pxTrigger=pxTM^.GetTrigger(iTIdx);
			if(m_iSubIdx==-1)then
				var CFourCC xType=m_sType;
				m_iSubIdx=pxTrigger^.AddCondition(xType);
			endif;
			if(m_pxPages!=null)then
				var ^CTriggerDesc.CCondition pxCond=pxTrigger^.GetCondition(m_iSubIdx);
				m_pxPages^.OnFinish(pxCond^.GetParams());
			endif;
		endif;
		if(!m_xOnFinish.IsNull()) then			
			m_xOnFinish.Call();
		endif;
		return OnClose();
	endproc;
endclass;

class CConditionPages
	var array ^CWindow	m_apxPages;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_USER");
	endconstructor;

	export destructor()
		var int i;
		for (i=0) cond (i<m_apxPages.NumEntries()) iter(++i) do
			delete m_apxPages[i];
		endfor;
	enddestructor;

	export proc int NumPages()
		return m_apxPages.NumEntries();
	endproc;

	export proc ^CWindow GetPage(int p_iIdx)
		return m_apxPages[p_iIdx];
	endproc;

	export proc void OnInit(ref CAttribs p_rxParams)
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
	endproc;

	proc void FillObjList(^CDropList p_pxList)
		var ^CList pxObjList = CEnhancedMenu.Get().GetObjFinder()^.GetObjList();
		if (pxObjList == null) then return; endif;

		var int iCount = pxObjList^.NumItems();
		var int i;
		for (i=0) cond (i<iCount)iter(++i) do
			var ^CFinderItem pxItem = cast<CFinderItem>(pxObjList^.GetItemData(i));
			if (pxItem==null) then continue; endif;
			if (pxItem^.GetType() == CFinderItem.TYPE_OBJECT) then
				var CClntHndl xHndl = (cast<CFinderItemObject>(pxItem))^.GetHndl();
				if (xHndl.IsValid()) then
					var ^CObj pxObj = xHndl.GetObj();
					if ( pxObj!=null) then
						var CFourCC xType = pxObj^.GetType();
						p_pxList^.AddItem(xHndl.GetObj()^.GetName());
					endif;
				endif;
			endif;
		endfor;
	endproc;

	//----------------------------------------------------------
	// GetObjByGuid()
	//----------------------------------------------------------
	export proc CClntHndl GetObjByGuid(ref CGuid p_rxGuid)
		var CClntHndl xInvalid;
		xInvalid.Invalidate();

		var ^CList pxList = CEnhancedMenu.Get().GetObjFinder()^.GetObjList();
		if (pxList==null) then return xInvalid; endif;
		var int i;
		for (i=0) cond (i<pxList^.NumItems()) iter(++i) do
			var ^CFinderItem pxItem = cast<CFinderItem>(pxList^.GetItemData(i));
			if (pxItem==null) then return xInvalid; endif;
			if (pxItem^.GetType()==CFinderItem.TYPE_OBJECT) then
				var CClntHndl xHndl = (cast<CFinderItemObject>(pxItem))^.GetHndl();
				if (xHndl.IsValid()) then
					if (xHndl.GetObj()^.GetGuid() == p_rxGuid) then return xHndl; endif;
				endif;
			endif;
		endfor;
		return xInvalid;
	endproc;

	//----------------------------------------------------------
	// GetObject()
	//----------------------------------------------------------
	export proc CClntHndl GetObject(string p_sUnitName)
		var CClntHndl xInvalid;
		xInvalid.Invalidate();
		var ^CList pxList = CEnhancedMenu.Get().GetObjFinder()^.GetObjList();
		if (pxList==null) then return xInvalid; endif;
		var int iNumItems = pxList^.NumItems();
		var int i;
		for (i=0) cond (i<iNumItems) iter (++i) do
			var ^CFinderItem pxItem = cast<CFinderItem>(pxList^.GetItemData(i));
			if (pxItem==null) then continue; endif;
			if (pxItem^.GetType() == CFinderItem.TYPE_OBJECT) then
				var CClntHndl xHndl = (cast<CFinderItemObject>(pxItem))^.GetHndl();
				if (xHndl.IsValid()) then
					if (xHndl.GetObj()^.GetName() == p_sUnitName) then return xHndl; endif;
				endif;
			endif;
		endfor;
		return xInvalid;
	endproc;

endclass;

class CConditionTypePages inherit CConditionPages


	class CTypeData inherit CItemData

		export constructor(string p_sType)
			m_xType = p_sType;
		endconstructor;

		export var CFourCC m_xType;
	endclass;

	export constructor(string p_sType)
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","ConditionType"))then
			var ^CList pxTypes=cast<CList>(m_apxPages[0]^.GetControl("List_Type"));
			pxTypes^.Clear();
			pxTypes^.AddItem("Time ( TIME )", new CTypeData("TIME"));
			pxTypes^.AddItem("True Condition ( TRUE )", new CTypeData("TRUE"));
			//pxTypes^.AddItem("USER");
			pxTypes^.AddItem("PlayerAttribs ( PLYR )", new CTypeData("PLYR"));
			pxTypes^.AddItem("PlayerTribe ( PLTR )", new CTypeData("PLTR"));
			pxTypes^.AddItem("Is AIPlayer ( ISAI )", new CTypeData("ISAI"));
			pxTypes^.AddItem("Region ( REGN )", new CTypeData("REGN"));
			pxTypes^.AddItem("Group Region ( GREG )", new CTypeData("GREG"));
			pxTypes^.AddItem("Object Properties ( OBJP )", new CTypeData("OBJP"));
			pxTypes^.AddItem("Dead Object ( DEAD )", new CTypeData("DEAD"));
			pxTypes^.AddItem("Dying Object ( DYIN )", new CTypeData("DYIN"));
			pxTypes^.AddItem("TechTree ( TECH )", new CTypeData("TECH"));
			pxTypes^.AddItem("Task Abort ( TSKA )", new CTypeData("TSKA"));
			pxTypes^.AddItem("Quest ( QUES )", new CTypeData("QUES"));
			pxTypes^.AddItem("Sequence ( SQEN )", new CTypeData("SQEN"));
			pxTypes^.AddItem("DialogScene ( DSEN )", new CTypeData("DSEN"));
			pxTypes^.AddItem("Dead Player ( PLDE )", new CTypeData("PLDE"));
			pxTypes^.AddItem("Level Variables ( CVAR )", new CTypeData("CVAR"));
			pxTypes^.AddItem("Check Diplomatic Relations ( DIPL )", new CTypeData("DIPL"));
			pxTypes^.AddItem("Check for Chat Message ( CHAT )", new CTypeData("CHAT"));
			pxTypes^.AddItem("Item-Condition ( ITEM )", new CTypeData("ITEM"));
			pxTypes^.AddItem("Check for Buildings ( BLDG )", new CTypeData("BLDG"));
			pxTypes^.AddItem("Check for Tribute ( TRIB )", new CTypeData("TRIB"));
			pxTypes^.AddItem("Objs in Sight ( SGHT )", new CTypeData("SGHT"));
			pxTypes^.AddItem("Last Waypoint Reached ( WAYR )", new CTypeData("WAYR"));
			pxTypes^.AddItem("Check Group-Member-Cnt ( CKGR )", new CTypeData("CKGR"));
			pxTypes^.AddItem("Is Fighting ( ISFG )", new CTypeData("ISFG"));
			pxTypes^.AddItem("Universal Tutorial Trigger ( UNTT )", new CTypeData("UNTT"));
			pxTypes^.AddItem("Random Timer ( RTME )", new CTypeData("RTME"));
			pxTypes^.AddItem("Check Timer ( TIMR )", new CTypeData("TIMR"));
			//pxTypes^.AddItem("Ai End of Fight ( AIFE )", new CTypeData("AIFE"));
			//pxTypes^.AddItem("CHKO"); TODO
			//pxTypes^.SelectItemBeginningWithString(p_sType);
			pxTypes^.RemoveSelection();
			pxTypes^.QSort();
		endif;
	endconstructor;

	export proc string GetType()
		var ^CList pxTypes=cast<CList>(m_apxPages[0]^.GetControl("List_Type"));

		var int iIdx = pxTypes^.GetSelectedItem();
		if (iIdx >= 0) then
			var ^CTypeData pxTD = cast<CTypeData>(pxTypes^.GetItemData(iIdx));
			if (pxTD!=null) then
				return pxTD^.m_xType.AsString();
			endif;
		endif;
		return "";
	endproc;
endclass;

class CUniversalTutorialConditionPage inherit CConditionPages
	var ^CList 			m_pxCondTypeList;
	var ^CWindow		m_pxCondParamContainer;
	var ^CObjSelector	m_pxObjSelector;
	var ^CObjSelector	m_pxObjSelector2;
	var ^CList			m_pxGamePlayCommandList;
	var ^CList			m_pxWindowList;
	var ^CList			m_pxCameraEventList;
	var ^CList			m_pxSelectionOptionsList;
	var ^CScreenRegion	m_pxScreenRegion;
	var ^CCmdBtnClick	m_pxCmdBtnClick;
	var ^CTransportMount m_pxTransportMount;	
	
	class CScreenRegion inherit CWindow
		var ^CList m_pxScreenRegionList;
		var ^CList m_pxEventList;
		
		export constructor()
			if(!InitFromResource("Trigger/ViewCondCreate","Condition_UNTT_ScreenRegion"))then
				CLevelEditorWrap.LogError("UI.ViewCondCreate","Condition_UNTT_ScreenRegion failed");
				return;
			endif;
			
			m_pxScreenRegionList=cast<CList>(GetControl("ScreenRegionList"));
			m_pxEventList=cast<CList>(GetControl("EventList"));
			
			var ^CLevelInfo pxLevelInfo=^(CLevelEditorWrap.GetClient().GetLevelInfo());
			var ^CPropDB.CNode pxFFNode=^((pxLevelInfo^.GetGenericData())["ScreenRegions"]);
			var int i,iC=pxFFNode^.NumSubs();
			for(i=0)cond(i<iC)iter(i++)do
				var ^CPropDB.CNode pxWalk=^(pxFFNode^.Get(i));				
				m_pxScreenRegionList^.AddItem(pxWalk^.Name());
			endfor;
			
			m_pxEventList^.AddItem("mouse_Move");
			m_pxEventList^.AddItem("mouse_LBtn_Down");
			m_pxEventList^.AddItem("mouse_LBtn_Up");
			m_pxEventList^.AddItem("mouse_RBtn_Down");
			m_pxEventList^.AddItem("mouse_RBtn_Up");
			m_pxEventList^.AddItem("mouse_LBtn_DblClk");
			m_pxEventList^.AddItem("mouse_RBtn_DblClk");
			
		endconstructor;
		
		export proc void Init(ref CAttribs p_rxParams)
			var string sRegion=p_rxParams.GetValue("param");
			var int iIdx=m_pxScreenRegionList^.FindItem(sRegion);
			if(iIdx!=-1)then
				m_pxScreenRegionList^.Select(iIdx,false);
			endif;			
			
			m_pxEventList^.RemoveSelection();
			var string sEventType=p_rxParams.GetValue("param2");
			var array string asTokens;
			sEventType.Split(asTokens,"|",true);
			var int i,iC=asTokens.NumEntries();
			for(i=0)cond(i<iC)iter(i++)do				
				var int iIdx=m_pxEventList^.FindItem(asTokens[i]);
				if(iIdx!=-1)then
					m_pxEventList^.Select(iIdx,false);
				endif;
			endfor;
		endproc;
		
		export proc void SaveData(ref CAttribs po_rxParams)
			po_rxParams.SetValue("param", m_pxScreenRegionList^.GetSelectedItemAsString());
			var string sEvtTypes;
			var int i,iC=m_pxEventList^.NumItems();
			for(i=0)cond(i<iC)iter(i++)do
				if(m_pxEventList^.IsItemSelected(i))then
					sEvtTypes+=m_pxEventList^.GetItem(i)+"|";
				endif;			
			endfor;
			po_rxParams.SetValue("param2",sEvtTypes);
		endproc;		
	
	endclass;
	
	class CCmdBtnClick inherit CWindow
		var ^CEdit		m_pxPathEdit;		
		
		export constructor()
			if(!InitFromResource("Trigger/ViewCondCreate","Condition_UNTT_CmdButtonClick"))then
				CLevelEditorWrap.LogError("UI.ViewCondCreate","Condition_UNTT_CmdButtonClick failed");
				return;
			endif;
			m_pxPathEdit=cast<CEdit>(GetControl("PathEdit"));			
			
		endconstructor;
		
		export proc void Init(ref CAttribs p_rxParams)
			m_pxPathEdit^.SetText(p_rxParams.GetValue("param"));			
		endproc;
		
		export proc void SaveData(ref CAttribs po_rxParams)
			po_rxParams.SetValue("param", m_pxPathEdit^.GetText());			
		endproc;		
	
	endclass;
	
	class CTransportMount inherit CWindow
		var ^CGroupBox m_pxTransporterBox;
		var ^CGroupBox m_pxPassengerBox;
		
		export constructor()
			if(!InitFromResource("Trigger/ViewCondCreate","Condition_UNTT_TransportMount"))then
				CLevelEditorWrap.LogError("UI.ViewCondCreate","Condition_UNTT_TransportMount failed");
				return;
			endif;
			m_pxTransporterBox=cast<CGroupBox>(GetControl("Transporter"));			
			m_pxPassengerBox=cast<CGroupBox>(GetControl("Passenger"));			
			
		endconstructor;
		
		export proc void Init(^CObjSelector p_pxTransporter, ^CObjSelector p_pxPassenger)
			m_pxTransporterBox^.AddChildWithLayout(p_pxTransporter,"ObjSelector");
			m_pxPassengerBox^.AddChildWithLayout(p_pxPassenger,"ObjSelector");
		endproc;	
	endclass;
	
	class CTypeData inherit CItemData
		export var CFourCC m_xType;
		export constructor(CFourCC p_xType)
			m_xType=p_xType;
		endconstructor;		
		export constructor(string p_sType)
			m_xType=p_sType;
		endconstructor;		
	endclass;
	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_UNTT"))then			
			m_pxCondTypeList=cast<CList>(m_apxPages[0]^.GetControl("TypeList"));
			m_pxCondParamContainer=m_apxPages[0]^.GetControl("ParameterContainer");			
			
			m_pxObjSelector=new CObjSelector;
			m_pxObjSelector2=new CObjSelector;
			m_pxObjSelector2^.SetAttribsPrefix("B_");
			
			m_pxGamePlayCommandList=new CList;
			m_pxGamePlayCommandList^.AddItem("GetFood_Fruit");
			m_pxGamePlayCommandList^.AddItem("GetFood_Animal");
			m_pxGamePlayCommandList^.AddItem("Mine");
			
			m_pxWindowList=new CList;
			m_pxWindowList^.AddItem("Quest");
			m_pxWindowList^.AddItem("Pyramid");
			
			m_pxCameraEventList=new CList;
			m_pxCameraEventList^.AddItem("scroll");
			m_pxCameraEventList^.AddItem("zoom");
			m_pxCameraEventList^.AddItem("pan");
			m_pxCameraEventList^.AddItem("turn");
			
			m_pxSelectionOptionsList=new CList;
			m_pxSelectionOptionsList^.AddItem("Pyramid");
			m_pxSelectionOptionsList^.AddItem("DragBox");
			m_pxSelectionOptionsList^.AddItem("CTRL");
			m_pxSelectionOptionsList^.AddItem("ALT");
			m_pxSelectionOptionsList^.AddItem("SHIFT");
			
			m_pxScreenRegion=new CScreenRegion;
			m_pxCmdBtnClick=new CCmdBtnClick;
			m_pxTransportMount=new CTransportMount;
						
			m_pxCondTypeList^.AddItem("Window Open",new CTypeData("WNDO"));
			m_pxCondTypeList^.AddItem("Window Close",new CTypeData("WNDC"));
			m_pxCondTypeList^.AddItem("Unit selected",new CTypeData("USEL"));
			m_pxCondTypeList^.AddItem("Unit deselected",new CTypeData("UDES"));
			m_pxCondTypeList^.AddItem("Selection options",new CTypeData("SOPT"));			
			m_pxCondTypeList^.AddItem("GamePlay command",new CTypeData("GPCM"));
			m_pxCondTypeList^.AddItem("Camera Event",new CTypeData("CAME"));
			m_pxCondTypeList^.AddItem("Screen Region",new CTypeData("SCRE"));
			m_pxCondTypeList^.AddItem("CmdButton Click",new CTypeData("CBCL"));	
			m_pxCondTypeList^.AddItem("Shotgun",new CTypeData("SHGN"));
			m_pxCondTypeList^.AddItem("Transport Mont",new CTypeData("TRMO"));
			m_pxCondTypeList^.m_xOnSelect=OnSelectConditionType;
			
			
		endif;
	endconstructor;
	
	export destructor()
		var int i,iC=m_pxCondTypeList^.NumItems();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CItemData pxWalk=m_pxCondTypeList^.GetItemData(i);
			delete pxWalk;
		endfor;
		m_pxObjSelector^.RemoveFromParent();
		delete m_pxObjSelector;
		m_pxObjSelector2^.RemoveFromParent();
		delete m_pxObjSelector2;
		
		m_pxGamePlayCommandList^.RemoveFromParent();
		delete m_pxGamePlayCommandList;
		
		m_pxWindowList^.RemoveFromParent();
		delete m_pxWindowList;
		
		m_pxCameraEventList^.RemoveFromParent();
		delete m_pxCameraEventList;
		
		m_pxSelectionOptionsList^.RemoveFromParent();
		delete m_pxSelectionOptionsList;
		
		m_pxScreenRegion^.RemoveFromParent();		
		delete m_pxScreenRegion;
		
		m_pxCmdBtnClick^.RemoveFromParent();
		delete m_pxCmdBtnClick;
		
		m_pxTransportMount^.RemoveFromParent();
		delete m_pxTransportMount;
	enddestructor;
	
	proc bool OnSelectConditionType()
		m_pxCondParamContainer^.RemoveAllChildren();
		var int iSelItem=m_pxCondTypeList^.GetSelectedItem();
		if(iSelItem!=-1)then
			var ^CTypeData pxTypeData=cast<CTypeData>(m_pxCondTypeList^.GetItemData(iSelItem));
			if(pxTypeData^.m_xType=="USEL" || pxTypeData^.m_xType=="UDES")then
				m_pxCondParamContainer^.AddChildWithLayout(m_pxObjSelector,"container");
			elseif(pxTypeData^.m_xType=="GPCM")then
				m_pxCondParamContainer^.AddChildWithLayout(m_pxGamePlayCommandList,"container");
			elseif(pxTypeData^.m_xType=="CAME")then
				m_pxCondParamContainer^.AddChildWithLayout(m_pxCameraEventList,"container");
			elseif(pxTypeData^.m_xType=="SOPT")then
				m_pxCondParamContainer^.AddChildWithLayout(m_pxSelectionOptionsList,"container");
			elseif(pxTypeData^.m_xType=="SCRE")then
				m_pxCondParamContainer^.AddChildWithLayout(m_pxScreenRegion,"container");
			elseif(pxTypeData^.m_xType=="WNDO" || pxTypeData^.m_xType=="WNDC")then
				m_pxCondParamContainer^.AddChildWithLayout(m_pxWindowList,"container");
			elseif(pxTypeData^.m_xType=="CBCL")then
				m_pxCondParamContainer^.AddChildWithLayout(m_pxCmdBtnClick,"container");
			elseif(pxTypeData^.m_xType=="TRMO")then
				m_pxTransportMount^.Init(m_pxObjSelector,m_pxObjSelector2);
				m_pxCondParamContainer^.AddChildWithLayout(m_pxTransportMount,"container");				
			endif;			
		endif;
		return true;
	endproc;
	
	export proc void OnInit(ref CAttribs p_rxParams)
		
		m_pxObjSelector^.OnInit(p_rxParams);
		m_pxObjSelector2^.OnInit(p_rxParams);
		var CFourCC xConditionType=p_rxParams.GetValue("condition_type");
		m_pxCondTypeList^.RemoveSelection();
		var int i,iC=m_pxCondTypeList^.NumItems();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CTypeData pxTypeData=cast<CTypeData>(m_pxCondTypeList^.GetItemData(i));
			if(pxTypeData^.m_xType==xConditionType)then
				m_pxCondTypeList^.Select(i);
				break;
			endif;
		endfor;		
		
		
		var string sGPCmd=p_rxParams.GetValue("gameplay_command");
		m_pxGamePlayCommandList^.RemoveSelection();
		var int iGPItem=m_pxGamePlayCommandList^.FindItem(sGPCmd);
		m_pxGamePlayCommandList^.Select(iGPItem);
		
		var string sWndType=p_rxParams.GetValue("window_type");
		m_pxWindowList^.RemoveSelection();
		var int iWndItem=m_pxWindowList^.FindItem(sWndType);
		m_pxWindowList^.Select(iWndItem);
		
		
		var string sCamEvt=p_rxParams.GetValue("camera_event");
		m_pxCameraEventList^.RemoveSelection();
		var int iCamEventItem=m_pxCameraEventList^.FindItem(sCamEvt);
		m_pxCameraEventList^.Select(iCamEventItem);
		
		var string sSelOpt=p_rxParams.GetValue("selection_option");
		m_pxSelectionOptionsList^.RemoveSelection();
		var int iSelOptItem=m_pxSelectionOptionsList^.FindItem(sSelOpt);
		m_pxSelectionOptionsList^.Select(iSelOptItem);
		
		m_pxScreenRegion^.Init(p_rxParams);
		m_pxCmdBtnClick^.Init(p_rxParams);
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		m_pxObjSelector^.OnFinish(po_rxParams);
		m_pxObjSelector2^.OnFinish(po_rxParams);
		var CFourCC xConditionType;
		var int iSelItem=m_pxCondTypeList^.GetSelectedItem();
		if(iSelItem!=-1)then
			var ^CTypeData pxTypeData=cast<CTypeData>(m_pxCondTypeList^.GetItemData(iSelItem));
			xConditionType=pxTypeData^.m_xType;
		endif;
		po_rxParams.SetValue("condition_type", xConditionType.AsString());
		
		po_rxParams.SetValue("gameplay_command", m_pxGamePlayCommandList^.GetSelectedItemAsString());
		po_rxParams.SetValue("window_type", m_pxWindowList^.GetSelectedItemAsString());
		po_rxParams.SetValue("camera_event", m_pxCameraEventList^.GetSelectedItemAsString());
		po_rxParams.SetValue("selection_option", m_pxSelectionOptionsList^.GetSelectedItemAsString());		
		
		if(xConditionType=="SCRE")then
			m_pxScreenRegion^.SaveData(po_rxParams);		
		elseif(xConditionType=="CBCL")then
			m_pxCmdBtnClick^.SaveData(po_rxParams);
		endif;		
	endproc;
endclass;

class CConditionTimePages inherit CConditionPages
	var ^CEdit			m_pxHour;
	var ^CEdit			m_pxMinute;
	var ^CEdit			m_pxSecond;
	
	var ^CCheckBox		m_pxShow, m_pxCountUp, m_pxReset;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_TIME"))then
			m_pxHour	= cast<CEdit>(m_apxPages[0]^.GetControl("Edit_Hours"));
			m_pxMinute	= cast<CEdit>(m_apxPages[0]^.GetControl("Edit_Min"));
			m_pxSecond	= cast<CEdit>(m_apxPages[0]^.GetControl("Edit_Sec"));
			
			m_pxShow=cast<CCheckBox>(m_apxPages[0]^.GetControl("Chk_Show"));
			m_pxCountUp=cast<CCheckBox>(m_apxPages[0]^.GetControl("Chk_CountUp"));
			m_pxReset=cast<CCheckBox>(m_apxPages[0]^.GetControl("Chk_Reset"));
			
			m_pxReset^.SetChecked(1);
		endif;
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		if(m_pxHour==null || m_pxMinute==null || m_pxSecond==null)then return; endif;

		var int  iDuration = p_rxParams.GetValueInt("duration");

		var int iMinutes = iDuration / 60;
		var int iHours 	 = iMinutes  / 60;

		var int iM		 = iMinutes - iHours*60;
		var int iS 		 = iDuration - iMinutes*60;

		m_pxHour^.SetText(iHours.ToString());
		m_pxMinute^.SetText(iM.ToString());
		m_pxSecond^.SetText(iS.ToString());
		
		m_pxShow^.SetChecked(p_rxParams.GetValueInt("show"));
		m_pxCountUp^.SetChecked(p_rxParams.GetValueInt("countup"));
		m_pxReset^.SetChecked(p_rxParams.GetValueInt("reset"));
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		if(m_pxHour==null || m_pxMinute==null || m_pxSecond==null )then return; endif;
		var int 	iH		= m_pxHour^.GetText().ToInt();
		var int 	iM		= m_pxMinute^.GetText().ToInt();
		var int 	iS		= m_pxSecond^.GetText().ToInt();
		po_rxParams.SetValue("duration",((iH*60+iM)*60+iS).ToReal());
		
		var int iShow=0;
		var int iCountUp=0;
		var int iReset=0;
		if(m_pxShow^.GetCheckMark()) then iShow=1; endif;
		if(m_pxCountUp^.GetCheckMark()) then iCountUp=1; endif;
		if(m_pxReset^.GetCheckMark()) then iReset=1; endif;
		
		po_rxParams.SetValue("show", iShow);
		po_rxParams.SetValue("countup", iCountUp);
		po_rxParams.SetValue("reset", iReset);
	endproc;
endclass;

class CConditionTruePages inherit CConditionPages
	
	export constructor()		
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)		
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)		
	endproc;
endclass;

class CConditionUserPages inherit CConditionPages
	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_USER"))then

		endif;
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)

	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)

	endproc;

endclass;


class CConditionPlayerDeadPages inherit CConditionPages
	var ^CDropList m_pxPlayer;
	var ^CRadioButton m_pxBldgsDestroyed;
	var ^CRadioButton m_pxProdDest;
	var ^CRadioButton m_pxNoneDest;
	var ^CCheckBox	m_pxCheckPyramid;

	export constructor()
		m_apxPages = 1;
		m_apxPages[0]=new CWindow();
		if (m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_PLDE")) then
			m_pxPlayer = cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Player"));
			m_pxBldgsDestroyed = cast<CRadioButton>(m_apxPages[0]^.GetControl("Radio_NoBldgs"));
			m_pxProdDest = cast<CRadioButton>(m_apxPages[0]^.GetControl("Radio_Producer"));
			m_pxNoneDest = cast<CRadioButton>(m_apxPages[0]^.GetControl("Radio_None"));
			m_pxCheckPyramid = cast<CCheckBox>(m_apxPages[0]^.GetControl("Chk_Pyramid"));
			
		endif;

		var int i, iC = 8;
		for (i=-1) cond(i<iC) iter(++i) do
			m_pxPlayer^.AddItem(i.ToString());
		endfor;
		m_pxProdDest^.SetSelected(true);
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		var int iIdx=m_pxPlayer^.FindItem(p_rxParams.GetValueInt("player_id").ToString());
		if(iIdx!=-1)then
			m_pxPlayer^.Select(iIdx);
		else
			m_pxPlayer^.Select(0);
		endif;
		var int iBLDG=p_rxParams.GetValueInt("check_bldgs");
		var int iPROD=p_rxParams.GetValueInt("check_producer");
		var int iNONE=p_rxParams.GetValueInt("check_none");
		var int iPYRA=p_rxParams.GetValueInt("check_pyramid");
		
		if(iPROD==1)then
			m_pxProdDest^.SetSelected(true);
		elseif(iBLDG==1)then
			m_pxBldgsDestroyed^.SetSelected(true);
		elseif(iNONE==1)then
			m_pxNoneDest^.SetSelected(true);
		endif;
		m_pxCheckPyramid^.SetChecked(iPYRA);
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		po_rxParams.SetValue("player_id", m_pxPlayer^.GetText().ToInt());
		var int iPROD=0;
		var int iBLDG=0;
		var int iNONE=0;
		var int iPYRA=0;
		if (m_pxProdDest^.GetSelected()) then
			iPROD=1;
		elseif(m_pxBldgsDestroyed^.GetSelected()) then
			iBLDG=1;
		elseif(m_pxNoneDest^.GetSelected()) then
			iNONE=1;
		endif;
		po_rxParams.SetValue("check_producer", iPROD);
		po_rxParams.SetValue("check_bldgs", iBLDG);
		po_rxParams.SetValue("check_none", iNONE);
		po_rxParams.SetValue("check_pyramid", m_pxCheckPyramid^.GetChecked());
	endproc;
endclass;

class CConditionPlayerPages inherit CConditionPages

	//var ^CRadioButton		m_pxRadioMin;
	//var ^CRadioButton		m_pxRadioMax;
	var ^CVarEdit			m_pxValue;
	var ^CEdit				m_pxPlayerID;
	var ^CDropList			m_pxAttribsList;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_PLYR"))then
			//m_pxRadioMin  = cast<CRadioButton>(m_apxPages[0]^.GetControl("Radio_Min"));
			//m_pxRadioMax  = cast<CRadioButton>(m_apxPages[0]^.GetControl("Radio_Max"));
			m_pxAttribsList= cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Attribs"));
			m_pxValue	  = cast<CVarEdit>(m_apxPages[0]^.GetControl("Edit_Value"));
			m_pxPlayerID  = cast<CEdit>(m_apxPages[0]^.GetControl("Edit_PlayerID"));
		endif;

		var array string asAttribs;
		asAttribs = 0;

		if (m_pxAttribsList != null) then
			m_pxAttribsList^.AddItem("wood");
			m_pxAttribsList^.AddItem("max_wood");
			m_pxAttribsList^.AddItem("food");
			m_pxAttribsList^.AddItem("max_food");
			m_pxAttribsList^.AddItem("stone");
			m_pxAttribsList^.AddItem("max_stone");
			m_pxAttribsList^.AddItem("resin");
			m_pxAttribsList^.AddItem("max_resin");
			m_pxAttribsList^.AddItem("bone");
			m_pxAttribsList^.AddItem("max_bone");
			m_pxAttribsList^.AddItem("hide");
			m_pxAttribsList^.AddItem("max_hide");
			m_pxAttribsList^.AddItem("iron");
			m_pxAttribsList^.AddItem("max_iron");
			m_pxAttribsList^.AddItem("units");
			m_pxAttribsList^.AddItem("max_units");
			/*var ^CAttribs pxAttr;//leveleditor has no player = CGameWrap.GetGameVars().GetPlayer().GetAttribs();
			if (pxAttr != null) then
				var int i;
				for (i=0) cond (i<pxAttr^.NumEntries()) iter (++i) do
					var string sAttrib, sValue;
					pxAttr^.GetEntry(i, sAttrib, sValue);
					m_pxAttribsList^.AddItem(sAttrib);
				endfor;
			endif;*/
		endif;
		
		m_pxValue^.SetAllowedInput(CVarEdit.NUMERIC_INPUT);

	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		var string sAttr 	= p_rxParams.GetValue("attrib_name");
		var string sAttrMax	= p_rxParams.GetValue("attrib_max");
		var string sVal  	= p_rxParams.GetValue("attrib_value");
		var int	   iPlyrID	= p_rxParams.GetValueInt("player_id");

		m_pxValue^.SetText(sVal);
		m_pxPlayerID^.SetText(iPlyrID.ToString());

		var int iItemID = m_pxAttribsList^.FindItem(sAttr);
		if (iItemID >= 0) then	m_pxAttribsList^.Select(iItemID);	endif;
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		po_rxParams.SetValue("attrib_name", m_pxAttribsList^.GetSelectedItemAsString());
		po_rxParams.SetValue("attrib_value", m_pxValue^.GetText());
		po_rxParams.SetValue("player_id", m_pxPlayerID^.GetText().ToInt());
		
		var string sMsg;
		if(!m_pxValue^.Validate(sMsg)) then
			CMessageBox.MsgBox("Variable Error", sMsg);
		endif;
	endproc;

endclass;

class CConditionRegionPages inherit CConditionPages

	var ^CObjSelector	m_pxObjSelector;
	var ^CVarEdit		m_pxCount;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		//m_apxPages[1]=new CWindow;

		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_REGN"))then
			m_pxObjSelector=cast<CObjSelector>(m_apxPages[0]^.GetControl("ObjSelector"));
			m_pxObjSelector^.m_xOnStateChange=OnChangeType;

			m_pxCount = cast<CVarEdit>(m_apxPages[0]^.GetControl("Edit_Count"));
			m_pxCount^.SetAllowedInput(CVarEdit.NUMERIC_INPUT);

			OnChangeType();
		endif;
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		if(m_pxObjSelector!=null)then m_pxObjSelector^.OnInit(p_rxParams); endif;
		m_pxCount^.SetText(p_rxParams.GetValue("obj_count"));
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		if(m_pxObjSelector!=null)then m_pxObjSelector^.OnFinish(po_rxParams); endif;
		
		po_rxParams.SetValue("obj_count", m_pxCount^.GetText());
		var string sMsg;
		if(!m_pxCount^.Validate(sMsg)) then
			CMessageBox.MsgBox("Variable Error", sMsg);
		endif;
	endproc;

	proc bool OnChangeType()
		if(m_pxObjSelector==null)then return true; endif;
		if(m_pxCount!=null)then
			if(m_pxObjSelector^.IsObjectChecked())then
				m_pxCount^.SetText("1");
				m_pxCount^.SetDisabled(true);
			else
				m_pxCount^.SetDisabled(false);
			endif;
		endif;
		return true;
	endproc;
endclass;

class CConditionGroupRegionPages inherit CConditionPages

	class CGroupItem inherit CItemData
		export var CClntHndl m_xGroupHndl;
	endclass;

	var ^CObjSelector	m_pxObjSelector;
	var ^CVarEdit		m_pxCount;
	var array CGroupItem	m_axItems;
	var ^CDropList			m_pxGroups;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;

		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_GREG"))then

			m_pxGroups = cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Groups"));

			m_pxObjSelector=cast<CObjSelector>(m_apxPages[0]^.GetControl("ObjSelector"));
			m_pxObjSelector^.m_xOnStateChange=OnChangeType;

			m_pxCount = cast<CVarEdit>(m_apxPages[0]^.GetControl("Edit_Count"));
			m_pxCount^.SetAllowedInput(CVarEdit.NUMERIC_INPUT);

			OnChangeType();
			FillGroupList();
		endif;
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		if(m_pxObjSelector!=null)then m_pxObjSelector^.OnInit(p_rxParams); endif;
		m_pxCount^.SetText(p_rxParams.GetValue("obj_count"));
		var CGuid xG;
		xG.FromString(p_rxParams.GetValue("group"));
		var ^CObj pxO=CLevelEditorWrap.GetObjMgr().GetObj(xG);
		if(pxO!=null) then
			m_pxGroups^.SetText(pxO^.GetName());
		endif;
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		if(m_pxObjSelector!=null)then m_pxObjSelector^.OnFinish(po_rxParams); endif;
		
		var int iSel = m_pxGroups^.GetSelectedItem();
		if(iSel>=0) then
			var ^CGroupItem pxGI = cast<CGroupItem>(m_pxGroups^.GetItemData(iSel));
			if(pxGI!=null) then
				var ^CObj pxO = pxGI^.m_xGroupHndl.GetObj();
				if(pxO!=null) then
					po_rxParams.SetValue("group", pxO^.GetGuid().ToString());
				endif;
			endif;
		endif;

		po_rxParams.SetValue("obj_count", m_pxCount^.GetText());
		var string sMsg;
		if(!m_pxCount^.Validate(sMsg)) then
			CMessageBox.MsgBox("Variable Error", sMsg);
		endif;
	endproc;

	proc bool OnChangeType()
		// Perhaps we want to use this for checking if an object isn't in the list anymore?
		/*if(m_pxObjSelector==null)then return true; endif;
		if(m_pxCount!=null)then
			if(m_pxObjSelector^.IsObjectChecked())then
				m_pxCount^.SetText("1");
				m_pxCount^.SetDisabled(true);
			else
				m_pxCount^.SetDisabled(false);
			endif;
		endif;*/
		return true;
	endproc;

	proc void FillGroupList()
		var CObjQueryCln xQ;
		xQ.SetType("GROU");
		var CObjList xL;
		xQ.Execute(xL);

		var int i, iC=xL.NumEntries();
		for(i=0) cond(i<iC) iter(++i) do
			var ^CObj pxO = xL[i].GetObj();
			if(pxO!=null) then
				var ^CGroupItem pxGI = ^(m_axItems.NewEntryRef());
				pxGI^.m_xGroupHndl = xL[i];
				m_pxGroups^.AddItem(pxO^.GetName(), pxGI);
			endif;
		endfor;
	endproc;
endclass;

class CConditionObjPropsPages inherit CConditionPages

	var ^CObjSelector	m_pxObjSel;
	var ^CDropList		m_pxAttributes;
	var ^CDropList		m_pxAttribMax;
	var ^CEdit				m_pxValue;
	var ^CStaticCtrl	m_pxAttribType;
	var ^CStaticCtrl	m_pxAttribMaxType;
	var array string	m_asAttribTypes;

	export constructor()
		m_asAttribTypes=0;
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_OBJP"))then

			m_pxObjSel			= cast<CObjSelector>(m_apxPages[0]^.GetControl("ObjSelector"));
			m_pxAttributes		= cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Attrib"));
			m_pxAttribMax		= cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Attrib_Max"));
			m_pxValue			= cast<CEdit>(m_apxPages[0]^.GetControl("Edit_Value"));
			m_pxAttribType 		= cast<CStaticCtrl>(m_apxPages[0]^.GetControl("Attrib_Type"));
			m_pxAttribMaxType	= cast<CStaticCtrl>(m_apxPages[0]^.GetControl("Attrib_Max_Type"));

			m_pxAttributes^.m_xOnChange = OnAttribSelection;
			m_pxAttribMax^.m_xOnChange = OnAttribMaxSelection;

			m_pxObjSel^.m_xOnStateChange = OnObjSelection;

			m_pxAttributes^.SetAllowAnyText(true);
			m_pxAttribMax^.SetAllowAnyText(true);
		endif;
	endconstructor;

	destructor()
	enddestructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		var string sVal = p_rxParams.GetValue("attrib_value");
		m_pxValue^.SetText(sVal);
		m_pxObjSel^.OnInit(p_rxParams);

		m_pxAttributes^.SetText(p_rxParams.GetValue("attrib_name"));

		var string sAttMax=p_rxParams.GetValue("attrib_max");
		if(sAttMax.IsEmpty()) then
			m_pxAttribMax^.Select(0);
		else
			m_pxAttribMax^.SetText(sAttMax);
		endif;
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		po_rxParams.SetValue("attrib_name", m_pxAttributes^.GetText());
		po_rxParams.SetValue("attrib_value", m_pxValue^.GetText());

		var string sAttMax=m_pxAttribMax^.GetText();
		if(sAttMax=="<none>") then
			po_rxParams.SetValue("attrib_max", "");
		else
			po_rxParams.SetValue("attrib_max", sAttMax);
		endif;

		m_pxObjSel^.OnFinish(po_rxParams);
	endproc;

	proc bool FillAttribsList()
		var ^CAttribs pxAttr = null;
		var ^CObj pxO = m_pxObjSel^.GetSelectedObj();
		if (pxO != null) then
			pxAttr = pxO^.GetAttribs();
		else
			var string sClass = m_pxObjSel^.GetSelectedClass();
			if (!sClass.IsEmpty()) then
				pxO = CObjHelper.FindObjOfClass(sClass);
				if (pxO!=null) then
					pxAttr = pxO^.GetAttribs();
				endif;
			else
				var CFourCC xT = m_pxObjSel^.GetSelectedType();
				if (!(xT=="All")) then
					pxO = CObjHelper.FindObjOfType(xT);
					if(pxO!=null) then pxAttr=pxO^.GetAttribs();endif;
				endif;
			endif;
		endif;

		if (pxAttr==null) then return false; endif;

		var int i, iC = pxAttr^.NumEntries();
		for (i=0) cond(i<iC) iter(++i) do
			var string sKey, sValue;
			if (pxAttr^.GetEntry(i, sKey, sValue)) then
				m_pxAttributes^.AddItem(sKey);
				m_pxAttribMax^.AddItem(sKey);

				var int iAttrIdx = m_asAttribTypes++;
				m_asAttribTypes[iAttrIdx] = pxAttr^.GetValueType(sKey);
			endif;
		endfor;

		if (pxO == null) then CClientWrap.GetObjMgr().DeleteGhost(); endif;
		return true;
	endproc;

	proc bool OnObjSelection()
		if (m_pxAttributes==null) then return false; endif;
		m_pxAttributes^.Clear();
		m_pxAttribMax^.Clear();
		m_pxAttribMax^.AddItem("<none>");
		m_asAttribTypes=0;

		m_pxAttributes^.m_xOnChange.Clear();
		m_pxAttribMax^.m_xOnChange.Clear();

		FillAttribsList();

		m_pxAttributes^.m_xOnChange 	= OnAttribSelection;
		m_pxAttribMax^.m_xOnChange	= OnAttribMaxSelection;
		return false;
	endproc;

	proc bool OnAttribSelection()
		if(m_pxAttributes==null) then return false; endif;

		var int iAttribIdx=m_pxAttributes^.GetSelectedItem();
		var int iAttribTypesCount=m_asAttribTypes.NumEntries();
		if((iAttribIdx<0)||(iAttribIdx>=iAttribTypesCount))then
			KLog.LogSpam("PaHa","AttribIdx "+iAttribIdx.ToString()+" doesn't have an AttribType; AttribTypesCount is "+iAttribTypesCount.ToString());
			m_pxAttribType^.SetText("");
			return false;
		endif;

		var string sAttribType=m_asAttribTypes[iAttribIdx];
		m_pxAttribType^.SetText("Type: "+sAttribType);
		KLog.LogSpam("PaHa","AttribType of AttribIdx "+iAttribIdx.ToString()+" is "+sAttribType);

		// special treatment for type bool that cannot be used together with a max attribute
		if(sAttribType=="bool")then
			m_pxAttribMax^.Select(0);
			m_pxAttribMax^.SetDisabled(true);
			m_pxAttribMax^.m_xOnChange.Clear();
		else
			m_pxAttribMax^.SetDisabled(false);
			m_pxAttribMax^.m_xOnChange=OnAttribMaxSelection;
		endif;

		return false;
	endproc;

	proc bool OnAttribMaxSelection()
		if(m_pxAttribMax==null) then return false; endif;

		var int iAttribMaxIdx=m_pxAttribMax^.GetSelectedItem()-1; // to take first entry <none> into account
		var int iAttribTypesCount=m_asAttribTypes.NumEntries();
		if((iAttribMaxIdx<0)||(iAttribMaxIdx>=iAttribTypesCount))then
			KLog.LogSpam("PaHa","AttribMaxIdx "+iAttribMaxIdx.ToString()+" doesn't have an AttribType; AttribTypesCount is "+iAttribTypesCount.ToString());
			m_pxAttribMaxType^.SetText("");
			return false;
		endif;

		var string sAttribType=m_asAttribTypes[iAttribMaxIdx];
		m_pxAttribMaxType^.SetText("Type: "+sAttribType);
		KLog.LogSpam("PaHa","AttribType of AttribMaxIdx "+iAttribMaxIdx.ToString()+" is "+sAttribType);

		return false;
	endproc;
endclass;

class CConditionTechTreePages inherit CConditionPages

	var ^CDropList 	m_pxFilter,m_pxPlayer;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_TECH"))then
			m_pxFilter = cast<CDropList>(m_apxPages[0]^.GetControl("Drop_TTFilter"));
			m_pxPlayer = cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Player"));

			var int i;
			for (i=-1) cond (i<8) iter (++i) do
				m_pxPlayer^.AddItem(i.ToString());
			endfor;
		endif;

		var ^CTechTreeMgr pxTTMgr=^(CLevelEditorWrap.GetClient().GetTechTreeMgr());
		var int i,iC=pxTTMgr^.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var string sPath=pxTTMgr^.GetFilterPath(i);
			if(sPath.Find("_RemoveMe")==-1)then
				m_pxFilter^.AddItem(sPath.Mid(9));
			endif;
		endfor;
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		m_pxFilter^.SetText(p_rxParams.GetValue("filter").Mid(8));
		m_pxPlayer^.Select(m_pxPlayer^.FindItem(p_rxParams.GetValueInt("player").ToString()));
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		po_rxParams.SetValue("filter", "Filters/" + m_pxFilter^.GetText());
		po_rxParams.SetValue("player", m_pxPlayer^.GetSelectedItemAsString().ToInt());
	endproc;

endclass;


class CConditionDeadPages inherit CConditionPages

	var ^CObjSelector	m_pxObjSelector;

	export constructor()		
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_DEAD"))then
			m_pxObjSelector=cast<CObjSelector>(m_apxPages[0]^.GetControl("ObjSelector"));
		endif;
	endconstructor;

	destructor()
	enddestructor;

	export proc void OnInit(ref CAttribs p_rxParams)		
		m_pxObjSelector^.OnInit(p_rxParams);
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		m_pxObjSelector^.OnFinish(po_rxParams);
	endproc;

endclass;


class CConditionDyingPages inherit CConditionPages

	var ^CObjSelector	m_pxObjSelector;

	export constructor()		
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_DYIN"))then
			m_pxObjSelector=cast<CObjSelector>(m_apxPages[0]^.GetControl("ObjSelector"));
		endif;
	endconstructor;

	destructor()
	enddestructor;

	export proc void OnInit(ref CAttribs p_rxParams)	
		m_pxObjSelector^.OnInit(p_rxParams);
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)	
		m_pxObjSelector^.OnFinish(po_rxParams);
	endproc;

endclass;

class CConditionTimerPages inherit CConditionPages

	var ^CEdit	m_pxTimerID;

	export constructor()		
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_TIMR"))then
			m_pxTimerID=cast<CEdit>(m_apxPages[0]^.GetControl("TimerID"));
		endif;
	endconstructor;

	destructor()
	enddestructor;

	export proc void OnInit(ref CAttribs p_rxParams)	
		m_pxTimerID^.SetText(p_rxParams.GetValueInt("timer_id").ToString());
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)	
		po_rxParams.SetValue("timer_id",m_pxTimerID^.GetText().ToInt());
	endproc;

endclass;


class CConditionCheckObjPages inherit CConditionPages

	var ^CDropList m_pxPlayer;
	var ^CEdit 	   m_pxNumObjs;
	var ^CDropList m_pxObject;
	var ^CDropList m_pxObjFilter;


	export constructor()
		CMainController.Get().AddClickProcRef(PickObj);
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_CHKO"))then

			m_pxPlayer 		= cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Owner"));
			m_pxNumObjs		= cast<CEdit>(m_apxPages[0]^.GetControl("Edit_Count"));
			m_pxObject  	= cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Object"));
			m_pxObjFilter	= cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Filter"));

			var int i;
			for (i=-1) cond (i<8) iter (++i) do
				m_pxPlayer^.AddItem(i.ToString());
			endfor;

			var ^CClassNode pxRoot = CLevelEditorWrap.GetObjClassMgr().GetRoot();
			if (pxRoot != null) then
				for (i=0) cond (i<pxRoot^.m_axSubs.NumEntries()) iter (++i) do
					m_pxObjFilter^.AddItem(pxRoot^.m_axSubs[i]^.m_sName);
				endfor;
			endif;
			m_pxObjFilter^.m_xOnChange = UpdateObjList;
			m_pxNumObjs^.SetText("1");
		endif;
		UpdateObjList();
	endconstructor;

	destructor()
		CMainController.Get().RemoveClickProcRef(PickObj);
	enddestructor;

	proc void FillList(^CClassNode p_pxWalk)
		if(p_pxWalk!=null) then
			if (p_pxWalk^.m_iType == 1) then
				m_pxObject^.AddItem(p_pxWalk^.m_sName);
			endif;

			var int i,iC=p_pxWalk^.m_axSubs.NumEntries();
			for(i=0)cond(i<iC)iter(i++)do
				var ^CClassNode pxWalk = p_pxWalk^.m_axSubs[i];
				FillList(p_pxWalk^.m_axSubs[i]);
			endfor;
		endif;
	endproc;

	proc bool UpdateObjList()
		m_pxObject^.Clear();
		var ^CObjClassMgrBase pxObjClassMgr=^(CLevelEditorWrap.GetObjClassMgr());
		var ^CClassNode pxRoot=pxObjClassMgr^.GetRoot();

		if(pxRoot!=null)then
			var int iSelIdx = m_pxObjFilter^.GetSelectedItem();
			if (iSelIdx > 0) then pxRoot = pxRoot^.m_axSubs[iSelIdx]; endif;
			var int i,iC=pxRoot^.m_axSubs.NumEntries();
			for (i=0) cond (i<iC) iter (++i) do
				FillList(pxRoot^.m_axSubs[i]);
			endfor;
		endif;
		return m_pxObject^.NumItems()>0;
	endproc;

	proc bool PickObj()
		var CClntHndl xHit = CClientWrap.GetObjMgr().GetHitObj();
		if (xHit.IsValid()) then
			var ^CObj pxObj = xHit.GetObj();
			if (pxObj!=null) then
				m_pxObjFilter^.Select(m_pxObjFilter^.FindItem(pxObj^.GetType().AsString()));
				m_pxObject^.Select(m_pxObject^.FindItem(pxObj^.GetName()));
				return true;
			endif;
		endif;
		return false;
	endproc;

	export proc void OnInit(ref CAttribs p_rxParams)
		var CGuid xGuid;
		m_pxObjFilter^.Select(0);
		m_pxObject^.Select(m_pxObject^.FindItem(p_rxParams.GetValue("obj_name")));
		m_pxPlayer^.Select(m_pxPlayer^.FindItem(p_rxParams.GetValueInt("player").ToString()));
		m_pxNumObjs^.SetText(p_rxParams.GetValueInt("obj_count").ToString());
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		po_rxParams.SetValue("obj_name", m_pxObject^.GetSelectedItemAsString());
		po_rxParams.SetValue("player",   m_pxPlayer^.GetSelectedItemAsString().ToInt());
		po_rxParams.SetValue("obj_count",m_pxNumObjs^.GetText().ToInt());
	endproc;

endclass;


class CConditionTaskAbortPages inherit CConditionPages

	var ^CObjSelector m_pxObjSel;
	var ^CDropList m_pxTasks;
	var ^CCheckBox m_pxCheckOnEnter;
	var ^CCheckBox m_pxCheckOnLeave;


	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_TSKA"))then

			m_pxObjSel			= cast<CObjSelector>(m_apxPages[0]^.GetControl("ObjSelector"));
			m_pxTasks			= cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Taskname"));
			m_pxCheckOnEnter	= cast<CCheckBox>(m_apxPages[0]^.GetControl("Check_OnEnter"));
			m_pxCheckOnLeave	= cast<CCheckBox>(m_apxPages[0]^.GetControl("Check_OnLeave"));

			FillTaskList();
		endif;
	endconstructor;

	destructor()
	enddestructor;

	proc void FillTaskList()
		m_pxTasks^.Clear();

		m_pxTasks^.AddItem("Fight");
		m_pxTasks^.AddItem("Trapped");
		m_pxTasks^.AddItem("Action");
		m_pxTasks^.AddItem("Firework");
		m_pxTasks^.AddItem("Harvest");
		m_pxTasks^.AddItem("Mine");
		m_pxTasks^.AddItem("GetFood");
		m_pxTasks^.AddItem("GetUlmtd");
		m_pxTasks^.AddItem("GetCorn");
		m_pxTasks^.AddItem("Harvest");
		m_pxTasks^.AddItem("BuildUp");
		m_pxTasks^.AddItem("Repair");
		m_pxTasks^.AddItem("BuildUpB");
		m_pxTasks^.AddItem("CTheLite");
		m_pxTasks^.AddItem("Insects");
		m_pxTasks^.AddItem("Entrench");
		m_pxTasks^.AddItem("Termites");
		m_pxTasks^.AddItem("Tornado");
		m_pxTasks^.AddItem("LockPick");
		m_pxTasks^.AddItem("Trade");
		m_pxTasks^.AddItem("Walk2Pos");
		m_pxTasks^.AddItem("PickUp");
		m_pxTasks^.AddItem("DropItem");
		m_pxTasks^.AddItem("Check");
		m_pxTasks^.AddItem("CatchA");
		m_pxTasks^.AddItem("GetCatch");
		m_pxTasks^.AddItem("CatchM");
		m_pxTasks^.AddItem("Train");
		m_pxTasks^.AddItem("SearchL");
		m_pxTasks^.AddItem("SearchT");
		m_pxTasks^.AddItem("Dock");
		m_pxTasks^.AddItem("Board");
		m_pxTasks^.AddItem("SailTo");
		m_pxTasks^.AddItem("Unboard");
		m_pxTasks^.AddItem("Shotgun");
		m_pxTasks^.AddItem("Jetpack");
		m_pxTasks^.AddItem("Throwdwn");
		m_pxTasks^.AddItem("Dundee");
		m_pxTasks^.AddItem("Hypnosis");
		m_pxTasks^.AddItem("Feed");
		m_pxTasks^.AddItem("Sleep");
		m_pxTasks^.AddItem("UpgrdA");
		m_pxTasks^.AddItem("MntdFght");
		m_pxTasks^.AddItem("Fishing");
		m_pxTasks^.AddItem("LCTask");
		m_pxTasks^.AddItem("FlyTra");
		m_pxTasks^.AddItem("WaitAnml");
		m_pxTasks^.AddItem("Flee");
		m_pxTasks^.AddItem("DelRes");
		m_pxTasks^.AddItem("idle");
		m_pxTasks^.AddItem("BrdTrns");
		m_pxTasks^.AddItem("UnbrdTr");
		m_pxTasks^.AddItem("BUMine");
		m_pxTasks^.AddItem("FeignDth");
		m_pxTasks^.AddItem("AnmlBash");
		m_pxTasks^.AddItem("Paw");
		m_pxTasks^.AddItem("MTrumpet");
		m_pxTasks^.AddItem("LRWAttck");
		m_pxTasks^.AddItem("Patrol");


	endproc;

	export proc void OnInit(ref CAttribs p_rxParams)
		m_pxObjSel^.OnInit(p_rxParams);

		m_pxTasks^.SetText(p_rxParams.GetValue("task_name"));

		var bitset dwF = p_rxParams.GetValueInt("task_flags").ToBitset();
		if ((dwF&01b)!=0b)  then m_pxCheckOnEnter^.SetChecked(1); endif;
		if ((dwF&010b)!=0b) then m_pxCheckOnLeave^.SetChecked(1); endif;

	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		po_rxParams.SetValue("task_name", m_pxTasks^.GetText());

		var bitset dwF = 0b;
		if (m_pxCheckOnEnter^.GetCheckMark()) then
			dwF |= 01b;
		endif;
		if (m_pxCheckOnLeave^.GetCheckMark()) then
			dwF |= 010b;
		endif;

		po_rxParams.SetValue("task_flags", dwF.ToInt());
		m_pxObjSel^.OnFinish(po_rxParams);
	endproc;

endclass;


//----------------------------------------------------------
// Class:	CConditionQuestPages
//----------------------------------------------------------
class CConditionQuestPages inherit CConditionPages

	var ^CList		m_pxQuests;
	var ^CEdit		m_pxHeadline;
	var ^CEdit		m_pxDesc;
	var ^CDropList	m_pxOwner;
	var ^CCheckBox	m_pxVisible;
	var ^CCheckBox	m_pxAccomp;
	var ^CCheckBox	m_pxUnaccomp;

	class CQuestInfo
		export var string 	m_sName;
		export var string	m_sHead;
		export var string	m_sDesc;
		export var CGuid	m_xGuid;
	endclass;

	var array CQuestInfo	m_axQuests;

	//----------------------------------------------------------
	// ctor()
	//----------------------------------------------------------
	export constructor()
		m_apxPages=1;

		m_apxPages[0]=new CWindow;
		m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_QUES");

		m_pxQuests 		= cast<CList>(m_apxPages[0]^.GetControl("GBox_Questbox/List_Quests"));
		m_pxHeadline 	= cast<CEdit>(m_apxPages[0]^.GetControl("GBox_Questbox/Edit_Headline"));
		m_pxDesc		= cast<CEdit>(m_apxPages[0]^.GetControl("GBox_Questbox/Edit_Desc"));
		m_pxOwner		= cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Owner"));
		m_pxVisible		= cast<CCheckBox>(m_apxPages[0]^.GetControl("GBox_Action/Check_Visible"));
		m_pxAccomp		= cast<CCheckBox>(m_apxPages[0]^.GetControl("GBox_Action/Check_Accomplished"));
		m_pxUnaccomp	= cast<CCheckBox>(m_apxPages[0]^.GetControl("GBox_Action/Check_Unaccomplishable"));

		m_pxQuests^.m_xOnSelect = OnSelectQuest;
		m_pxUnaccomp^.m_xOnStateChange = OnUnaccomp;
		m_pxAccomp^.m_xOnStateChange = OnAccomp;

		LoadQuestInfo();
	endconstructor;

	destructor()
	enddestructor;

	proc bool OnSelectQuest()
		var int iSel = m_pxQuests^.GetSelectedItem();
		if (iSel < m_axQuests.NumEntries() && iSel >= 0) then
			m_pxHeadline^.SetText(m_axQuests[iSel].m_sHead);
			m_pxDesc^.SetText(m_axQuests[iSel].m_sDesc);
		endif;
		return true;
	endproc;

	proc bool OnUnaccomp()
		if (m_pxUnaccomp^.GetCheckMark()) then
			m_pxAccomp^.SetChecked(0);
			m_pxAccomp^.SetDisabled(true);
			m_pxVisible^.SetChecked(1);
			m_pxVisible^.SetDisabled(true);
		else
			m_pxVisible^.SetDisabled(false);
			m_pxAccomp^.SetDisabled(false);
		endif;
		return true;
	endproc;
	proc bool OnAccomp()
		if (m_pxAccomp^.GetCheckMark()) then
			m_pxUnaccomp^.SetChecked(0);
			m_pxUnaccomp^.SetDisabled(true);
			m_pxVisible^.SetChecked(1);
			m_pxVisible^.SetDisabled(true);
		else
			m_pxVisible^.SetDisabled(false);
			m_pxUnaccomp^.SetDisabled(false);
		endif;
		return true;
	endproc;

	proc void LoadQuestInfo()
		var ^CQuestMgrClient pxQM=^(CClientWrap.GetClient().GetQuestMgr());
		var int i,iC=pxQM^.NumQuests();
		m_axQuests = iC;
		for(i=0)cond(i<iC)iter(i++)do
			var ^CQuestMgr.CQuest pxWalk=^(pxQM^.GetQuest(i));
			m_axQuests[i].m_sName = pxWalk^.GetName();
			m_axQuests[i].m_sHead = pxWalk^.GetHeadline();
			m_axQuests[i].m_sDesc = pxWalk^.GetDescription();
			m_axQuests[i].m_xGuid = pxWalk^.GetGuid();
		endfor;
		m_pxQuests^.Clear();

		iC = m_axQuests.NumEntries();
		for(i=0) cond(i<iC) iter(++i) do
			m_pxQuests^.AddItem(m_axQuests[i].m_sName);
		endfor;

		if (iC > 0) then m_pxQuests^.Select(0); endif;

		m_pxOwner^.Clear();
		iC = 8;
		for (i=0) cond(i<iC) iter(++i) do
			m_pxOwner^.AddItem(i.ToString());
		endfor;

	endproc;

	//----------------------------------------------------------
	// OnInit()
	//----------------------------------------------------------
	export proc void OnInit(ref CAttribs p_rxParams)
		LoadQuestInfo();

		var CGuid xG; xG.FromString(p_rxParams.GetValue("quest_guid"));
		
		var int iItemIdx = -1;
		var int i, iC = m_axQuests.NumEntries();
		for(i=0) cond(i<iC) iter(++i) do
			if(m_axQuests[i].m_xGuid == xG) then
				iItemIdx = i;
				break;
			endif;
		endfor;
		
		// temp fallback ....
		if(iItemIdx < 0) then
			var string sCurQuest=p_rxParams.GetValue("quest_name");
			iItemIdx=m_pxQuests^.FindItem(sCurQuest);
		endif;
		
		if(iItemIdx!=-1)then
			m_pxQuests^.Select(iItemIdx);
		endif;

		m_pxVisible^.SetChecked(0);
		m_pxAccomp^.SetChecked(0);
		m_pxUnaccomp^.SetChecked(0);

		var int iState = p_rxParams.GetValueInt("dest_state");

		if (iState==0) then
			m_pxVisible^.SetChecked(1);
		elseif (iState == 1) then
			m_pxVisible^.SetChecked(1);
			m_pxAccomp^.SetChecked(1);
		elseif(iState==2) then
			m_pxVisible^.SetChecked(1);
			m_pxUnaccomp^.SetChecked(1);
		endif;

		var int iOwner = p_rxParams.GetValueInt("owner");
		m_pxOwner^.SetText(iOwner.ToString());
	endproc;

	//----------------------------------------------------------
	// OnFinish()
	//----------------------------------------------------------
	export proc void OnFinish(ref CAttribs po_rxParams)
		var int iSel = m_pxQuests^.GetSelectedItem();
		if(iSel>=0) then
			po_rxParams.SetValue("quest_guid", m_axQuests[iSel].m_xGuid.ToString());
			
			var string sOwn = m_pxOwner^.GetText();
			var int iOwn = sOwn.ToInt();
			if (sOwn=="All") then
				iOwn = -1;
			endif;
			po_rxParams.SetValue("owner", iOwn);
	
			var int iState = 3;
			if (m_pxUnaccomp^.GetCheckMark()) then
				iState = 2;
			else
				if (m_pxAccomp^.GetCheckMark()) then
					iState = 1;
				endif;
			endif;
	
			if (m_pxVisible^.GetCheckMark() && iState == 3) then
				iState = 0;
			endif;
	
			po_rxParams.SetValue("dest_state", iState);
		endif;
	endproc;

endclass;

class CConditionSeqEndPages inherit CConditionPages

	var ^CEdit		m_pxSeqName;
	var ^CButton	m_pxChangeBtn;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		//m_apxPages[1]=new CWindow;

		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_SQEN"))then
			m_pxSeqName = cast<CEdit>(m_apxPages[0]^.GetControl("Edit_SeqName"));
			m_pxChangeBtn=cast<CButton>(m_apxPages[0]^.GetControl("ChangeBtn"));
			m_pxChangeBtn^.m_xOnClick=OnChangeName;
		endif;
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		m_pxSeqName^.SetText(p_rxParams.GetValue("sequence_name"));
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		po_rxParams.SetValue("sequence_name", m_pxSeqName^.GetText());
	endproc;

	proc bool OnChangeName()
		var ^CEnhancedLoadSaveDialog pxTmp = new CEnhancedLoadSaveDialog(0,"custom");
		pxTmp^.ClearFilters();
		pxTmp^.AddFilter("Sequence Files","*.seq");
		//var string sBasePath=CClientWrap.GetUrsRelPath()+"/Data/Base/Sequences";
		var string sBasePath=CClientWrap.GetUrsRelPath()+"/Data";
		pxTmp^.SetBasePath(sBasePath);
		pxTmp^.SetUniqueSettingName("SeqCondLoadSaveDlg");
		pxTmp^.m_xReturnFileString=OnReturnLoadString;
		CClientWrap.GetDesktop()^.AddChild(pxTmp);
		CWindowMgr.Get().BringWindowToTop(pxTmp, true);
		CWindowMgr.Get().SetModal(pxTmp);
		return true;
	endproc;

	proc bool OnReturnLoadString(string p_sFileString)
		p_sFileString.Replace("\\","/");
		var string sTmp="/Data/";
		var int iIdx=p_sFileString.Find(sTmp);
		if(iIdx!=-1)then
			p_sFileString.Delete(0,iIdx+sTmp.GetLength());
		endif;		
		m_pxSeqName^.SetText(p_sFileString);
		return(true);
	endproc;

endclass;

class CConditionDialogSceneEndPages inherit CConditionPages

	var ^CEdit		m_pxDlSceneName;
	var ^CButton	m_pxChangeBtn;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		//m_apxPages[1]=new CWindow;

		if(!m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_DSEN"))then
			KLog.LogError("CConditionDialogSceneEndPages","InitFromRessurce failed");
			return;
		endif;
		m_pxDlSceneName=cast<CEdit>(m_apxPages[0]^.GetControl("Edit_DlgSceneName"));
		m_pxChangeBtn=cast<CButton>(m_apxPages[0]^.GetControl("ChangeBtn"));
		m_pxChangeBtn^.m_xOnClick=OnChangeName;
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		m_pxDlSceneName^.SetText(p_rxParams.GetValue("dlgscene_name"));
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		po_rxParams.SetValue("dlgscene_name", m_pxDlSceneName^.GetText());
	endproc;

	proc bool OnChangeName()
		var ^CEnhancedLoadSaveDialog pxTmp = new CEnhancedLoadSaveDialog(0,"custom");
		pxTmp^.ClearFilters();
		pxTmp^.AddFilter("DialogScene Files","*.dlg");
		//var string sBasePath=CClientWrap.GetUrsRelPath()+"/Data/Base/DialogScenes";
		var string sBasePath=CClientWrap.GetUrsRelPath()+"/Data";		
		pxTmp^.SetBasePath(sBasePath);
		pxTmp^.m_xReturnFileString=OnReturnLoadString;
		CClientWrap.GetDesktop()^.AddChild(pxTmp);
		CWindowMgr.Get().BringWindowToTop(pxTmp, true);
		CWindowMgr.Get().SetModal(pxTmp);
		return true;
	endproc;

	proc bool OnReturnLoadString(string p_sFileString)
		p_sFileString.Replace("\\","/");
		var string sTmp="/Data/";
		var int iIdx=p_sFileString.Find(sTmp);
		if(iIdx!=-1)then
			p_sFileString.Delete(0,iIdx+sTmp.GetLength());
		endif;		
		m_pxDlSceneName^.SetText(p_sFileString);
		return(true);
	endproc;

endclass;


//----------------------------------------------------------
// Class:	CCondtionVarsPages
//----------------------------------------------------------
class CConditionVarsPages inherit CConditionPages

	var ^CList 			m_pxList;
	var ^CStaticCtrl	m_pxType;
	var ^CEdit			m_pxValue;
	var ^CRadioButton 	m_pxLocal;
	var ^CRadioButton 	m_pxGlobal;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_VARS");

		m_pxList = cast<CList>(m_apxPages[0]^.GetControl("List_Vars"));
		m_pxType = cast<CStaticCtrl>(m_apxPages[0]^.GetControl("Txt_Type"));
		m_pxValue = cast<CEdit>(m_apxPages[0]^.GetControl("Edit_Value"));

		m_pxLocal = cast<CRadioButton>(m_apxPages[0]^.GetControl("Radio_Local"));
		m_pxGlobal = cast<CRadioButton>(m_apxPages[0]^.GetControl("Radio_Global"));

		m_pxList^.m_xOnSelect = OnSelect;
		m_pxValue^.m_xOnUpdate = CheckValue;

		m_pxLocal^.m_xOnChange = OnCheckRadio;
		m_pxGlobal^.m_xOnChange = OnCheckRadio;

		m_pxLocal^.SetSelected(true);
		LoadVars(true);
	endconstructor;

	proc bool OnCheckRadio()
		LoadVars(m_pxLocal^.GetSelected());
		return true;
	endproc;

	proc string GetVarName(^CViewTCVariables.CVarInfo p_pxV)
		return p_pxV^.m_sType + " " + p_pxV^.m_sName + " = '" + p_pxV^.m_sValue + "'";
	endproc;

	proc void ClearList()
		var int i, iC = m_pxList^.NumItems();
		for(i=0) cond(i<iC) iter(++i) do
			delete m_pxList^.GetItemData(i);
		endfor;
		m_pxList^.Clear();
	endproc;

	proc void LoadVars(bool p_bLocal)
		ClearList();
		
		var ^CPropDB pxDB;
		var ^CPropDB.CNode pxNode;
		if(p_bLocal) then
			var ^CLevelInfo pxLevelInfo=^(CLevelEditorWrap.GetClient().GetLevelInfo());
			pxNode = pxLevelInfo^.GetGenericData().FindNode("Variables", false);
			m_pxLocal^.SetSelected(true);
		else
			m_pxGlobal^.SetSelected(true);
			pxDB = new CPropDB();
			if(pxDB^.Load(CClientWrap.GetUrsRelPath()+"/Data/Base/Scripts/Server/settings/ProfileVariables.txt")) then
				pxNode = ^(pxDB^.GetRoot());
			endif;
		endif;

		if(pxNode!=null)then
			var int i, iC = pxNode^.NumSubs();
			for(i=0) cond(i<iC) iter(++i) do
				var ^CPropDB.CNode pxSub = ^(pxNode^.Get(i));
				var ^CViewTCVariables.CVarInfo pxVI = new CViewTCVariables.CVarInfo();
				pxVI^.Set(pxSub^.Name(), pxSub^.GetValueS("type"), pxSub^.GetValueS("value"));
				m_pxList^.AddItem(GetVarName(pxVI), new CViewTCVariables.CVarData(pxVI));
			endfor;
		endif;
		delete pxDB;
	endproc;

	proc bool OnSelect()
		var int iSel = m_pxList^.GetSelectedItem();
		if(iSel>=0) then
			var ^CViewTCVariables.CVarData pxVD = cast<CViewTCVariables.CVarData>(m_pxList^.GetItemData(iSel));
			if(pxVD==null) then return false; endif;

			var ^CViewTCVariables.CVarInfo pxVI = pxVD^.m_pxVar;
			if(pxVI==null) then return false; endif;

			m_pxType^.SetText(pxVI^.m_sType);
			m_pxValue^.SetText("");
		endif;
		return true;
	endproc;

	proc bool CheckValue()
		var string sD, sE;
		return CheckValueImpl(sD, sE);
	endproc;

	proc bool CheckVarUsage(string p_sType, string p_sValue);
	KLog.LogSpam("MaZi", "a");
		var int iStart = p_sValue.Find("$(");
		if(iStart>=0) then
			KLog.LogSpam("MaZi", "b");
			var int iEnd = p_sValue.Find(")");
			if(iEnd > iStart) then
				var string sVarName = p_sValue.Mid(iStart+2, iEnd-(iStart+2));
				KLog.LogSpam("MaZi", "c");
				var ^CLevelInfo pxLevelInfo=^(CLevelEditorWrap.GetClient().GetLevelInfo());
				var ^CPropDB.CNode pxNode = pxLevelInfo^.GetGenericData().FindNode("Variables", false);
				if(pxNode!=null) then
					KLog.LogSpam("MaZi", "d");
					var int i,iC=pxNode^.NumSubs();
					for(i=0) cond(i<iC) iter(++i) do
						KLog.LogSpam("MaZi", "e"+i.ToString());
						var ^CPropDB.CNode pxChild = ^(pxNode^.Get(i));
						if(pxChild^.Name()==sVarName) then
							if(pxChild^.GetValueS("type")!=p_sType) then
								var string sErr="Comparsion of Variables of type '"+p_sType+"' with Variabled of type '"+pxChild^.GetValueS("type")+"' is not possible.";
								CMessageBox.MsgBox("Variable-Condition", sErr);
								return false;
							endif;
							return true;
						endif;
					endfor;
				endif;
				
				var bool bOK = false;
				var ^CPropDB pxDB = new CPropDB();
				if(pxDB^.Load(CClientWrap.GetUrsRelPath()+"/Data/Base/Scripts/Server/settings/ProfileVariables.txt")) then
					pxNode = ^(pxDB^.GetRoot());
				endif;
				KLog.LogSpam("MaZi", "e");
				if(pxNode!=null) then
					var int i,iC=pxNode^.NumSubs();
					KLog.LogSpam("MaZi", "f");
					for(i=0) cond(i<iC) iter(++i) do
						KLog.LogSpam("MaZi", "g"+i.ToString());
						var ^CPropDB.CNode pxChild = ^(pxNode^.Get(i));
						if(pxChild^.Name()==sVarName) then
							if(pxChild^.GetValueS("type")!=p_sType) then
								var string sErr="Comparsion of Variables of type '"+p_sType+"' with Variabled of type '"+pxChild^.GetValueS("type")+"' is not possible.";
								CMessageBox.MsgBox("Variable-Condition", sErr);
								delete pxDB;
								return false;
							endif;
							bOK=true;
							break;
						endif;
					endfor;
				endif;
				if(!bOK) then
					CMessageBox.MsgBox("Variable-Condition", "Unknown Variable");
				endif;
				delete pxDB;
				return bOK;
			endif;
			return false;
		endif;
		return true;
	endproc;

	proc bool CheckValueImpl(ref string po_rsVal, ref string po_rsOp)
		var string sType = m_pxType^.GetText();
		var string sValue = m_pxValue^.GetText();
		
		if(sType == "string") then
			po_rsVal = sValue;
			po_rsOp = "==";
			return CheckVarUsage(sType, po_rsVal);
		elseif(sType == "int" || sType == "float") then
			var char cA = sValue.GetAt(0);
			if (cA=='>' || cA=='<' || cA=='=' || cA=='!') then
				sValue = sValue.Mid(1);
				po_rsOp = cA;
				cA = sValue.GetAt(0);
				if(cA=='=') then
					po_rsOp+=cA.ToString();
					sValue=sValue.Mid(1);
				endif;
				po_rsVal = sValue;
				return true;
			endif;

			if((sType=="int" && (sValue.ToInt().ToString()==sValue)) ||
			   (sType=="float" && (sValue.ToReal().ToString()==sValue)) ||
			   (sValue.Find("$(")>=0))  then
			   	po_rsVal = sValue;
			   	po_rsOp = "==";
			  return CheckVarUsage(sType, po_rsVal);
			endif;
		elseif(sType == "bool") then
			if(sValue.CompareNoCase("true")==0 || sValue.CompareNoCase("false")==0) then
				po_rsVal = sValue;
				po_rsVal.MakeLower();
				po_rsOp = "==";
				return CheckVarUsage(sType, po_rsVal);
			else
				m_pxValue^.SetText("false");
				po_rsVal = "false";
				po_rsOp = "==";
				return false;
			endif;
		endif;
		po_rsVal="";
		po_rsOp="";
		m_pxValue^.SetText("");;
		return false;
	endproc;

	export proc void OnInit(ref CAttribs p_rxParams)
		var bool bLocal = p_rxParams.GetValueInt("local")==1;
		var string sName = p_rxParams.GetValue("varname");
		var string sValue = p_rxParams.GetValue("value");
		var string sOp = p_rxParams.GetValue("operation");

		LoadVars(bLocal);

		var int i, iC = m_pxList^.NumItems();
		for(i=0) cond(i<iC) iter(++i) do
			var ^CViewTCVariables.CVarData pxVD = cast<CViewTCVariables.CVarData>(m_pxList^.GetItemData(i));
			if(pxVD==null) then return; endif;

			var ^CViewTCVariables.CVarInfo pxVI = pxVD^.m_pxVar;
			if(pxVI==null) then return; endif;

			if(pxVI^.m_sName == sName) then break; endif;
		endfor;

		if(i<iC) then
			m_pxList^.Select(i);
			m_pxValue^.m_xOnUpdate.Clear();
			/*if(sOp=="==") then
				m_pxValue^.SetText(sValue);
			else*/
				m_pxValue^.SetText(sOp+sValue);
			//endif;
			m_pxValue^.m_xOnUpdate = CheckValue;
			
			KLog.LogSpam("MaZi", "OnInit = "+sOp+sValue);
		endif;
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		var int iSel = m_pxList^.GetSelectedItem();
		if(iSel<0) then return; endif;

		var string sName, sVal, sOp;
		if (CheckValueImpl(sVal, sOp)) then
			var ^CViewTCVariables.CVarData pxVD = cast<CViewTCVariables.CVarData>(m_pxList^.GetItemData(iSel));
			if(pxVD==null) then return; endif;

			var ^CViewTCVariables.CVarInfo pxVI = pxVD^.m_pxVar;
			if(pxVI==null) then return; endif;

			sName = pxVI^.m_sName;
		endif;

		var int iLoc = 0;
		if(m_pxLocal^.GetSelected()) then
			iLoc = 1;
		endif;
		po_rxParams.SetValue("local", iLoc);
		po_rxParams.SetValue("varname", sName);
		po_rxParams.SetValue("value", sVal);
		po_rxParams.SetValue("operation", sOp);
		
		KLog.LogSpam("MaZi", "OnFinish = "+sOp+sVal);
	endproc;
endclass;


class CConditionDiplomacyPages inherit CConditionPages

	var ^CSpinCtrlNumber 	m_pxPlyr1;
	var ^CSpinCtrlNumber	m_pxPlyr2;
	var ^CDropList 			m_pxRelation;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_DIPL");

		m_pxPlyr1 = cast<CSpinCtrlNumber>(m_apxPages[0]^.GetControl("Spin_Plyr1"));
		m_pxPlyr2 = cast<CSpinCtrlNumber>(m_apxPages[0]^.GetControl("Spin_Plyr2"));
		m_pxRelation = cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Relation"));

		m_pxRelation^.AddItem("is an enemy of");
		m_pxRelation^.AddItem("is neutral to");
		m_pxRelation^.AddItem("is a friend of");

		var ^CLevelInfo pxLevelInfo=^(CLevelEditorWrap.GetClient().GetLevelInfo());
		var ^CPropDB pxLI = ^(pxLevelInfo^.GetGenericData());
		var ^CPropDB.CNode pxBaseNode=^((pxLI^)["Base"]);
		var int iMaxPlayer = pxBaseNode^.GetValueI("MaxPlayers");
		if (iMaxPlayer==0) then iMaxPlayer=1; endif;
		m_pxPlyr1^.SetLimits(0, iMaxPlayer-1, 1);
		m_pxPlyr2^.SetLimits(0, iMaxPlayer-1, 1);
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		m_pxPlyr1^.SetValue(p_rxParams.GetValueInt("plyr1"));
		m_pxPlyr2^.SetValue(p_rxParams.GetValueInt("plyr2"));
		m_pxRelation^.Select(p_rxParams.GetValueInt("relation"));
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		var int iPlyr1 = m_pxPlyr1^.GetValueInt();
		var int iPlyr2 = m_pxPlyr2^.GetValueInt();

		if(iPlyr1==iPlyr2) then
			CMessageBox.MsgBox("WARNING: Wrong Data", "Player1 == Player2 ... not a goog idea ;)");
			return;
		endif;

		po_rxParams.SetValue("plyr1", iPlyr1);
		po_rxParams.SetValue("plyr2", iPlyr2);
		po_rxParams.SetValue("relation", m_pxRelation^.GetSelectedItem());
	endproc;
endclass;


class CConditionChatPages inherit CConditionPages

	var ^CSpinCtrlNumber 	m_pxPlayer;
	var ^CEdit		m_pxText;
	var ^CCheckBox		m_pxExact, m_pxCheatOnly;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_CHAT");

		m_pxPlayer = cast<CSpinCtrlNumber>(m_apxPages[0]^.GetControl("Spin_Player"));
		m_pxText = cast<CEdit>(m_apxPages[0]^.GetControl("Edit_Text"));
		m_pxExact = cast<CCheckBox>(m_apxPages[0]^.GetControl("Check_Exact"));
		m_pxCheatOnly = cast<CCheckBox>(m_apxPages[0]^.GetControl("Check_Cheats"));
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		m_pxPlayer^.SetValue(p_rxParams.GetValueInt("player"));
		m_pxText^.SetText(p_rxParams.GetValue("text"));
		m_pxExact^.SetChecked(BoolToInt(p_rxParams.GetValueBool("exact")));
		m_pxCheatOnly^.SetChecked(BoolToInt(p_rxParams.GetValueBool("only_cheats")));
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		var int iPlayer = m_pxPlayer^.GetValueInt();
		var string sText = m_pxText^.GetText();
		var bool bExact =  m_pxExact^.GetCheckMark();
		var bool bCheats = m_pxCheatOnly^.GetCheckMark();

		po_rxParams.SetValue("player", iPlayer);
		po_rxParams.SetValue("text", sText);
		po_rxParams.SetValue("exact", bExact);
		po_rxParams.SetValue("only_cheats", bCheats);
	endproc;

	proc int BoolToInt(bool p_bOol)
		if(p_bOol) then
			return 1;
		endif;
		return 0;
	endproc;
endclass;

class CConditionItemPages inherit CConditionPages

	class CItemInfo inherit CItemData
		export constructor()
		endconstructor;

		export constructor(CClntHndl p_xHndl)
			m_xObj = p_xHndl;
		endconstructor;

		export var CClntHndl m_xObj;
	endclass;

	var ^CObjSelector	m_pxObjSel;
	var ^CDropList		m_pxItems;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_ITEM");

		m_pxObjSel = cast<CObjSelector>(m_apxPages[0]^.GetControl("ObjSelector"));
		m_pxItems =  cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Items"));

		FillItemList();
	endconstructor;

	export destructor()
		var int i, iC = m_pxItems^.NumItems();
		for(i=0) cond(i<iC) iter(++i) do
			delete m_pxItems^.GetItemData(i);
		endfor;
		m_pxItems^.Clear();
	enddestructor;

	proc void FillItemList()
		var ^CViewObjFinder pxFinder=CEnhancedMenu.Get().GetObjFinder();
		if(pxFinder==null)then return; endif;
		
		var CTechTreeDef xTTDef;
		var ^CTechTreeMgr pxTTMgr=^(CLevelEditorWrap.GetClient().GetTechTreeMgr());
		var CTechTree xTT=pxTTMgr^.GetTechTree(xTTDef);
		var ^CTechTree.CNode pxObjNode;
		pxObjNode = xTT.FindNode("/Items/Objects");
		if(pxObjNode!=null) then
			var int i, iC = pxObjNode^.NumSubs();
			for(i=0) cond(i<iC) iter(++i) do
				var ^CTechTree.CNode pxItem = pxObjNode^.GetSub(i);
				if(pxItem!=null) then
					m_pxItems^.AddItem(pxItem^.GetName());
				endif;
			endfor;
			m_pxItems^.AddItem("item_whatever");
		endif;
	endproc;

	export proc void OnInit(ref CAttribs p_rxParams)
		if(m_pxObjSel!=null)then m_pxObjSel^.OnInit(p_rxParams); endif;

		var int iItem = m_pxItems^.FindItem(p_rxParams.GetValue("item_class"));
		if(iItem>=0) then
			m_pxItems^.Select(iItem);
		endif;
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		if(m_pxObjSel!=null)then m_pxObjSel^.OnFinish(po_rxParams); endif;
		po_rxParams.SetValue("item_class", m_pxItems^.GetSelectedItemAsString());
	endproc;
endclass;


///***
///	CConditionBuildingPages BLDG
///***
class CConditionBuildingPages inherit CConditionPages

	var ^CSpinCtrlNumber 	m_pxOwner;
	var ^CEdit				m_pxValue;
	var ^CObjectTreeCtrl	m_pxTree;
	var ^CObjSelector		m_pxObjSelector;
	var ^CEdit				m_pxVariable;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_BLDG"))then
			m_pxObjSelector=cast<CObjSelector>(m_apxPages[0]^.GetControl("ObjSelector"));
			m_pxObjSelector^.OnlyRegionVisible();
		endif;
		
		m_pxOwner = cast<CSpinCtrlNumber>(m_apxPages[0]^.GetControl("Spin_Owner"));
		m_pxValue = cast<CEdit>(m_apxPages[0]^.GetControl("Edit_Count"));
		m_pxTree = cast<CObjectTreeCtrl>(m_apxPages[0]^.GetControl("ObjTree"));
		m_pxVariable = cast<CEdit>(m_apxPages[0]^.GetControl("Variable"));
		
		m_pxOwner^.m_xOnChange = OnChangePlayer;
		m_pxTree^.InitForPlayer(0, CObjectTreeCtrl.SHOW_BLDG);
	endconstructor;


	proc bool OnChangePlayer()
		m_pxTree^.InitForPlayer(m_pxOwner^.GetValueInt(), CObjectTreeCtrl.SHOW_BLDG);
		return true;
	endproc;


	export proc void OnInit(ref CAttribs p_rxParams)
		m_pxTree^.OnInit(p_rxParams.GetValue("class"));
		m_pxOwner^.SetValue(p_rxParams.GetValueInt("owner"));
		m_pxValue^.SetText(p_rxParams.GetValue("value"));
		m_pxVariable^.SetText(p_rxParams.GetValue("variable"));
		m_pxObjSelector^.OnInit(p_rxParams);
	endproc;


	export proc void OnFinish(ref CAttribs po_rxParams)
		po_rxParams.SetValue("owner", m_pxOwner^.GetValueInt());
		po_rxParams.SetValue("class", m_pxTree^.GetSelectedItemAsString());
		po_rxParams.SetValue("value", m_pxValue^.GetText());
		po_rxParams.SetValue("variable", m_pxVariable^.GetText());
		m_pxObjSelector^.OnFinish(po_rxParams);
	endproc;
endclass;



class CConditionTributePages inherit CConditionPages

	var ^CSpinCtrlNumber	m_pxOwner, m_pxReceiver;
	var ^CDropList			m_pxRes;
	var ^CEdit				m_pxEdit;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_TRIB");
		
		m_pxOwner = cast<CSpinCtrlNumber>(m_apxPages[0]^.GetControl("Spin_Owner"));
		m_pxReceiver = cast<CSpinCtrlNumber>(m_apxPages[0]^.GetControl("Spin_Receiver"));
		m_pxRes = cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Res"));
		m_pxEdit = cast<CEdit>(m_apxPages[0]^.GetControl("Edit_Amount"));
		
		m_pxRes^.AddItem("food");
		m_pxRes^.AddItem("wood");
		m_pxRes^.AddItem("stone");
		m_pxRes^.AddItem("scalps");
		
		var ^CLevelInfo pxLevelInfo=^(CLevelEditorWrap.GetClient().GetLevelInfo());
		var ^CPropDB pxLI = ^(pxLevelInfo^.GetGenericData());
		var ^CPropDB.CNode pxBaseNode=^((pxLI^)["Base"]);
		var int iMaxPlayer = pxBaseNode^.GetValueI("MaxPlayers");
		if (iMaxPlayer==0) then iMaxPlayer=1; endif;
		m_pxOwner^.SetLimits(0, iMaxPlayer-1, 1);
		m_pxReceiver^.SetLimits(0, iMaxPlayer-1, 1);
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		m_pxOwner^.SetValue(p_rxParams.GetValueInt("owner"));
		m_pxReceiver^.SetValue(p_rxParams.GetValueInt("receiver"));
		m_pxRes^.SetText(p_rxParams.GetValue("resource"));
		m_pxEdit^.SetText(p_rxParams.GetValue("amount"));
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		po_rxParams.SetValue("owner", m_pxOwner^.GetValueInt());
		po_rxParams.SetValue("receiver", m_pxReceiver^.GetValueInt());
		po_rxParams.SetValue("resource", m_pxRes^.GetText());
		po_rxParams.SetValue("amount", m_pxEdit^.GetText());
	endproc;
endclass;

class CConditionInSightPages inherit CConditionPages

	var ^CObjSelector m_pxObjsA, m_pxObjsB;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_SGHT");
		
		m_pxObjsA = cast<CObjSelector>(m_apxPages[0]^.GetControl("ObjSel_A"));
		m_pxObjsB = cast<CObjSelector>(m_apxPages[0]^.GetControl("ObjSel_B"));
		
		m_pxObjsB^.SetAttribsPrefix("B_");
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		m_pxObjsA^.OnInit(p_rxParams);
		m_pxObjsB^.OnInit(p_rxParams);
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		m_pxObjsA^.OnFinish(po_rxParams);
		m_pxObjsB^.OnFinish(po_rxParams);
	endproc;
endclass;


class CConditionWaypointReachedPages inherit CConditionPages

	var ^CObjSelector m_pxSel;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_WAYR");
		
		m_pxSel = cast<CObjSelector>(m_apxPages[0]^.GetControl("ObjSel"));
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		m_pxSel^.OnInit(p_rxParams);
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		m_pxSel^.OnFinish(po_rxParams);
	endproc;
	
endclass;

class CConditionCheckGroupPages inherit CConditionPages

	var ^CDropList m_pxGroups;
	var ^CVarEdit	   m_pxValue;

	class CGroupItemData inherit CItemData
		export var CGuid m_xGuid;
	endclass;
	var array CGroupItemData m_axItems;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_CKGR");
		
		m_pxGroups = cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Groups"));
		m_pxValue = cast<CVarEdit>(m_apxPages[0]^.GetControl("Edit_Value"));
		
		var CObjQueryCln xQ;
		xQ.SetType("GROU");
		var CObjList xL;
		xQ.Execute(xL);
		
		var int i, iC = xL.NumEntries();
		for(i=0) cond(i<iC) iter(++i) do
			var ^CObj pxO = xL[i].GetObj();
			if(pxO!=null) then
				var ^CGroupItemData pxGID = ^(m_axItems.NewEntryRef());
				pxGID^.m_xGuid = pxO^.GetGuid();
				m_pxGroups^.AddItem(pxO^.GetName(), pxGID);
			endif;
		endfor;
		m_pxGroups^.QSort();
		if(m_pxGroups^.NumItems()>0) then
			m_pxGroups^.Select(0);
		endif;
		m_pxValue^.SetAllowedInput(CVarEdit.NUMERIC_INPUT);
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		m_pxValue^.SetText(p_rxParams.GetValue("check_val"));
		
		var CGuid xG; xG.FromString(p_rxParams.GetValue("group_guid"));
		var int i, iC = m_pxGroups^.NumItems();
		for(i=0) cond(i<iC) iter(++i) do
			var ^CGroupItemData pxGID = cast<CGroupItemData>(m_pxGroups^.GetItemData(i));
			if(pxGID^.m_xGuid == xG) then
				m_pxGroups^.Select(i);
				break;
			endif;
		endfor;
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		var int iSel = m_pxGroups^.GetSelectedItem();
		if(iSel>=0) then
			var ^CGroupItemData pxGID = cast<CGroupItemData>(m_pxGroups^.GetItemData(iSel));
			po_rxParams.SetValue("group_guid", pxGID^.m_xGuid.ToString());
			po_rxParams.SetValue("check_val", m_pxValue^.GetText());
		endif;
		var string sMsg;
		if(!m_pxValue^.Validate(sMsg)) then
			CMessageBox.MsgBox("Variable Error", sMsg);
		endif;
	endproc;
endclass;

class CConditionDimGateBuildPages inherit CConditionPages

	var ^CSpinCtrlNumber m_pxOwner;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_DGBL");
		
		m_pxOwner = cast<CSpinCtrlNumber>(m_apxPages[0]^.GetControl("Spin_Owner"));
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		m_pxOwner^.SetValue(p_rxParams.GetValueInt("player"));
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		po_rxParams.SetValue("player", m_pxOwner^.GetValueInt());
	endproc;
endclass;


//***
	/// class CConditionAIFightEndPages
										//***
class CConditionAIFightEndPages inherit CConditionPages

	var ^CSpinCtrlNumber 	m_pxOwner;
	var ^CDropList 			m_pxAttack;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_AIFE");

		m_pxOwner = cast<CSpinCtrlNumber>(m_apxPages[0]^.GetControl("Spin_Owner"));
		m_pxAttack = cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Attack"));

		m_pxAttack^.AddItem("Any Attack");

		var ^CLevelInfo pxLevelInfo=^(CLevelEditorWrap.GetClient().GetLevelInfo());
		var ^CPropDB pxLI = ^(pxLevelInfo^.GetGenericData());
		var ^CPropDB.CNode pxBaseNode=^((pxLI^)["Base"]);
		var int iMaxPlayer = pxBaseNode^.GetValueI("MaxPlayers");
		if (iMaxPlayer==0) then iMaxPlayer=1; endif;
		m_pxOwner^.SetLimits(0, iMaxPlayer-1, 1);
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		m_pxOwner^.SetValue(p_rxParams.GetValueInt("owner"));
		m_pxAttack^.SetText(p_rxParams.GetValue("attack"));
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		po_rxParams.SetValue("owner", m_pxOwner^.GetValueInt());
		po_rxParams.SetValue("attack", m_pxAttack^.GetSelectedItem());		
	endproc;
endclass;

class CConditionIsAIPlayer inherit CConditionPages

	var ^CDropList			m_pxPlayerID;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_ISAI"))then
			m_pxPlayerID= cast<CDropList>(m_apxPages[0]^.GetControl("Drop_ID"));
//			if(m_pxPlayerID!=null)then
				var int i;
				for(i=0)cond(i<8)iter(i++)do
					m_pxPlayerID^.AddItem(i.ToString());
				endfor;
//			endif;
		endif;
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		var int iPlyrID = p_rxParams.GetValueInt("player_id");
		if(iPlyrID >= 0 && iPlyrID<8)then
			m_pxPlayerID^.Select(iPlyrID);
		endif;
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		po_rxParams.SetValue("player_id", m_pxPlayerID^.GetSelectedItem());
	endproc;

endclass;

class CConditionIsFightingPages inherit CConditionPages

	var ^CObjSelector m_pxA, m_pxB;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_ISFG");
		
		m_pxA=cast<CObjSelector>(m_apxPages[0]^.GetControl("ObjSelA"));
		m_pxB=cast<CObjSelector>(m_apxPages[0]^.GetControl("ObjSelB"));
		
		m_pxB^.SetAttribsPrefix("B_");
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		if(m_pxA!=null)then m_pxA^.OnInit(p_rxParams); endif;
		if(m_pxB!=null)then m_pxB^.OnInit(p_rxParams); endif;
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		if(m_pxA!=null)then m_pxA^.OnFinish(po_rxParams); endif;
		if(m_pxB!=null)then m_pxB^.OnFinish(po_rxParams); endif;
	endproc;
endclass;


class CConditionRandomTimePages inherit CConditionPages

	var ^CSpinCtrlNumber m_pxMinM, m_pxMinS, m_pxMaxM, m_pxMaxS;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_RTME");
		
		m_pxMinM = cast<CSpinCtrlNumber>(m_apxPages[0]^.GetControl("MinM"));
		m_pxMinS = cast<CSpinCtrlNumber>(m_apxPages[0]^.GetControl("MinS"));
		m_pxMaxM = cast<CSpinCtrlNumber>(m_apxPages[0]^.GetControl("MaxM"));
		m_pxMaxS = cast<CSpinCtrlNumber>(m_apxPages[0]^.GetControl("MaxS"));
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		var int iMin = p_rxParams.GetValueInt("Min");
		var int iMax = p_rxParams.GetValueInt("Max");
		m_pxMinM^.SetValue(iMin/60);
		m_pxMinS^.SetValue(iMin%60);
		m_pxMaxM^.SetValue(iMax/60);
		m_pxMaxS^.SetValue(iMax%60);
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		po_rxParams.SetValue("Min", m_pxMinM^.GetValueInt()*60 + m_pxMinS^.GetValueInt());
		po_rxParams.SetValue("Max", m_pxMaxM^.GetValueInt()*60 + m_pxMaxS^.GetValueInt());
	endproc;
endclass;

class CConditionTribePages inherit CConditionPages

	var ^CDropList			m_pxPlayerID;
	var ^CDropList			m_pxTribeList;

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		if(m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_PLTR"))then
			m_pxTribeList= cast<CDropList>(m_apxPages[0]^.GetControl("Drop_Tribes"));
			m_pxPlayerID= cast<CDropList>(m_apxPages[0]^.GetControl("Drop_ID"));
//			if(m_pxTribeList!=null)then
				m_pxTribeList^.AddItem("Aje");
				m_pxTribeList^.AddItem("Hu");
				m_pxTribeList^.AddItem("Ninigi");
				m_pxTribeList^.AddItem("SEAS");
//			endif;
//			if(m_pxPlayerID!=null)then
				var int i;
				for(i=0)cond(i<8)iter(i++)do
					m_pxPlayerID^.AddItem(i.ToString());
				endfor;
//			endif;
		endif;
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
		var string sTribe = p_rxParams.GetValue("tribe_name");
		var int iPlyrID = p_rxParams.GetValueInt("player_id");
		var int iItemID = m_pxTribeList^.FindItem(sTribe);
		if(iItemID >= 0)then
			m_pxTribeList^.Select(iItemID);
		endif;
		if(iPlyrID >= 0 && iPlyrID<8)then
			m_pxPlayerID^.Select(iPlyrID);
		endif;
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
		po_rxParams.SetValue("tribe_name", m_pxTribeList^.GetSelectedItemAsString());
		po_rxParams.SetValue("player_id", m_pxPlayerID^.GetSelectedItem());
	endproc;

endclass;

/*

	ConditionView - Template

class CCondition<ConditionName>Pages inherit CConditionPages

	export constructor()
		m_apxPages=1;
		m_apxPages[0]=new CWindow;
		m_apxPages[0]^.InitFromResource("Trigger/ViewCondCreate","Condition_<FourCC>");
	endconstructor;

	export proc void OnInit(ref CAttribs p_rxParams)
	endproc;

	export proc void OnFinish(ref CAttribs po_rxParams)
	endproc;
endclass;
*/