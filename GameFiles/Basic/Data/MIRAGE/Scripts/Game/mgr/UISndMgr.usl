class CUISoundMgr

	static var CClntHndl ms_xRepCheckObj;
	static var string ms_sRepSoundUI;
	static var string ms_sRepSoundVoice;
	static var int ms_iRepCount;
	static var int ms_iRepCountGag;

	class CFeedbackSoundEvent
		export var string 								m_sSoundName;
		export var CSoundEventMgrClient.CSoundHandle 	m_hSound;
		export var bitset								m_dwVolumeTrack;
		
		export proc bool op_Equal(ref CUISoundMgr.CFeedbackSoundEvent p_rxOther)
			return m_sSoundName==p_rxOther.m_sSoundName && m_dwVolumeTrack==p_rxOther.m_dwVolumeTrack;
		endproc;
	endclass;

	var array CFeedbackSoundEvent m_axFeedbackSoundEvents;

	var CSoundEventMgrClient.CSoundHandle 	m_hLastAckSound;

	export constructor()
		m_hLastAckSound=CSoundEventMgrClient.CSoundHandle.InvalidHandle();
	endconstructor;
		
	export proc void PlayRallypointFeedbackSound(ref vec3 p_rvPos)
	
		var real fScapeHeight = CClientWrap.GetScapeMgr().GetHeight(p_rvPos.GetX(), p_rvPos.GetY());
		var real fWaterHeight = CClientWrap.GetScapeMgr().GetSeaLevel();
		if ( fScapeHeight<fWaterHeight ) then
			PlayFeedbackSound("rallypoint_water_set");
		else
			PlayFeedbackSound("rallypoint_land_set");
		endif;
	endproc;

	export proc void PlayFeedbackSoundEvent(string p_sSoundEvent,string p_sFallbackSoundEvent,bitset p_dwVolumeTrack)
		if (!CSoundMgrCln.IsGameRunning()) then
			return;
		endif;
		
		if (CSoundMgrCln.GetVolume(p_dwVolumeTrack)<=0) then
			return;
		endif;
		
		if (p_dwVolumeTrack==CSoundMgrCln.SOUND_VOLTRACK_SPEECH_ACK) then
			p_dwVolumeTrack=CSoundMgrCln.SOUND_VOLTRACK_GLOBAL;
		endif;
		
		//L KLog.LogInfo("UISound","PlayFeedbackSoundEvent:'"+p_sSoundEvent+"' fallback:'"+p_sFallbackSoundEvent+"'");
		
		if (CGameWrap.GetSoundEventMgrClient().GetEventIndex(p_sSoundEvent)!=-1)then
			//L KLog.LogInfo("UISound","play '"+p_sSoundEvent+"'");
			CGameWrap.GetSoundEventMgrClient().PlayGlobalSound( p_sSoundEvent, p_dwVolumeTrack, 1 );
			return;
		else
			if(p_sFallbackSoundEvent.GetLength() > 0 && CGameWrap.GetSoundEventMgrClient().GetEventIndex(p_sFallbackSoundEvent) != -1 ) then
				//L KLog.LogInfo("UISound","play fallback '"+p_sFallbackSoundEvent+"'");
				CGameWrap.GetSoundEventMgrClient().PlayGlobalSound(p_sFallbackSoundEvent,p_dwVolumeTrack, 1);
				return;
			endif;
		endif;
		//L KLog.LogInfo("UISound","!soundevent '"+p_sSoundEvent+"' or '"+p_sFallbackSoundEvent+"' not found!");
	endproc;

	export proc void PlayFeedbackSound(string p_sSoundEvent)
		var CClntHndl		xFeedbackSoundObj;
		var string			sSoundVoice;
		var string			sSoundUI;
		var int					iSubSound = -1;
		
		var bool bIsAckPlaying=false;
		if (m_hLastAckSound!=CSoundEventMgrClient.CSoundHandle.InvalidHandle()) then
			bIsAckPlaying=CGameWrap.GetSoundEventMgrClient().IsPlaying(m_hLastAckSound);
			if(bIsAckPlaying)then
				iSubSound = -2;
			endif;
		endif;
				
		GetFeedbackSound(p_sSoundEvent,xFeedbackSoundObj,sSoundVoice,sSoundUI,iSubSound);
		InvokeFeedbackSoundEvent(sSoundVoice,CSoundMgrCln.SOUND_VOLTRACK_SPEECH_ACK,iSubSound);
		InvokeFeedbackSoundEvent(sSoundUI,CSoundMgrCln.SOUND_VOLTRACK_GLOBAL);
		//KLog.LogSpam("uisound","target "+(xFeedbackSoundObj.AsInt()).ToString());
	endproc;
	
	export proc void InvokeFeedbackSoundEvent(ref string p_rsSound,bitset p_dwVolumeTrack)
		InvokeFeedbackSoundEvent(p_rsSound,p_dwVolumeTrack,-1);
	endproc;
	
	export proc void InvokeFeedbackSoundEvent(ref string p_rsSound,string p_sFallbackSoundEvent,bitset p_dwVolumeTrack)
		if(CGameWrap.GetSoundEventMgrClient().GetEventIndex(p_rsSound)==-1)then
			p_rsSound=p_sFallbackSoundEvent;
		endif;
		InvokeFeedbackSoundEvent(p_rsSound,p_dwVolumeTrack,-1);
	endproc;
	
	export proc void InvokeFeedbackSoundEvent(ref string p_rsSound,bitset p_dwVolumeTrack,int p_iSubSound)
		if (p_rsSound.IsEmpty()) then return; endif;
		if (!CSoundMgrCln.IsGameRunning()) then
			return;
		endif;
		if (CSoundMgrCln.GetVolume(p_dwVolumeTrack)<=0) then
			return;
		endif;

		// Voltrack_Speech_Ack, definiert nicht die Lautstärke, sondern ob SpeechAcks gespielt werden oder nicht.
		// Wenn Speeckacks deaktiviert entspricht der Wert von Voltrack speech ack 0 d.h. die Methode wird im vorhergehenden
		// Test beendet. Die Lautstärke der Speech Acks wird durch Voltrack global definiert.
		var bitset dwUseVolumeTrack=p_dwVolumeTrack;
		if (p_dwVolumeTrack==CSoundMgrCln.SOUND_VOLTRACK_SPEECH_ACK) then
			dwUseVolumeTrack=CSoundMgrCln.SOUND_VOLTRACK_GLOBAL;
		endif;

		
		// WT409 begin Ack sound nicht spielen, wenn voriger noch nicht beendet wurde
		var bool bIsAckPlaying=false;
		if (p_dwVolumeTrack==CSoundMgrCln.SOUND_VOLTRACK_SPEECH_ACK) then
			if (m_hLastAckSound!=CSoundEventMgrClient.CSoundHandle.InvalidHandle()) then
				bIsAckPlaying=CGameWrap.GetSoundEventMgrClient().IsPlaying(m_hLastAckSound);
				if (bIsAckPlaying) then
					return;
				endif;
			endif;
		endif;
		// WT409 end
		var CFeedbackSoundEvent xNew;
		xNew.m_dwVolumeTrack=dwUseVolumeTrack;
		xNew.m_sSoundName=p_rsSound;
		//KLog.LogSpam("uisound","new "+dwUseVolumeTrack.ToString()+" "+p_rsSound.ToString());
		var int iFound=m_axFeedbackSoundEvents.FindEntry(xNew);
		if(iFound!=-1) then
			CGameWrap.GetSoundEventMgrClient().StopSound(m_axFeedbackSoundEvents[iFound].m_hSound);
			m_axFeedbackSoundEvents.DeleteEntry(iFound);
		endif;
		if(p_iSubSound>-1)then
			xNew.m_hSound=CGameWrap.GetSoundEventMgrClient().PlayGlobalSound(p_rsSound,dwUseVolumeTrack,1,p_iSubSound);
		else
			xNew.m_hSound=CGameWrap.GetSoundEventMgrClient().PlayGlobalSound(p_rsSound,dwUseVolumeTrack,1);
		endif;
		if(xNew.m_hSound!=CSoundEventMgrClient.CSoundHandle.InvalidHandle()) then
			m_axFeedbackSoundEvents.InsertEntry(0);
			m_axFeedbackSoundEvents[0]=xNew;
		endif;

		// WT409 begin Ack sound nicht spielen, wenn voriger noch nicht beendet wurde
		if (p_dwVolumeTrack==CSoundMgrCln.SOUND_VOLTRACK_SPEECH_ACK) then
			m_hLastAckSound=xNew.m_hSound;
		endif;
		// WT409 end
		
		if(m_axFeedbackSoundEvents.NumEntries()>5) then
			m_axFeedbackSoundEvents=5;
		endif;
		
	endproc;
	
	export static proc void GetFeedbackSound(string p_sType,ref string po_rsSoundVoice,ref string po_rsSoundUI)
		var	CClntHndl	xDummy;
		var int			iDummy;
		GetFeedbackSound( p_sType, xDummy, po_rsSoundVoice, po_rsSoundUI , iDummy );
		return;
	endproc;

	export static proc void GetFeedbackSound(string p_sType,ref CClntHndl po_rxTarget,ref string po_rsSoundVoice,ref string po_rsSoundUI)
		var int			iDummy;
		GetFeedbackSound( p_sType, po_rxTarget, po_rsSoundVoice, po_rsSoundUI , iDummy );
		return;
	endproc;

	export static proc void GetFeedbackSound(string p_sType,ref CClntHndl po_rxTarget,ref string po_rsSoundVoice,ref string po_rsSoundUI,ref int po_riSubSound)
		var bool bFound = false;
		var ^CObjSelection pxSelection = ^(CClientWrap.GetSelection());
		var int iObjectType, iSelectedObjectType;
		var int i, iC = pxSelection^.NumEntries();
		var CClntHndl xSoundObj;
		var int iMaxLevel = -1;
		var int iOwnOwner = CGameWrap.GetClient().GetPlayer().GetID();
		var CFourCC xType;
		var string sFocus = CMirageClnMgr.Get().GetFocusClass();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CObj pxObj = pxSelection^[i].GetObj();
			var string sClass;
//			if(pxObj!=null)then
//			endif;
			if(!CMirageClnMgr.ValidateName(sClass, pxObj))then
				continue;
			endif;
//			if(pxObj==null)then
//				continue;
//			endif;
			var ^CAttribs pxAttr = pxObj^.GetAttribs();
			if (pxAttr == null ) then
				continue;
			endif;
			var int iLevel = pxAttr^.GetValueInt("level");
//			var string sClass = pxObj^.GetClassName();
			//L KLog.LogInfo("UISound","GetFeedbackSound for event '"+p_sType+"', class '"+sClass+"', fcc:"+pxObj^.GetType().AsString());
			var bool bValidObj = false;
			var bool bExcept = false;
			if (iLevel>iMaxLevel) then
				xType=pxObj^.GetType();
				if ( xType == "SHIP" || xType == "BLDG" || xType == "VHCL" || xType == "ANML" || xType == "FRUI" || xType == "STON" || xType == "FOOD" || xType == "WOOD" || xType == "ITEM") then
					iObjectType	= 1;
					bValidObj	= true;
				else
					if ( xType == "CHTR" ) then
						if ( pxAttr^.GetValueBool("unique") ) then
							iObjectType	= 1;
							bValidObj	= true;
						else
							iObjectType	= 1;
							bValidObj	= true;
						endif;
					endif;
				endif;
			endif;
			if(sFocus!="")then
				if(sFocus==sClass)then
					bFound = true;
					bExcept = true;
				endif;
			endif;
			if(!bValidObj && ! bExcept)then
				continue;
			endif;
			xSoundObj 						= pxSelection^[i];
			iMaxLevel 						= iLevel;
			po_rxTarget						= xSoundObj;
			iSelectedObjectType		= iObjectType;
			if(bFound)then
				break;
			endif;
		endfor;
		
		if( xSoundObj.IsValid() && iMaxLevel!=-1 ) then
			var ^CAttribs	pxAttr 			= xSoundObj.GetObj()^.GetAttribs();
			var string 		sRetValVoice;
			var string		sRetValUI;
			var string		sEventName;
			
			if(xType=="ITEM") then
				var string sClass="item_treasure_chest";
				po_rsSoundUI = "ui_" + sClass + "_" + p_sType;
				return;
			elseif( pxAttr!=null ) then
				var int iOwner = xSoundObj.GetObj()^.GetOwner();
				var int iDiploStatus = CGameWrap.GetDiplomacyMgr().GetTheirOpinion(iOwner);
				if ((iDiploStatus==0 && iOwner!=-1) || (!CMirageClnMgr.Get().CheckAlienCommands() && iDiploStatus==2 && iOwner!=iOwnOwner)) then
					sEventName	= "voice_enemy_selected";
					if ( CGameWrap.GetSoundEventMgrClient().GetEventIndex( sEventName ) != -1 ) then
						//L KLog.LogInfo("UISound","found event '"+sEventName+"'");
						sRetValVoice=sEventName;
					else
						//L KLog.LogInfo("UISound","event '"+sEventName+"' not found");
					endif;
					
					sEventName = "ui_enemy_selected";
					if ( CGameWrap.GetSoundEventMgrClient().GetEventIndex( sEventName ) != -1 ) then
						//L KLog.LogInfo( "UISound", "found event '"+sEventName+"'");
						sRetValUI=sEventName;
					else
						//L KLog.LogInfo("UISound","event '"+sEventName+"' not found");
					endif;
				else
					switch( iSelectedObjectType )
						case (1) do
							var string sClass;
							var string sGfxPrefix = (CGameWrap.GetClient().GetLevelInfo().GetGenericData())["PlayerSettings/Player_"+iOwnOwner.ToString()+"/Restrictions/Base"].GetValueS("GfxPrefix","");
							CMirageClnMgr.ValidateName(sClass, xSoundObj);
							//var string sClass = xSoundObj.GetObj()^.GetClassName();

							if (sClass == "aje_warrior" && sGfxPrefix == "amazons") then
								sClass = "aje_scythian";
								//sClass = sGfxPrefix + "_" + sClass; for future unitacks.txt use
							endif;

							sEventName = "voice_" + sClass + "_" + p_sType;
							
							if ( CGameWrap.GetSoundEventMgrClient().GetEventIndex(sEventName ) != -1 ) then
								sRetValVoice = sEventName;
							else
								sEventName = "voice_" + p_sType;
								if (CGameWrap.GetSoundEventMgrClient().GetEventIndex(sEventName ) != -1 )then
									sRetValVoice = sEventName;
								else
								endif;
							endif;
							
							// search ui sound
							sEventName = "ui_" + sClass + "_" + p_sType;
							
							if ( CGameWrap.GetSoundEventMgrClient().GetEventIndex(sEventName ) != -1 ) then
						    	//L KLog.LogInfo("UISound","found event '"+sEventName+"'");
								sRetValUI=sEventName;
							else
						    	//L KLog.LogInfo("UISound","event '" + sEventName + "' not found" );
								sEventName = "ui_" + p_sType;
								if (CGameWrap.GetSoundEventMgrClient().GetEventIndex(sEventName )!=-1)then
							    	//L KLog.LogInfo("UISound","found event '"+sEventName+"'");
									sRetValUI=sEventName;
								else
							    	//L KLog.LogInfo("UISound","event '"+sEventName+"' not found");
								endif;
							endif;
						endcase;
/*						
						case (2) do
							// Hero
							// Fallbacks:
							//	Hero+level+type
							//	Hero+type
							var string sClass = xSoundObj.GetObj()^.GetClassName();
							sClass = sClass.Left(sClass.FindRev('_'));
							sEventName = sClass+"_"+(pxAttr^.GetValueInt("level")+1).ToString()+"_"+p_sType;
							KLog.LogSpam("UISound","search event "+sEventName);
							if (CGameWrap.GetSoundEventMgrClient().GetEventIndex(sEventName )!=-1)then
								sRetVal=sEventName;
							else
							    sEventName = sClass+"_"+p_sType;
								KLog.LogSpam("UISound","search event "+sEventName);
								if (CGameWrap.GetSoundEventMgrClient().GetEventIndex(sEventName )!=-1)then
									sRetVal=sEventName;
								endif;
							endif;							
						endcase; */
						
/*						case (3) do
							// 	Character
							// 	Fallbacks:
							// 		tribe+caste+level+type
							// 		tribe+caste+type
							// 		tribe+type
							sEventName = pxAttr^.GetValue("tribe")+"_"+pxAttr^.GetValue("caste")+"_"+(iMaxLevel+1).ToString()+"_"+p_sType;
							KLog.LogSpam("UISound","search event "+sEventName);
							if (CGameWrap.GetSoundEventMgrClient().GetEventIndex(sEventName )!=-1)then
								sRetVal=sEventName;
							else
								sEventName = pxAttr^.GetValue("tribe")+"_"+pxAttr^.GetValue("caste")+"_"+p_sType;
								KLog.LogSpam("UISound","search event "+sEventName);
								if (CGameWrap.GetSoundEventMgrClient().GetEventIndex(sEventName )!=-1)then
									sRetVal=sEventName;
								else
									sEventName = pxAttr^.GetValue("tribe")+"_"+p_sType;
									KLog.LogSpam("UISound","search event "+sEventName);
									if (CGameWrap.GetSoundEventMgrClient().GetEventIndex(sEventName )!=-1)then
										sRetVal=sEventName;
									endif;
								endif;
							endif; 
						endcase; */

						case default do
						endcase;
					
					endswitch;
				endif;
				
				//L KLog.LogInfo("UISound","voice: '"+sRetValVoice+"' ui:'"+sRetValUI+"'");
				//L KLog.LogInfo("UISound2","voice: '"+sRetValVoice+"' ui:'"+sRetValUI+"'");
				
				if((po_riSubSound>-2)&&(ms_xRepCheckObj==xSoundObj)&&(sRetValUI.Find("_selected")>-1))then
					ms_iRepCount++;
					if(ms_iRepCount>=3)then
						if(xSoundObj.IsValid())then
//							var string sClass = xSoundObj.GetObj()^.GetClassName();
							var string sClass;
							CMirageClnMgr.ValidateName(sClass, xSoundObj);
							var string sEventName = "voice_" + sClass + "_gag";
							if ( CGameWrap.GetSoundEventMgrClient().GetEventIndex(sEventName ) != -1 ) then
								//L KLog.LogInfo("UISound","found event '"+sEventName+"'");
								sRetValVoice = sEventName;
							else
								//L KLog.LogInfo( "UISound", "event '" + sEventName + "' not found");
							endif;
						endif;
						ms_iRepCountGag++;
						po_riSubSound=ms_iRepCountGag;
						//ms_iRepCount=0;
					endif;
				else
					po_riSubSound=-1;
				endif;
				if(xSoundObj!=ms_xRepCheckObj || sRetValUI.Find("_selected")<0)then
					ms_iRepCountGag=-1;
					ms_iRepCount=0;
					po_riSubSound=-1;
				endif;

				//L KLog.LogSpam("UISound2","Repeat "+p_sType+":"+ms_iRepCount.ToString()+":"+sRetValVoice+"/"+sRetValUI+":"+po_riSubSound.ToString());

				ms_xRepCheckObj=xSoundObj;
				ms_sRepSoundVoice=sRetValVoice;
				ms_sRepSoundUI=sRetValUI;

				po_rsSoundVoice=sRetValVoice;
				po_rsSoundUI=sRetValUI;
			endif;
		endif;
		
		return;
		
	endproc;

endclass;
