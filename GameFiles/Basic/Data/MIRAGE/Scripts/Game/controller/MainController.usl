class CMainController inherit CInputController

	var CGameInputController			m_xGameInputCtrl;
	var CSecondaryInputController	m_xSecInputCtrl;
	var CMultiCameraController		m_xMultiCameraCtrl;	//multi camera controller
	var CPlaceController					m_xPlacer;
	var CRangeMgr									m_xRangeMgr;
//	var CRangeMarkerMgr						m_xRangeMarkerMgr;
	var CObjectLineMgr						m_xObjectLineMgr;
	var CObjectTextMgr						m_xObjectTextMgr;
//	var CSpiritMgr								m_xSpiritMgr;
	var ^CCamera									m_pxCamera;
	var int 											m_iState;			//(0)	camera controller is active
																							//(1)	special camera controller is active
	var bool 											m_bActive;			//(true)	the current controller is active
																								//(false)	all controllers are in standby
	var int 											m_iMouseCapturedL;
	var int 											m_iMouseCapturedR;
	var int												m_iMouseCapturedM;
	
	var bool											m_bSecondary;		//(true)	the secondary controller is active
	var bool											m_bSecCtrlCapt;		//(true)	control was hold down at mouse click while the secondary controller was active
	var bitset										m_dwAcceleratorFlags;
	var bool											m_bActionView;		//(true)	the ActionView controller is active
	static var ^CMainController		ms_pxInst;
	var CObjList									m_xLastSelection;
	var string										m_sPlayerTribe;
	
	constructor()
		m_iState=0;
		m_bActive=false;
		m_bSecondary=false;
		m_bSecCtrlCapt=false;
		m_bActionView=false;
		m_sPlayerTribe=CGameWrap.GetClient().GetPlayer().GetPlayerSlot()^.GetTribe();
		// add modules to and initialize multi camera controller
		m_xMultiCameraCtrl.AddControllerModule(new CGameCameraModule());
		m_xMultiCameraCtrl.AddControllerModule(new CFollowGameCameraModule());
//		m_xMultiCameraCtrl.AddControllerModule(new CFreeCameraModule());
		m_xMultiCameraCtrl.Init();
		// set up procrefs for multi camera controller
		m_xMultiCameraCtrl.GetGameCameraModule()^.m_xOnMiniMapRightClick=OnMiniMapRightClick;
		m_xMultiCameraCtrl.GetFollowGameCameraModule()^.m_xOnMiniMapRightClick=OnMiniMapRightClick;
//		m_xMultiCameraCtrl.GetFreeCameraModule()^.m_xOnMiniMapRightClick=OnMiniMapRightClick;
	endconstructor;
	
	export static proc void Reset()
		CMainController.Get().FullReset();
	endproc;
	
	export proc void FullReset()
		m_iState=0;
		//m_bActive=false;
		m_iMouseCapturedL=0;
		m_iMouseCapturedR=0;
		m_iMouseCapturedM=0;
		m_bSecondary=false;
		m_bSecCtrlCapt=false;
		m_bActionView=false;
		
		// reset modules
		m_xGameInputCtrl.FullReset();
		m_xSecInputCtrl.Reset();
		m_xPlacer.Reset();
		m_sPlayerTribe=CGameWrap.GetClient().GetPlayer().GetPlayerSlot()^.GetTribe();
	endproc;
	
	export proc ref CGameCameraModule GetCameraCtrl()
		return (m_xMultiCameraCtrl.GetGameCameraModule()^);
	endproc;
	
	export proc void OnMiniMapRightClick(vec3 p_vPos,bool p_bShift, bool p_bCtrl, bool p_bAlt)
		var CClntHndl xInv;
		m_xGameInputCtrl.HandleNone(p_vPos,false,false,p_bShift,p_bCtrl,p_bAlt,xInv);
	endproc;
	
	export proc void Render()
		m_xPlacer.Render();
		m_xMultiCameraCtrl.Render();
	endproc;
	
	export proc ref CMultiCameraController GetMultiCameraCtrl()
		return m_xMultiCameraCtrl;
	endproc;
	
	export proc ref CRangeMgr GetRangeMgr()
		return m_xRangeMgr;
	endproc;
	
	export proc ref CObjectLineMgr GetObjectLineMgr()
		return m_xObjectLineMgr;
	endproc;
	
	export proc ref CObjectTextMgr GetObjectTextMgr()
		return m_xObjectTextMgr;
	endproc;
	
//	export proc ref CSpiritMgr GetSpiritMgr()
//		return m_xSpiritMgr;
//	endproc;
	
//	export proc ref CRangeMarkerMgr GetRangeMarkerMgr()
//		return m_xRangeMarkerMgr;
//	endproc;
	
	export proc ref CGameInputController GetGameInputCtrl()
		return m_xGameInputCtrl;
	endproc;
	
	export proc ref CSecondaryInputController GetSecInputCtrl()
		return m_xSecInputCtrl;
	endproc;
	
	export proc ref CPlaceController GetPlacer()
		return m_xPlacer;
	endproc;
	
	export proc void SetSecondaryInputController(bool p_b)
/*
TODO.
		if(p_b==true)then
			var string s=CClientWrap.GetUrsRelPath() + "/Data/Base/Cursors/Special.cur";
			CClientWrap.GetDesktop()^.SetCursorUserDefined(s);
		else
			var string s=CClientWrap.GetUrsRelPath() + "/Data/Base/Cursors/Standard.cur";
			CClientWrap.GetDesktop()^.SetCursorUserDefined(s);
		endif;
*/	
		m_bSecondary=p_b;
		if(!p_b)then
			m_bSecCtrlCapt = false;
			m_xSecInputCtrl.ResetController();
			m_xGameInputCtrl.UpdateMouseCursorCheck();
		endif;
	endproc;
	
	export proc void ResetSecondaryInputController()
		m_bSecondary=false;
		m_bSecCtrlCapt = false;
		m_xSecInputCtrl.Reset();
		m_xGameInputCtrl.UpdateMouseCursorCheck();
	endproc;
	
	export proc void SetQueueKey(bool p_bPressed)
		m_bSecCtrlCapt = p_bPressed;
	endproc;
	
	export proc bool GetSecondaryInputController()
		return m_bSecondary;
	endproc;
	
	export proc void SetActionViewController(bool p_b)
		m_bActionView=p_b;
	endproc;
	
	export proc void ResetCamera()
		if(m_iState==0)then
			m_xMultiCameraCtrl.GetGameCameraModule()^.ResetCamera();
		endif;
	endproc;
	
	export static proc ref CMainController Get()
		if (ms_pxInst==null)then
			ms_pxInst=new CMainController;
		endif;
		return(ms_pxInst^);
	endproc;
	
	export proc bitset GetKeyFlags()
		return m_dwAcceleratorFlags;
	endproc;
	
	export proc void SetActive(bool p_bActive);
		m_bActive=p_bActive;
	endproc;
	
	export proc bool GetActive();
		return(m_bActive);
	endproc;
	
	proc bool HandleMsg(bitset p_dwType, bitset p_dwFlags, int p_iKey, int p_iX, int p_iY)
		if(!m_bActive)then
			// HACK: pass MT_Tick event through to MultiCameraController even if inactive
			if(p_dwType==CInputController.MT_Tick)then
				m_xMultiCameraCtrl.HandleMsg(088d,p_dwFlags,p_iKey,p_iX,p_iY);
			endif;
			return(false);
		endif;
		//var bool bCtrl = ((p_dwFlags&Msg.KM_CONTROL)!=0d);
		//var bool bShift = ((p_dwFlags&Msg.KM_SHIFT)!=0d);
		//var bool bAlt = ((p_dwFlags&Msg.KM_ALT)!=0d);
		//CClientWrap.GetDesktop()^.SetCursor(3);
		if(p_dwType==CInputController.MT_MouseLBtnDown||(p_dwType==CInputController.MT_MouseLBtnDoubleClick))then
			m_iMouseCapturedL++;
			if(m_iMouseCapturedL+m_iMouseCapturedR+m_iMouseCapturedM==1)then
				CWindowMgr.Get().SetCapture(CClientWrap.GetDesktop());
			endif;
		elseif(p_dwType==CInputController.MT_MouseLBtnUp)then
			if(m_iMouseCapturedL>0) then
				m_iMouseCapturedL--;
				if(m_iMouseCapturedL+m_iMouseCapturedR+m_iMouseCapturedM==0) then
					CWindowMgr.Get().ReleaseCapture(CClientWrap.GetDesktop());
				endif;
			endif;
		elseif((p_dwType==CInputController.MT_MouseRBtnDown)||(p_dwType==CInputController.MT_MouseRBtnDoubleClick))then
			m_iMouseCapturedR++;
			if(m_iMouseCapturedL+m_iMouseCapturedR+m_iMouseCapturedM==1)then
				CWindowMgr.Get().SetCapture(CClientWrap.GetDesktop());
			endif;
		elseif(p_dwType==CInputController.MT_MouseRBtnUp)then
			if(m_iMouseCapturedR>0) then
				m_iMouseCapturedR--;
				if(m_iMouseCapturedL+m_iMouseCapturedR+m_iMouseCapturedM==0) then
					CWindowMgr.Get().ReleaseCapture(CClientWrap.GetDesktop());
				endif;
			endif;
		elseif(p_dwType==CInputController.MT_MouseMBtnDown || p_dwType==CInputController.MT_MouseMBtnDoubleClick) then
			m_iMouseCapturedM++;
			if(m_iMouseCapturedL+m_iMouseCapturedR+m_iMouseCapturedM==1)then
				CWindowMgr.Get().SetCapture(CClientWrap.GetDesktop());
			endif;
		elseif(p_dwType==CInputController.MT_MouseMBtnUp) then
			if(m_iMouseCapturedM>0) then
				m_iMouseCapturedM--;
				if(m_iMouseCapturedL+m_iMouseCapturedR+m_iMouseCapturedM==0) then
					CWindowMgr.Get().ReleaseCapture(CClientWrap.GetDesktop());
				endif;
			endif;
		elseif(p_dwType==CInputController.MT_KeyDown)then
			//CFeedback.Print(CFeedback.CHAT,p_iKey.ToString());
			if(p_iKey == 16)then
				if((m_dwAcceleratorFlags&Msg.KM_SHIFT)==0d)then
					m_dwAcceleratorFlags |= Msg.KM_SHIFT;
				endif;
			endif;
			// eleminate ctrl
			if(p_iKey == 17  ||  p_iKey == 18)then
				if((m_dwAcceleratorFlags&Msg.KM_CONTROL)==0d)then
					m_dwAcceleratorFlags |= Msg.KM_CONTROL;
				endif;
				return true;
			endif;
		elseif(p_dwType==CInputController.MT_KeyUp)then
			if(p_iKey == 16)then
				if((m_dwAcceleratorFlags&Msg.KM_SHIFT)!=0d)then
					m_dwAcceleratorFlags &= ~Msg.KM_SHIFT;
				endif;
			endif;
			// eleminate ctrl
			if(p_iKey == 17 || p_iKey == 18)then
				if((m_dwAcceleratorFlags&Msg.KM_CONTROL)!=0d)then
					m_dwAcceleratorFlags &= ~Msg.KM_CONTROL;
				endif;
				//Henry: to enable ctrl queuing for special target abilities (e.g. tornado)
				if(m_bSecCtrlCapt)then
					SetSecondaryInputController(false);
				endif;
				return true;
			endif;
		elseif(p_dwType==CInputController.MT_AppActivate)then
			FullReset();
		elseif(p_dwType==CInputController.MT_AppDeActivate)then
			FullReset();
		endif;
		var bool bNotCatched = true;
		if(bNotCatched && m_xMultiCameraCtrl.HandleMsg(p_dwType,p_dwFlags,p_iKey,p_iX,p_iY)==true)then
			bNotCatched = false;
		else
			m_xMultiCameraCtrl.HandleCatchedMsg(p_dwType,p_dwFlags,p_iKey,p_iX,p_iY);
		endif;
		if(bNotCatched && m_xPlacer.HandleMsg(p_dwType,p_dwFlags,p_iKey,p_iX,p_iY))then
			bNotCatched = false;
		else
			m_xPlacer.HandleCatchedMsg(p_dwType,p_dwFlags,p_iKey,p_iX,p_iY);
		endif;
		if(m_bSecondary)then
			if(bNotCatched && m_xSecInputCtrl.HandleMsg(p_dwType,p_dwFlags,p_iKey,p_iX,p_iY))then
				bNotCatched = false;
			else
				m_xSecInputCtrl.HandleCatchedMsg(p_dwType,p_dwFlags,p_iKey,p_iX,p_iY);
			endif;
			return false;
		elseif(!m_bActionView)then
			if(bNotCatched && m_xGameInputCtrl.HandleMsg(p_dwType,p_dwFlags,p_iKey,p_iX,p_iY))then
				bNotCatched = false;
			else
				m_xGameInputCtrl.HandleCatchedMsg(p_dwType,p_dwFlags,p_iKey,p_iX,p_iY);
			endif;
			return false;
		endif;
		return(false);
	endproc;
	
	export proc void SetCamera(^CCamera p_pxCamera)
		m_xMultiCameraCtrl.SetCamera(p_pxCamera);
		m_pxCamera=p_pxCamera;
	endproc;
	
	export proc void UpdateCameraPosition(^CCamera p_pxCamera)
		if(m_xMultiCameraCtrl.GetCurrentModule()!=null)then
			m_xMultiCameraCtrl.GetCurrentModule()^.UpdateFromCamera(p_pxCamera);
		endif;
	endproc;
	
	export proc ^CCamera GetCamera()
		return m_pxCamera;
	endproc;
	
	export proc void ResetState()
		m_iState=0;
		m_bActive=false;
	endproc;
	
	export proc int GetState()
		return(m_iState);
	endproc;
	
	export proc void SetState(int p_iState)
		m_iState=p_iState;
		if(m_iState==1)then
			m_xMultiCameraCtrl.SwitchToModule("SpecialCamera");
		endif;
		if(m_iState==2)then
			var ^CObjSelection pxSel=^(CClientWrap.GetSelection());
			if(pxSel^.NumEntries()>0)then
				m_xMultiCameraCtrl.GetFollowGameCameraModule()^.SetTarget(pxSel^[0]);
			endif;
			m_xMultiCameraCtrl.SwitchToModule("FollowGameCamera");
		endif;
		if(m_iState==0)then
			m_xMultiCameraCtrl.SwitchToModule("GameCamera");
		endif;
	endproc;
	
	export proc bool WalkTargetUpdate()
		if(m_xPlacer.GetActive())then return false; endif;
		m_sPlayerTribe=CGameWrap.GetClient().GetPlayer().GetPlayerSlot()^.GetTribe();
		var ^CObjSelection pxSel = ^(CClientWrap.GetSelection());
		var ^CObjMgr pxObjMgr = ^(CClientWrap.GetObjMgr());
		// RT#16363 - Der Ghost sollte nicht einfach so entfernt werden, da dies das Bauen abbricht
		// pxObjMgr^.DeleteGhost();
		var array vec3 avPositions;
		var int i,iC = pxSel^.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CObj pxObj = pxSel^[i].GetObj();
			if(pxObj==null)then continue; endif;
			var ^CAttribs pxAttr = pxObj^.GetAttribs();
			if(pxAttr==null)then continue; endif;
			var string sWalk = pxAttr^.GetValue("WalkTargets");
			var string sPatrol = pxAttr^.GetValue("PatrolTargets");
			var string sMines = pxAttr^.GetValue("MineTargets");
			var string sTurrets = pxAttr^.GetValue("WaterTurretTargets");
			var string sPos = sWalk;
			if(!sPatrol.IsEmpty())then
				sPos = sPatrol;
			endif;
			if(!sMines.IsEmpty())then
				sPos = sMines;
			endif;
			if(!sTurrets.IsEmpty())then
				sPos = sTurrets;
			endif;
			if(sPos.IsEmpty())then continue; endif;
			var string sTribe = pxAttr^.GetValue("tribe");
			if(sTribe=="World"||sTribe=="Special"||sTribe.IsEmpty())then
				sTribe=m_sPlayerTribe;
			endif;
			if(sTribe.IsEmpty())then continue; endif;
			var array string asPos;
			sPos.Split(asPos,"|",true);
			var int j,iJC=asPos.NumEntries();
			for(j=0)cond(j<iJC)iter(j++)do
				var vec3 vPos;
				vPos.FromString(asPos[j]);
				if(avPositions.FindEntry(vPos)!=-1)then continue; endif;
				avPositions.AddEntry(vPos);
				var string sRally = sTribe+"_WayPoint";
//				if(!sPatrol.IsEmpty())then
//					sRally = sTribe+"_WayPoint";
					//sRally.MakeLower();
//				endif;
				if(!sMines.IsEmpty())then
					sRally = "ninigi_mineship_mine";
				endif;
				if(!sTurrets.IsEmpty())then
					sRally = "ninigi_water_turret";
				endif;
				pxObjMgr^.AddGhost(sRally);
				var ^CGhost pxG=pxObjMgr^.GetGhostIndex(avPositions.NumEntries()-1);
				if(sRally=="ninigi_water_turret")then
					var CFourCC xLink = "we";
					var int iLinkID = pxG^.GetLinkID(xLink);
					pxG^.LinkGfx(iLinkID, "ninigi_water_turret_cannon");
				endif;
				pxObjMgr^.SetGhostClass(avPositions.NumEntries()-1,sRally);
				pxG^.SetVisible(true);
				pxG^.SetPos(vPos);
				pxG^.SetOwner(CGameWrap.GetClient().GetPlayerID());
				if(sMines.IsEmpty() && sTurrets.IsEmpty())then
					var CFourCC xLink = "Proj";
					var int iLinkID = pxG^.GetLinkID(xLink);
					pxG^.LinkGfx(iLinkID, "waypoint_"+avPositions.NumEntries().ToReal().ToString("02.0"));
					pxG^.SetColor({{255,255,255,255}});
					pxG^.SetColored(false);
				else
					pxG^.SetColor({{0,255,0,255}});
					pxG^.SetColored(true);
				endif;
			endfor;
		endfor;
		var int iNumGhosts=pxObjMgr^.NumGhosts();
		if(iNumGhosts>avPositions.NumEntries())then
			for(i=avPositions.NumEntries())cond(i<iNumGhosts)iter(i++)do
				var ^CGhost pxG=pxObjMgr^.GetGhostIndex(i);
				pxG^.SetVisible(false);
			endfor;
		endif;
		return(avPositions.NumEntries()>0);
	endproc;
	
	export proc bool RallyUpdate()
		var ^CObjSelection pxSel = ^(CClientWrap.GetSelection());
		var ^CObjMgr pxObjMgr = ^(CClientWrap.GetObjMgr());
		if(m_xPlacer.GetActive())then return false; endif;
		m_sPlayerTribe=CGameWrap.GetClient().GetPlayer().GetPlayerSlot()^.GetTribe();
		// RT#16363 - Der Ghost sollte nicht einfach so entfernt werden, da dies das Bauen abbricht
		// pxObjMgr^.DeleteGhost();
		var array vec3 avPositions;
		var int i,iC = pxSel^.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CObj pxObj = pxSel^[i].GetObj();
			if(pxObj==null)then continue; endif;
			var ^CAttribs pxAttr = pxObj^.GetAttribs();
			if(pxAttr==null || pxAttr^.GetValueInt("IsRallySite")!=1)then continue; endif;
			var string sPos = pxAttr^.GetValue("RallyPoint");
			var string sTribe = pxAttr^.GetValue("tribe");
			if(sTribe=="World"||sTribe=="Special"||sTribe=="")then
				sTribe=m_sPlayerTribe;
			endif;
			if(sTribe.IsEmpty())then continue; endif;
			var vec3 vPos;
			vPos.FromString(sPos);
			var string sHarbour;
			if(pxAttr^.GetValueBool("fishDelivery"))then
				sHarbour = "_Harbour";
			endif;
			if(avPositions.FindEntry(vPos)!=-1)then continue; endif;
			avPositions.AddEntry(vPos);
			var string sRally = sTribe+"_Rally_Point"+sHarbour;
			sRally.MakeLower();
			pxObjMgr^.AddGhost(sRally);
			var ^CGhost pxG=pxObjMgr^.GetGhostIndex(avPositions.NumEntries()-1);
			if(!sHarbour.IsEmpty())then
				pxG^.SetSwimming(true);
				pxG^.SetAnim("standanim",3,1);
			endif;
			pxG^.SetVisible(true);
			pxG^.SetPos(vPos);
		endfor;
		var int iNumGhosts=pxObjMgr^.NumGhosts();
		if(iNumGhosts>avPositions.NumEntries())then
			for(i=avPositions.NumEntries())cond(i<iNumGhosts)iter(i++)do
				var ^CGhost pxG=pxObjMgr^.GetGhostIndex(i);
				pxG^.SetVisible(false);
			endfor;
		endif;
		return(avPositions.NumEntries()>0);
	endproc;
	
	export proc void UpdateSpirits()
		CGameWrap.GetSpiritMgr().ShowSpirits(CGameInst.ms_xSelectionInfo.Has(CSelectionInfo.ALLY_SPIRITS));
		var ^CSpiritMgr pxS=^(CSpiritMgr.Get());
		if(pxS!=null)then
			pxS^.ShowSpirits(CGameInst.ms_xSelectionInfo.Has(CSelectionInfo.ALLY_SPIRITS),CGameInst.ms_xSelectionInfo.Has(CSelectionInfo.ENEMY_SPIRITS));
		endif;
	endproc;
	
//	export proc void UpdateSpirits()
//		CGameWrap.GetSpiritMgr().ShowSpirits(false);
//		var bool bShowSpirits=false;
//		var int iOwnOwner=CGameWrap.GetClient().GetPlayerID();
//		var CObjList xNewSel;
//		xNewSel=CClientWrap.GetSelection();
//		var int i,iC=xNewSel.NumEntries();
//		for(i=0)cond(i<iC)iter(i++)do
//			var ^CObj pxWalk=xNewSel[i].GetObj();
//			if(pxWalk==null)then continue; endif;
//			//Henry: making Tarna see spirits
//			//if((pxWalk^.GetClassName()=="aje_shaman" && pxWalk^.GetOwner()==iOwnOwner) || pxWalk^.GetType()=="SPRT")then
//			if(((pxWalk^.GetClassName()=="Tarna_s0"||pxWalk^.GetClassName()=="aje_shaman") && pxWalk^.GetOwner()==iOwnOwner ) || pxWalk^.GetType()=="SPRT")then
//				bShowSpirits=true;
//				break;
//			endif;
//		endfor;
//		CGameWrap.GetSpiritMgr().ShowSpirits(bShowSpirits);
//	endproc;
	
endclass;