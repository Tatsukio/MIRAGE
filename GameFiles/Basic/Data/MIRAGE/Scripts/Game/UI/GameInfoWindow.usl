class CLevelInfoView inherit CStaticCtrlEx
	
	var ^CGameInfoWindow 		m_pxOwner;
	var ^CMapInfoList.CMapInfo 	m_pxMapInfo;
	
	var ^CStaticCtrlEx			m_pxBackGround;
	var ^CStaticCtrlEx 			m_pxPreviewPic;
	var	^CUIFloatBox			m_pxDescription;
	var	^CUIFloatBox			m_pxGameType;
	var	^CUIFloatBox			m_pxGameName;
	var	^CUIFloatBox			m_pxServerIP;
	var	^CUIFloatBox			m_pxSetting;
	var	^CUIFloatBox			m_pxHeadQuater;
	var	^CUIFloatBox			m_pxPassword;
	var	^CUIFloatBox			m_pxMaxPlayers;
	var	^CUIFloatBox			m_pxTeams;
	var	^CUIFloatBox			m_pxPoints;
	var	^CUIFloatBox			m_pxMapSize;
	var	^CUIFloatBox			m_pxWarpGate;
	var	^CUIFloatBox			m_pxFOW;
	var	^CUIFloatBox			m_pxDiplomacy;
	var	^CUIFloatBox			m_pxHandicap;
	var	^CUIFloatBox			m_pxAuthor;
	var	^CUIFloatBox			m_pxVersion;
	
	
	export constructor()
		System.Assert(false,"invalid CLevelInfoView contructor");
	endconstructor;

	export constructor(^CGameInfoWindow p_pxOwner,bool p_bShowGameDesc)		
		if(p_bShowGameDesc)then
			if(!InitFromResource("UI/GameInfoWindow","LevelInfoViewMP"))then
				KLog.LogSpam("CLevelInfoView","InitFromResource failed");
				return;
			endif;
		else			
			if(!InitFromResource("UI/GameInfoWindow","LevelInfoViewSP"))then
				KLog.LogSpam("CLevelInfoView","InitFromResource failed");
				return;
			endif;			
		endif;
		var string sBGPath=CClientWrap.GetUrsRelPath()+"/Data/Base/UI/menue/decoration/levelimage_background.tga";
		KLog.LogSpam("ParaworldFan","CLevelInfoView: constructor() GetMapData.GetMapName()=="+CMultiPlayerClientMgr.Get().GetMapData()^.GetMapName());
		var bool bCustomBG=(CGameWrap.GetClientID()==CMultiPlayerClientMgr.Get().GetHostID())&&(CMirageClnMgr.Get().CheckCustomMap(CMultiPlayerClientMgr.Get().GetMapData()^.GetMapName(),"PreviewImage"));
		KLog.LogSpam("ParaworldFan","CLevelInfoView: constructor() bCustomBG=="+bCustomBG.ToString());
		if(p_pxOwner^.GetType()==CGameInfoWindow.GIWT_MULTIPLAYER && !bCustomBG)then
			sBGPath=CClientWrap.GetUrsRelPath()+"/Data/Base/UI/menue/decoration/levelimage_background_mp.tga";
		endif;
		m_pxOwner=p_pxOwner;
		m_pxBackGround=cast<CStaticCtrlEx>(GetControl("ImageBackground"));
		m_pxBackGround^.SetBitmap(sBGPath);
		
		m_pxPreviewPic=cast<CStaticCtrlEx>(GetControl("ImageBackground/PreviewImage"));		
		m_pxDescription=cast<CUIFloatBox>(GetControl("Description"));		
		m_pxDescription^.SetFrame(false);
		m_pxDescription^.SetBackground(false);
		
		var ^CStaticCtrlEx pxStatBackground=cast<CStaticCtrlEx>(GetControl("StatBackground"));
		if(pxStatBackground!=null)then
			pxStatBackground^.SetBitmap(CGameWrap.GetUrsRelPath()+"/Data/Base/UI/menue/decoration/gameinfo_statbackground.tga");
			
			m_pxGameType=cast<CUIFloatBox>(pxStatBackground^.GetControl("GameType"));
			m_pxGameName=cast<CUIFloatBox>(pxStatBackground^.GetControl("GameName"));
			m_pxServerIP=cast<CUIFloatBox>(pxStatBackground^.GetControl("ServerIP"));
			m_pxSetting=cast<CUIFloatBox>(pxStatBackground^.GetControl("Setting"));
			m_pxHeadQuater=cast<CUIFloatBox>(pxStatBackground^.GetControl("HeadQuater"));
			m_pxPassword=cast<CUIFloatBox>(pxStatBackground^.GetControl("Password"));
			m_pxMaxPlayers=cast<CUIFloatBox>(pxStatBackground^.GetControl("MaxPlayers"));
			m_pxTeams=cast<CUIFloatBox>(pxStatBackground^.GetControl("Teams"));
			m_pxPoints=cast<CUIFloatBox>(pxStatBackground^.GetControl("Points"));
			m_pxMapSize=cast<CUIFloatBox>(pxStatBackground^.GetControl("MapSize"));
			m_pxWarpGate=cast<CUIFloatBox>(pxStatBackground^.GetControl("WarpGate"));
			m_pxFOW=cast<CUIFloatBox>(pxStatBackground^.GetControl("FOW"));
			m_pxDiplomacy=cast<CUIFloatBox>(pxStatBackground^.GetControl("Diplomacy"));
			m_pxHandicap=cast<CUIFloatBox>(pxStatBackground^.GetControl("Handicap"));
			m_pxAuthor=cast<CUIFloatBox>(pxStatBackground^.GetControl("Author"));
			m_pxVersion=cast<CUIFloatBox>(pxStatBackground^.GetControl("Version"));
			
			/*
			m_pxGameStats=cast<CUIFloatBox>(pxStatBackground^.GetControl("GameStats"));
			m_pxGameStats^.SetFrame(false);
			m_pxGameStats^.SetBackground(false);
			*/
		endif;		
	endconstructor;
	
	export proc void Update(^CMapInfoList.CMapInfo p_pxMapInfo)
		m_pxMapInfo=p_pxMapInfo;
		InvalidateContent();
	endproc;
	
	proc void OnUpdateContent()
		super.OnUpdateContent();
		var CBitmapPtr pxPreviewPic;
		var string sMapName;
		var string sFileName;
		var string sLevelName;
		var string sDescription;
		var string sSetting;
		var string sMaxPlayers;
		var string sMapSize;
		var string sAuthor;
		var string sVersion;
		//var color xRed = {{ 255,0,0,255 }}, xYellow = {{ 255,216,0,255 }};
		var string sColor="cogiw_1";
		
		CUIStateMgr.Get().InvalidateLoadScreenInfo();
		if(m_pxMapInfo!=null)then
			sLevelName=m_pxMapInfo^.GetMapName();
			var string sBGPath=CClientWrap.GetUrsRelPath()+"/Data/Base/UI/menue/decoration/levelimage_background.tga";
			if(m_pxOwner^.GetType()==CGameInfoWindow.GIWT_MULTIPLAYER && !CMirageClnMgr.Get().CheckCustomMap(sLevelName,"PreviewImage"))then
				sBGPath=CClientWrap.GetUrsRelPath()+"/Data/Base/UI/menue/decoration/levelimage_background_mp.tga";
			endif;
			m_pxBackGround^.SetBitmap(sBGPath);
			pxPreviewPic=m_pxMapInfo^.GetPreviewBitmap();
			if(m_pxOwner^.GetType()==CGameInfoWindow.GIWT_MULTIPLAYER && CMirageClnMgr.Get().CheckCustomMap(sLevelName,"PreviewImage"))then
				pxPreviewPic=CMultiPlayerClientMgr.Get().GetMapData()^.GetImage();
			endif;

			sMapName=CLocalizer.Get().Translate(sLevelName);
			
			//sFileName="("+m_sCurLevel+")";
			sDescription=CLocalizer.Get().Translate(m_pxMapInfo^.GetDescription());
			
			sSetting=CLocalizer.Get().Translate("_UI_GameInfo_Option_"+m_pxMapInfo^.GetLevelInfo().GetLevelSetting());
			sMaxPlayers=m_pxMapInfo^.GetMaxPlayers().ToString();
			var int iMapW,iMapH;
			m_pxMapInfo^.GetLevelInfo().GetMapSize(iMapW,iMapH);
			sMapSize=iMapW.ToString()+" x "+iMapH.ToString();
			var ^CLevelInfo pxInfo=^(m_pxMapInfo^.GetLevelInfo());
			var bool bInfo=CMirageClnMgr.Get().GetLevelInfo(pxInfo, sAuthor, sVersion);
			CUIStateMgr.Get().SetLoadScreenInfo(CUIStateMgr.CLoadScreenInfo.LOADSCR_MULTIPLAYER,sLevelName,m_pxMapInfo^.GetLevelInfo().GetLevelCheckSumme());
		endif;
		m_pxPreviewPic^.SetBitmap(pxPreviewPic);
		//m_pxDescription^.Clear();
		var string sText=sDescription;		
		//m_pxDescription^.SetText("\\{al}\\{in10}\\{is0}\\{ii-1;layer testnosize3}\\{ns1}\\{ii-1;layer testnosize1} Anthony Cole ABCDEFG HIJKLMNOP QRSTUVW\\{br}BLAH\\{p}");
		m_pxDescription^.SetText("\\{cogiw_1} "+sMapName+"\\{cp}\\{p}\\{cogiw_2}"+sText+"\\{cp}\\{p}");
		
		if(m_pxGameType!=null)then
			var ^CGame pxGame=^(CGameWrap.GetGame());
			var int iGameType=pxGame^.GetType();
			var bool bCoopMap = CMirageClnMgr.Get().CheckCustomMap(sLevelName,"MultiplayerCampaign");
			var bool bCustomMap = CMirageClnMgr.Get().IsCustomMap(sLevelName);
			var bool bPhantomMode = pxGame^.GetAttribInt("PhantomMode")==1;	

			var string sGameType="\\{cogiw_1}"+CLocalizer.Get().Translate("_GAMETYPE_Deathmatch");
			if(bCoopMap)then
				sGameType="\\{codc0}" + CLocalizer.Get().Translate("_GAMETYPE_Campaign");
			elseif(bCustomMap)then
				sGameType="\\{colightgreen}"+CLocalizer.Get().Translate("_GAMETYPE_Custom");
			elseif(iGameType==1)then
				sGameType="\\{cogiw_1}"+CLocalizer.Get().Translate("_GAMETYPE_KingOfTheHill");
			elseif(iGameType==2)then
				sGameType="\\{cogiw_1}"+CLocalizer.Get().Translate("_GAMETYPE_Defender");
			endif;
			if(bPhantomMode)then
				sGameType += "\\{coyellow} ["+CLocalizer.Get().Translate("_MIRAGE_UI_MirageServer_PhantomMode")+"]";
			endif;
			m_pxGameType^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_UI_GameInfo_Label_GameType") + sGameType + "\\{cp}\\{p}");
			
			var string sGameName=pxGame^.GetName();
			m_pxGameName^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_UI_GameInfo_Label_GameName")+"\\{cp}\\{cogiw_1}"+sGameName+"\\{cp}\\{p}");
		
			var string sPassword=pxGame^.GetPassword();
			if(sPassword=="?")then sPassword=""; endif;
			m_pxPassword^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_UI_GameInfo_Label_Password")+"\\{cp}\\{coyellow}"+sPassword+"\\{cp}\\{p}");
			
			var string sServer=pxGame^.GetServerIP();
			if(CGameWrap.GetClientID()==CMultiPlayerClientMgr.Get().GetHostID())then
				if(CMirageClnMgr.Get().GetServerIP(sServer))then
					pxGame^.SetAttrib("mirage_ip",sServer);
				endif;
			elseif(pxGame^.GetAttrib("mirage_ip")!="")then
				sServer=pxGame^.GetAttrib("mirage_ip");
			endif;
			var int iPort=pxGame^.GetServerPort();
			var string sPort="";
			if(iPort>0)then
				 sPort="\\{cogiw_2}:\\{cp} \\{cogiw_1}"+iPort.ToString()+"\\{cp}";
			endif;
			m_pxServerIP^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_UI_GameInfo_Label_Server")+"\\{cp}\\{cogiw_1}"+sServer+"\\{cp}"+sPort+"\\{p}");
			
			var string sHeadQuater=CLocalizer.Get().Translate("_UI_GameInfo_Label_Locked");
			if(pxGame^.GetChooseHQ())then
				sHeadQuater=CLocalizer.Get().Translate("_UI_GameInfo_Label_Free");
			endif;
			m_pxHeadQuater^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_UI_GameInfo_Label_HeadQuater")+"\\{cp}\\{cogiw_1}"+sHeadQuater+"\\{cp}\\{p}");
			
			var int iNumTeams=pxGame^.GetNumTeams();	
			m_pxTeams^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_UI_GameInfo_Label_Teams")+"\\{cp}\\{cogiw_1}"+iNumTeams.ToString()+"\\{cp}\\{p}");
			
			var int iPoints=Math.Max(pxGame^.GetCredits(),0);
			m_pxPoints^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_UI_GameInfo_Label_Points")+"\\{cp}\\{cogiw_1}"+iPoints.ToString()+"\\{cp}\\{p}");
			
			var string sWarpGate=CLocalizer.Get().Translate("_UI_GameInfo_Label_On");
			if(pxGame^.GetDisableWarpgate())then
				sWarpGate=CLocalizer.Get().Translate("_UI_GameInfo_Label_Off");
			else
				sColor="cored";
			endif;
			m_pxWarpGate^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_UI_GameInfo_Label_WarpGate")+"\\{cp}\\{"+sColor+"}"+sWarpGate+"\\{cp}\\{p}");
			sColor="cogiw_1";
						
			var string sFOW=CLocalizer.Get().Translate("_UI_GameInfo_Label_Off");
			if(pxGame^.GetFOWEnabled())then
				sFOW=CLocalizer.Get().Translate("_UI_GameInfo_Label_On");
			else
				sColor="cored";
			endif;
			m_pxFOW^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_UI_GameInfo_Label_FOW")+"\\{cp}\\{"+sColor+"}"+sFOW+"\\{cp}\\{p}");
			sColor="cogiw_1";
			
			var string sDiplomacy=CLocalizer.Get().Translate("_UI_GameInfo_Label_Free");
			if(pxGame^.GetDiplomacyLocked())then
				sDiplomacy=CLocalizer.Get().Translate("_UI_GameInfo_Label_Locked");
			endif;
			m_pxDiplomacy^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_UI_GameInfo_Label_Diplomacy")+"\\{cp}\\{cogiw_1}"+sDiplomacy+"\\{cp}\\{p}");
			
			var string sHandicap=CLocalizer.Get().Translate("_UI_GameInfo_Label_Off");
			if(pxGame^.GetAllowHandicap())then
				sHandicap=CLocalizer.Get().Translate("_UI_GameInfo_Label_On");
				sColor="cored";
			endif;
			m_pxHandicap^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_UI_GameInfo_Label_Handicap")+"\\{cp}\\{"+sColor+"}"+sHandicap+"\\{cp}\\{p}");
			sColor="cogiw_1";
			
			m_pxSetting^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_UI_GameInfo_Label_Setting")+"\\{cp}\\{cogiw_1}"+sSetting+"\\{cp}\\{p}");
			m_pxMaxPlayers^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_UI_GameInfo_Label_MaxPlayers")+"\\{cp}\\{cogiw_1}"+sMaxPlayers+"\\{cp}\\{p}");
			m_pxMapSize^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_UI_GameInfo_Label_MapSize")+"\\{cp}\\{cogiw_1}"+sMapSize+"\\{cp}\\{p}");
			
			m_pxAuthor^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_GameInfo_Label_Author")+"\\{cp}\\{cogiw_1}"+sAuthor+"\\{cp}\\{p}");
			m_pxVersion^.SetText("\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_GameInfo_Label_Version")+"\\{cp}\\{cogiw_1}"+sVersion+"\\{cp}\\{p}");
			
			if(CMultiPlayerClientMgr.Get().GetSkirmishMode())then
				m_pxGameName^.SetText("");
				m_pxPassword^.SetText("");
				m_pxServerIP^.SetText("");
			endif;
		endif;
	endproc;
	
endclass;

class CGameInfoWindow inherit CFrameWindow
	
	var ^CMapInfoList 				m_pxMapInfoList;
	var ^CDesktop					m_pxDesktop;
	var ^CStaticCtrlEx				m_pxBackground;
	
	var ^CButton					m_pxGameInfo;
	var ^CButton					m_pxMyArmy;
	var int							m_iState;
		
	var ^CTabCtrl					m_pxTabCtrl;	
	var ^CLevelInfoView				m_pxLevelInfoView;
	var ^CPointBuyMenu				m_pxPointBuy;	
	
	var string 						m_sCurLevel;
	var int							m_iCredits;
	var int							m_iGiftedCredits;
	var CPlayerSlotID 				m_xPlayerSlotID;
	var bool 						m_bInit;
	
	var array SHWND					m_ahPointGaugeList;
	
	export var procref<void,int> m_xOnActivateTab;
	
	export const int GIWT_SINGLEPLAYER=0;
	export const int GIWT_MULTIPLAYER=1;
	var int m_iGIWType;
	
	export const int GIW_MP_GIFTED_FOOD=30;
	export const int GIW_MP_GIFTED_WOOD=0;
	export const int GIW_MP_GIFTED_STONE=0;
	export const int GIW_MP_GIFTED_IRON=0;
	
	var int m_iHP; // Henry: Hero Pool
	var int m_iFE; // Henry: Flying Enabled
	var int m_iTR; // Henry: Titans Removed
	var int m_iTD; // Henry: Trading Disabled
	var int m_iMaxE; // Henry: max epoch
	var int m_iMinE; // Henry: min epoch
	
	export constructor()
		System.Assert(false,"Invalid Constructor CGameInfoWindow()");
	endconstructor;
	
	export constructor(int p_iGIWType,^CMapInfoList p_pxMapInfoList,bool p_bShowGameDesc)
		if(!InitFromResource("UI/GameInfoWindow","GameInfoWindow"))then
			return;
		endif;
		m_bInit=false;
		m_iGIWType=p_iGIWType;
		m_pxMapInfoList=p_pxMapInfoList;
		m_pxDesktop=CClientWrap.GetDesktop();
		m_pxLevelInfoView=new CLevelInfoView(this,p_bShowGameDesc);
		m_pxTabCtrl=cast<CTabCtrl>(GetControl("TabCtrl"));		
		m_pxTabCtrl^.AddTab(CLocalizer.Get().Translate("_GameInfo"),m_pxLevelInfoView,CLocalizer.Get().Translate("_UI_Tab_GameInfo_TT"));
		m_pxTabCtrl^.m_xOnChangeTab=OnChangeTab;
		SetSize(310 * CGameInst.ms_iUIScaleFactor,715 * CGameInst.ms_iUIScaleFactor);
		SetPos(0,30 * CGameInst.ms_iUIScaleFactor);
		var ^CGame pxGame = ^(CGameWrap.GetGame());
		m_iHP=pxGame^.GetAttribInt("HeroPool");
		m_iFE=pxGame^.GetAttribInt("FlyingEnabled");
		m_iTR=pxGame^.GetAttribInt("RemoveTitans");
		m_iTD=pxGame^.GetAttribInt("RemoveTrading");
		m_iMaxE=pxGame^.GetAttribInt("MaxEpoch");
		m_iMinE=pxGame^.GetAttribInt("MinEpoch");
	endconstructor;
	
	export destructor()	
		if(m_pxPointBuy!=null)then
			m_pxPointBuy^.Destroy();
		endif;
	enddestructor;
	
	export proc void Init(CPlayerSlotID p_xPlayerSlotID)
		m_bInit=true;
		m_xPlayerSlotID=p_xPlayerSlotID;
		/*m_xPlayerSlotID=CGameWrap.GetClient().GetPlayerSlotID();
		if(m_iGIWType==GIWT_SINGLEPLAYER)then
			m_xPlayerSlotID=CPlayerSlotID.First();
		endif;	
		*/
		
		m_pxPointBuy=new CPointBuyMenu(this,m_xPlayerSlotID);
	endproc;
	
	export proc void RegisterPointGauge(SHWND p_hPointGauge)
		m_ahPointGaugeList.Include(p_hPointGauge);
	endproc;
	
	export proc void UnregisterPointGauge(SHWND p_hPointGauge)
		m_ahPointGaugeList.Exclude(p_hPointGauge);
	endproc;
	
	export proc SHWND GetPointGaugeSHWND(int p_iIndex)
		return m_ahPointGaugeList[p_iIndex];
	endproc;
	
	export proc CPlayerSlotID GetPlayerSlotID()
		return m_xPlayerSlotID;
	endproc;
	
	export proc int GetType() 
		return m_iGIWType; 
	endproc;
	
	export proc ^CTabCtrl GetTabCtrl() 
		return m_pxTabCtrl; 
	endproc;
	
	export proc void SetPointBuyAvailable(bool p_bValue)				
		if(p_bValue && m_pxTabCtrl^.GetNumTabs()==1)then
			System.Assert(m_pxPointBuy!=null,"m_pxPointBuy!=null");			
			m_pxTabCtrl^.AddTab(CLocalizer.Get().Translate("_MyArmy"),m_pxPointBuy,false,CLocalizer.Get().Translate("_UI_Tab_MyArmy_TT"));
			return;			
		endif;
		if(!p_bValue && m_pxTabCtrl^.GetNumTabs()==2)then			
			m_pxTabCtrl^.RemoveTab(1);
		endif;
	endproc;
	
	export proc bool GetPointBuyAvailable()
		return (m_pxTabCtrl^.GetNumTabs()==2);
	endproc;
	
	export proc void EnablePointBuyPage(bool p_bValue)
		if(GetPointBuyAvailable())then
			m_pxTabCtrl^.SetTabDisabled(1,!p_bValue);
		endif;
	endproc;
	
	export proc ref CPointBuyMenu GetPointBuyMenu()
		System.Assert(m_bInit,"m_bInit");
		return (m_pxPointBuy^);
	endproc;
	
	export proc void Update(string p_sLevelFile,int p_iCredits)
		if(m_sCurLevel==p_sLevelFile && m_iCredits==p_iCredits)then
			return;
		endif;
		m_sCurLevel=p_sLevelFile;
		m_iCredits=p_iCredits;
		InvalidateContent();
	endproc;
	
	export proc void UpdateHP()
		var int iHP=CGameWrap.GetGame().GetAttribInt("HeroPool");
		if(m_iHP==iHP)then
			return;
		endif;
		m_iHP=iHP;
		if(m_pxPointBuy!=null)then
			m_pxPointBuy^.OnUpdatePyramid();
			InvalidateContent();
		endif;
	endproc;
	
	export proc void UpdateFE()
		var int iFE=CGameWrap.GetGame().GetAttribInt("FlyingEnabled");
		if(m_iFE==iFE)then
			return;
		endif;
		m_iFE=iFE;
		if(m_pxPointBuy!=null)then
			m_pxPointBuy^.OnUpdatePyramid();
			InvalidateContent();
		endif;
	endproc;
	
	export proc void UpdateTR()
		var int iTR=CGameWrap.GetGame().GetAttribInt("RemoveTitans");
		if(m_iTR==iTR)then
			return;
		endif;
		m_iTR=iTR;
		if(m_pxPointBuy!=null)then
			m_pxPointBuy^.OnUpdatePyramid();
			InvalidateContent();
		endif;
	endproc;
	
	export proc void UpdateTD()
		var int iTD=CGameWrap.GetGame().GetAttribInt("RemoveTrading");
		if(m_iTD==iTD)then
			return;
		endif;
		m_iTD=iTD;
		if(m_pxPointBuy!=null)then
			m_pxPointBuy^.OnUpdatePyramid();
			InvalidateContent();
		endif;
	endproc;
	
	export proc void UpdateEpochs()
		var int iMaxE=CGameWrap.GetGame().GetAttribInt("MaxEpoch");
		var int iMinE=CGameWrap.GetGame().GetAttribInt("MinEpoch");
		var bool bPyramid=false;
		if(m_iMaxE==iMaxE&&m_iMinE==iMinE)then
			return;
		elseif(m_iMaxE!=iMaxE)then
			bPyramid=true;
		endif;
		m_iMaxE=iMaxE;
		m_iMinE=iMinE;
		if(m_pxPointBuy!=null)then
			if(bPyramid)then
				m_pxPointBuy^.OnUpdatePyramid();
			endif;
			m_pxPointBuy^.OnUpdateEpochs();
			InvalidateContent();
		endif;
	endproc;
	
	proc bool OnChangeTab(int p_iCurTub)
		var ^CWindow pxCurWindow=m_pxTabCtrl^.GetTabWindow(p_iCurTub);
		if(pxCurWindow==m_pxLevelInfoView)then
			SetSize(310 * CGameInst.ms_iUIScaleFactor,715 * CGameInst.ms_iUIScaleFactor);
		else
			SetSize(670 * CGameInst.ms_iUIScaleFactor,715 * CGameInst.ms_iUIScaleFactor);
		endif;
		if(!m_xOnActivateTab.IsNull())then
			m_xOnActivateTab.Call(p_iCurTub);
		endif;
		return true;
	endproc;
	
	export proc string GetCurTribe()
		System.Assert(m_bInit,"m_bInit");
		return m_pxPointBuy^.GetCurTribe();
	endproc;
	
	export proc void UpdatePointBuy(string p_sTribe)
		if(!m_bInit)then return; endif;
		//System.Assert(m_bInit,"m_bInit");
		var ^CPropDB.CNode pxPresetNode=null;
		var ^CPropDB.CNode pxResourcePresetNode=null;
		var ^CPropDB.CNode pxRestrictionsNode=null;
		var int iCredits=m_iCredits;
		m_iGiftedCredits=0;
		var bool bIncludeBuildings=true;
		if(CUIStateMgr.Get().GetState()==CUIStateMgr.STATE_NEWMULTIPLAYERPREGAME)then
			if((CGameWrap.GetClientID()==CMultiPlayerClientMgr.Get().GetHostID()) && m_sCurLevel.IsEmpty())then
				m_sCurLevel=CClientWrap.GetUserProfileValue("Multiplayer/LastSelectedMap","");
			elseif(m_sCurLevel!=CMultiPlayerClientMgr.Get().GetMapData()^.GetFileName())then
				m_sCurLevel=CMultiPlayerClientMgr.Get().GetMapData()^.GetFileName();
			endif;
			if(m_iCredits!=CGameWrap.GetClient().GetGame().GetCredits())then
				iCredits=CGameWrap.GetClient().GetGame().GetCredits();
				m_iCredits=iCredits;
			endif;
		endif;
		var ^CMapInfoList.CMapInfo pxMapInfo=m_pxMapInfoList^.GetMapInfo(m_sCurLevel);
		if(pxMapInfo!=null)then
			var ^CLevelInfo pxLevelInfo=^(pxMapInfo^.GetLevelInfo());
			if(m_xPlayerSlotID.IsValid())then
				var int iOwner=-1;
				var bool bCustom=CMirageClnMgr.Get().CheckCustomMap(pxMapInfo^.GetMapName(),"PointBuy/Preset") || CMirageClnMgr.Get().CheckCustomMap(pxMapInfo^.GetMapName(),"PointBuy/ShoppingList");
				if(pxLevelInfo^.IsMultiplayer() && bCustom)then
					iOwner=CMultiPlayerClientMgr.Get().m_pxPlayerListWindow^.GetOwnSlot()^.GetPlayerSlot()^.GetOwner();
				else
					iOwner=pxLevelInfo^.GetPlayerSlot(m_xPlayerSlotID).GetOwner();
				endif;
				if(iOwner!=-1)then
					var ^CPropDB pxGenericData=^(pxLevelInfo^.GetGenericData());
					var ^CPropDB.CNode pxPlayerSettingsNode=pxGenericData^.FindNode("PlayerSettings/Player_"+iOwner.ToString(),false);
					if(pxPlayerSettingsNode!=null)then
						//iCredits=pxPlayerSettingsNode^.GetValueI("SPCredits",0);
						if(pxPlayerSettingsNode^.GetValueI("IncludeBuildings",1)!=1)then
							bIncludeBuildings=false;
						endif;
						if(!pxLevelInfo^.IsMultiplayer()||CMirageClnMgr.Get().CheckCustomMap(pxMapInfo^.GetMapName(),"PointBuy/Preset"))then
							var ^CPropDB.CNode pxPBPresetNode=pxPlayerSettingsNode^.Get("PointBuyPreset");
							if(pxPBPresetNode!=null)then
								pxPresetNode=pxPBPresetNode^.Get(p_sTribe);
								if(pxPresetNode!=null)then
									var int i,iC=pxPresetNode^.NumSubs();
									for(i=0)cond(i<iC)iter(i++)do
										var ^CPropDB.CNode pxUnit=^(pxPresetNode^.Get(i));
										//RT#16992
										//m_iGiftedCredits+=CPointBuyMgr.GetCostForUnit(pxUnit^.Value(),pxUnit^.Name().ToInt(),p_sTribe);
									endfor;
								endif;
							endif;
						endif;
						if(!pxLevelInfo^.IsMultiplayer()||CMirageClnMgr.Get().CheckCustomMap(pxMapInfo^.GetMapName(),"PointBuy/ShoppingList"))then
							pxRestrictionsNode=pxPlayerSettingsNode^.Get("Restrictions");
							if(!pxLevelInfo^.IsMultiplayer()||CMirageClnMgr.Get().CheckCustomMap(pxMapInfo^.GetMapName(),"PointBuy/Preset"))then
								if(pxRestrictionsNode!=null)then
									pxResourcePresetNode=pxRestrictionsNode^.Get("Resources");
								endif;
							endif;
						endif;
					endif;
				endif;
			endif;
		endif;
		
		if(pxResourcePresetNode!=null)then
			/* RT#16992
			m_iGiftedCredits+=CPointBuyMgr.GetCostForResource("food",pxResourcePresetNode^.GetValueI("food"),p_sTribe);
			m_iGiftedCredits+=CPointBuyMgr.GetCostForResource("wood",pxResourcePresetNode^.GetValueI("wood"),p_sTribe);
			m_iGiftedCredits+=CPointBuyMgr.GetCostForResource("stone",pxResourcePresetNode^.GetValueI("stone"),p_sTribe);
			*/
		endif;
		iCredits=m_iCredits+m_iGiftedCredits;
		UpdatePointBuy(p_sTribe,iCredits,pxRestrictionsNode,pxPresetNode,pxResourcePresetNode,bIncludeBuildings);
	endproc;
	
	export proc void UpdatePointBuy(string p_sTribe,int p_iCredits,^CPropDB.CNode p_pxRestrictionsNode,^CPropDB.CNode p_pxPresetNode,^CPropDB.CNode p_pxResourcePresetNode,bool p_bIncludeBuildings)
		
		if(!m_bInit)then return; endif;
		//System.Assert(m_bInit,"m_bInit");
		var int iCredits=p_iCredits;
		m_iGiftedCredits=0;
		var bool bCustomPBPreset=CMirageClnMgr.Get().CheckCustomMap(CMirageClnMgr.Get().GetMapName(),"PointBuy/Preset");
		if(p_pxResourcePresetNode!=null && GetType()==GIWT_MULTIPLAYER && !bCustomPBPreset)then
			var int iFood=p_pxResourcePresetNode^.GetValueI("food");
			//p_pxResourcePresetNode^.SetValue("food",iFood+GIW_MP_GIFTED_FOOD);
			m_iGiftedCredits+=GIW_MP_GIFTED_FOOD;
		endif;
		if(p_sTribe=="Aje")then
			if(p_bIncludeBuildings)then
				var int iCost=CPointBuyMgr.GetCostForUnit("aje_resource_collector",24,p_sTribe);
				m_iGiftedCredits+=iCost;
			endif;
		endif;
		if(p_iCredits!=-1)then
			iCredits+=m_iGiftedCredits;
		endif;

		m_pxPointBuy^.SetCurTribe(p_sTribe);
		m_pxPointBuy^.GetShoppingList().Update(p_sTribe,p_pxRestrictionsNode);
//		m_pxPointBuy^.SetDisabled(p_iCredits==-1);
		m_pxPointBuy^.Init(iCredits,p_pxPresetNode,p_pxResourcePresetNode,p_bIncludeBuildings);
	endproc;
	
	export proc bool WriteResultToLevelInfo(int p_iOwner,string p_sTribe)
		System.Assert(m_bInit,"m_bInit");
		var CPointBuyResult xPBR;
		m_pxPointBuy^.GeneratePointBuyResult(xPBR);
		if(m_iGIWType==GIWT_SINGLEPLAYER)then
			CCampaignMgr.Get().GetCurLevelInfo().SetPointBuyResult(p_iOwner,p_sTribe,xPBR);
		elseif(CMirageClnMgr.Get().CheckCustomMap(CMirageClnMgr.Get().GetMapName(),"PointBuy/Preset"))then
			CEvt_PointBuyResult.Send(xPBR,p_iOwner,p_sTribe);
		else
//			var int iCredits=CGameWrap.GetClient().GetGame().GetCredits();
//			if(iCredits!=-1)then
				var int iResourceValue=0;
				var int i,iC=xPBR.NumResources();
				for(i=0)cond(i<iC)iter(i++)do
					var string sRes;
					var int iVal;
					xPBR.GetResource(i,sRes,iVal);
					iResourceValue+=iVal;
				endfor;
				if(xPBR.NumChars()==0 && iResourceValue==0)then
					return false;
				endif;
//			endif;
			CEvt_PointBuyResult.Send(xPBR,p_iOwner,p_sTribe);
		endif;
		return true;
	endproc;
	
	proc void OnUpdateContent()
		super.OnUpdateContent();
		var ^CMapInfoList.CMapInfo pxMapInfo=m_pxMapInfoList^.GetMapInfo(m_sCurLevel);
		m_pxLevelInfoView^.Update(pxMapInfo);
		
		if(m_pxPointBuy!=null)then
			var int iCreditsTotal=m_pxPointBuy^.GetCreditsTotal()-m_iGiftedCredits;
			var int iCredits=m_pxPointBuy^.GetCredits();
			var int i,iC=m_ahPointGaugeList.NumEntries();
			for(i=0)cond(i<iC)iter(i++)do
				var ^CPointGauge pxPG=cast<CPointGauge>(CWindowMgr.Get().GetWindow(m_ahPointGaugeList[i]));
				if(pxPG!=null)then
					pxPG^.SetRange(iCreditsTotal.ToReal());
					pxPG^.SetProgress(iCredits.ToReal());
				endif;
			endfor;
		endif;
		m_pxLevelInfoView^.InvalidateContent();
	endproc;
endclass;

