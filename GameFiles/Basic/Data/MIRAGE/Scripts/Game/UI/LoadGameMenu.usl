class CLoadSaveGameMenu2 inherit CStateUIWnd
	
	var ^CDesktop							m_pxDesktop;
	var bool									m_bLoadSave;//true = load, false -> save
	var ^CLoadSaveTabGame			m_pxTabCampaign;
	var ^CLoadSaveTabGame			m_pxTabSkirmish;
	var ^CLoadSaveTabGame			m_pxTabMultiplayer;
	var ^CLoadSaveTabGame			m_pxTabSaveGame;
	var ^CLoadSaveTabReplay		m_pxTabReplay;
	
	var ^CTabCtrl							m_pxTabCtrl;
	var ^CMenuButton					m_pxBackBtn;
	
	var string								m_sParam; // need this param for return to endgame screen
	
	var bool									m_bSortByFile;
	
	export constructor()
		if(!InitFromResource("UI/LoadGameMenu","LoadGameMenu2")) then
			return;
		endif;
		var CConfig xConf;
		m_pxTabCampaign = new CLoadSaveTabGame(this);
		m_pxTabSkirmish = new CLoadSaveTabGame(this);
		if(xConf.GetB("Game/ButtonSaveMultiplayerEnable",false))then
			m_pxTabMultiplayer = new CLoadSaveTabGame(this);
		else
			m_pxTabMultiplayer = null;
		endif;
		m_pxTabSaveGame = new CLoadSaveTabGame(this);
		m_pxTabReplay = new CLoadSaveTabReplay(this);
		m_bLoadSave=true;
		
		m_pxDesktop=CClientWrap.GetDesktop();
		SetSize(580 * CGameInst.ms_iUIScaleFactor,450 * CGameInst.ms_iUIScaleFactor);
		if(xConf.GetI("Game/GUIOptions/CenterMenu",1)==1)then 
			SetPos(m_pxDesktop^.GetWidth()/2-GetWidth()/2,m_pxDesktop^.GetHeight()/2-GetHeight()/2);
		else
			SetPos(30 * CGameInst.ms_iUIScaleFactor,30 * CGameInst.ms_iUIScaleFactor);
		endif;
		
		m_pxBackBtn = cast<CMenuButton>(GetControl("Back"));
		m_pxBackBtn^.m_xOnClick=OnBack;
		SetCmd("Exit", OnBack );
		AddAccelerator("ESCAPE,NONE,Exit");
		SetDefButtonCancel(m_pxBackBtn);
		m_pxTabCtrl=cast<CTabCtrl>(GetControl("TabCtrl"));
		//m_iReturnState=CUIStateMgr.Get().GetState();
		CGameWrap.Pause();
		m_bSortByFile=true;
	endconstructor;
	
	export destructor()
		CGameWrap.Unpause();
	enddestructor;
	
	export proc bool Init(bool p_bLoadSave)
		m_bLoadSave=p_bLoadSave;
		m_pxTabCampaign^.Init(m_bLoadSave);
		m_pxTabSkirmish^.Init(m_bLoadSave);
		if(m_pxTabMultiplayer!=null)then
			m_pxTabMultiplayer^.Init(m_bLoadSave);
		endif;
		m_pxTabSaveGame^.Init(m_bLoadSave);
		m_pxTabReplay^.Init(m_bLoadSave);
		UpdateFileLists();
		m_pxTabCtrl^.DeleteAllChildren();
		if(m_bLoadSave)then
			SetCaption(CLocalizer.Get().Translate("_UI_LoadGame_Title_LoadGame"));
			m_pxTabCtrl^.AddTab(CLocalizer.Get().Translate("_UI_LoadGame_Tab_Campaign"),m_pxTabCampaign,CLocalizer.Get().Translate("_UI_LoadGame_Tab_Campaign_TT"));
			m_pxTabCtrl^.AddTab(CLocalizer.Get().Translate("_UI_LoadGame_Tab_Skirmish"),m_pxTabSkirmish,CLocalizer.Get().Translate("_UI_LoadGame_Tab_Skirmish_TT"));
			if(m_pxTabMultiplayer!=null)then
				m_pxTabCtrl^.AddTab(CLocalizer.Get().Translate("_UI_LoadGame_Tab_Multiplayer"),m_pxTabMultiplayer,CLocalizer.Get().Translate("_UI_LoadGame_Tab_Multiplayer_TT"));
			endif;
			m_pxTabCtrl^.AddTab(CLocalizer.Get().Translate("_UI_LoadGame_Tab_Replay"),m_pxTabReplay,CLocalizer.Get().Translate("_UI_LoadGame_Tab_Replay_TT"));
		//	m_pxTabCtrl^.SetTabDisabled(3,true); // disable replay tab
		else
			SetCaption(CLocalizer.Get().Translate("_UI_LoadGame_Title_SaveGame"));
			m_pxTabCtrl^.AddTab(CLocalizer.Get().Translate("_UI_LoadGame_Tab_SaveGame"),m_pxTabSaveGame,CLocalizer.Get().Translate("_UI_LoadGame_Tab_SaveGame_TT"));
			m_pxTabCtrl^.AddTab(CLocalizer.Get().Translate("_UI_LoadGame_Tab_SaveReplay"),m_pxTabReplay,CLocalizer.Get().Translate("_UI_LoadGame_Tab_SaveReplay_TT"));
		endif;
		m_pxTabCtrl^.m_xOnChangeTab=OnChangeTab;
		var int iDef;
		CSettings.Get("Game/LoadGameMenuDefTab",iDef);
		iDef=Math.Clamp(iDef,0,3);
		m_pxTabCtrl^.SelectTab(iDef);
		OnChangeTab(iDef);
		return true;
	endproc;
	
	export proc bool Init(bool p_bLoadSave,bool p_bSaveReplay)
		Init(p_bLoadSave);
		if(!p_bLoadSave)then
			if(p_bSaveReplay)then
				m_pxTabCtrl^.SetTabDisabled(0,true);
				m_pxTabCtrl^.SetTabDisabled(1,false);
				m_pxTabCtrl^.SelectTab(1);
			else
				m_pxTabCtrl^.SetTabDisabled(0,false);
				m_pxTabCtrl^.SetTabDisabled(1,true);
				m_pxTabCtrl^.SelectTab(0);
			endif;
		endif;
		return true;
	endproc;
	
	export proc bool Init(bool p_bLoadSave,bool p_bSaveReplay, string p_sParam)
		Init(p_bLoadSave,p_bSaveReplay);
		m_sParam = p_sParam;
		return true;
	endproc;
	
	export proc bool OnLoadEnd()
//		switch(m_pxTabCtrl^.GetCurrentTab())
//			case(0)do return m_pxTabCampaign^.OnLoadEnd(); endcase;
//			case(1)do return m_pxTabSkirmish^.OnLoadEnd(); endcase;
//			case(2)do
//				if(m_pxTabMultiplayer!=null)then
//					return m_pxTabMultiplayer^.OnLoadEnd();
//				endif;
//			endcase;
//			case(3)do return m_pxTabReplay^.OnLoadEnd(); endcase;
//			case default do endcase;
//		endswitch;
		if(m_pxTabCtrl^.GetCurrentTab()>-1)then
			var ^CLoadSaveTabGame pxGameTab = cast<CLoadSaveTabGame>(m_pxTabCtrl^.GetTabWindow(m_pxTabCtrl^.GetCurrentTab()));
			var ^CLoadSaveTabReplay pxReplayTab = cast<CLoadSaveTabReplay>(m_pxTabCtrl^.GetTabWindow(m_pxTabCtrl^.GetCurrentTab()));
			if(pxGameTab!=null)then
				return pxGameTab^.OnLoadEnd();
			endif;
			if(pxReplayTab!=null)then
				return pxReplayTab^.OnLoadEnd();
			endif;
		endif;
		return false;
	endproc;
	
	export proc bool OnBack()
		CUIStateMgr.Get().SetState(GetReturnState(),m_sParam);
		return true;
	endproc;
	
	export proc bool OnChangeTab(int p_iCurTub)
		if(m_bLoadSave)then
			switch(p_iCurTub)
				// Leider funktioniert SetDefButton nicht mit CList, da CList die KeyBoard-Events verschluckt. Der Grund für die Änderung war, dass sich LD beschwert hat, dass die Cursortasten im LevelEditor auch die Kamera bewegen.
				case(0)do /*m_pxTabCampaign^.SetFocusToList();*/ SetDefButtonOk(m_pxTabCampaign^.GetOKButton()); endcase;
				case(1)do /*m_pxTabSkirmish^.SetFocusToList();*/ SetDefButtonOk(m_pxTabSkirmish^.GetOKButton()); endcase;
				case(2)do /*m_pxTabMultiplayer^.SetFocusToList();*/ 
					if(m_pxTabMultiplayer!=null)then
						SetDefButtonOk(m_pxTabMultiplayer^.GetOKButton()); 
					endif;
				endcase;
				case(3)do /*m_pxTabReplay^.SetFocusToList();*/ SetDefButtonOk(m_pxTabReplay^.GetOKButton()); endcase;
				case default do SetDefButtonOk(null); endcase;
			endswitch;
		else
			switch(m_pxTabCtrl^.GetCurrentTab())
				case(0)do m_pxTabSaveGame^.SetFocusToEdit(); SetDefButtonOk(m_pxTabSaveGame^.GetOKButton()); endcase;
				case(1)do m_pxTabReplay^.SetFocusToEdit(); SetDefButtonOk(m_pxTabReplay^.GetOKButton()); endcase;
				case default do SetDefButtonOk(null); endcase;
			endswitch;
		endif;
		return true;
	endproc;
	
	proc void ClearFileLists()
		m_pxTabCampaign^.ClearFileList(false);
		m_pxTabSkirmish^.ClearFileList(false);
		if(m_pxTabMultiplayer!=null)then
			m_pxTabMultiplayer^.ClearFileList(false);
		endif
		if(m_pxTabSaveGame!=null)then
			m_pxTabSaveGame^.ClearFileList(true);
		endif;
	endproc;
	
	export proc bool UpdateFileLists()
		ClearFileLists();
		var ^CUserProfileList pxList = ^(CClientWrap.GetUserProfileList());
		var string sPath=pxList^.GetSaveGamePath();
		var CMapInfoList xMapInfoList;
		CGameWrap.GetMapInfoList(sPath,xMapInfoList,200,200);
		if(m_bSortByFile)then
			xMapInfoList.SortByFile(true);
		else
			xMapInfoList.SortByLastWriteTime(false);
		endif;
		var int i,iC=xMapInfoList.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CMapInfoList.CMapInfo pxMapInfo=^(xMapInfoList.GetMapInfo(i));
			var ^CMapData pxMapData=new CMapData;			
			pxMapData^.SetGameType(pxMapInfo^.GetGameType());
			var CIOPath xPath;
			xPath.Init(pxMapInfo^.GetFile());			
			pxMapData^.SetFileName(xPath.FilePart());
			pxMapData^.SetMapName(pxMapInfo^.GetMapName());
			pxMapData^.SetMapType(pxMapInfo^.GetMapType());
			var int iPlayers=pxMapInfo^.GetMaxPlayers();
			pxMapData^.SetPlayers(iPlayers);
			pxMapData^.SetDescription(pxMapInfo^.GetDescription());			
			pxMapData^.SetImage(pxMapInfo^.GetPreviewBitmap());
			pxMapData^.SetPlayedTime(pxMapInfo^.GetPlayedTime());
			pxMapData^.SetLevelCheckSumme(pxMapInfo^.GetLevelInfo().GetLevelCheckSumme());
			
			var string sFileName=pxMapData^.GetFileName();
			var int iDot=sFileName.FindRev('.');
			sFileName.Delete(iDot,sFileName.GetLength()-iDot);
			if(iPlayers!=0 && !sFileName.IsEmpty())then
				if(m_bLoadSave)then
					if(!pxMapInfo^.GetLevelInfo().IsMultiplayer())then // singleplayer
						pxMapData^.SetMapType("singleplayer");
						m_pxTabCampaign^.AddListEntry(sFileName,pxMapData);
					else
						pxMapData^.SetMapType("multiplayer");
						if(pxMapInfo^.GetLevelInfo().GetNumHumanPlayers()>1)then // multiplayer
							if(m_pxTabMultiplayer!=null)then
								m_pxTabMultiplayer^.AddListEntry(sFileName,pxMapData);
							endif;
						else // skirmish
							m_pxTabSkirmish^.AddListEntry(sFileName,pxMapData);
						endif;
					endif;
				else
					m_pxTabSaveGame^.AddListEntry(sFileName,pxMapData);
				endif;
			else
				delete pxMapData;
			endif;
		endfor;
		m_pxTabCampaign^.OnLevelSelect();
		if(m_pxTabMultiplayer!=null)then
			m_pxTabMultiplayer^.OnLevelSelect();
		endif;
		m_pxTabSkirmish^.OnLevelSelect();
		m_pxTabSaveGame^.Deselect();
		return(true);
	endproc;
	
	export proc void ResetDefButtons() //WT#663
		SetDefButtonOk(null);
		SetDefButtonCancel(null);
	endproc;
	
	export proc string GetReturnParam()
		return m_sParam;
	endproc;
	
	export proc void SetSortingMethod(bool p_bSortByFile)
		m_bSortByFile=p_bSortByFile;
		m_pxTabCampaign^.UpdateSorting(p_bSortByFile);
		m_pxTabSkirmish^.UpdateSorting(p_bSortByFile);
		if(m_pxTabMultiplayer!=null)then
			m_pxTabMultiplayer^.UpdateSorting(p_bSortByFile);
		endif;
		m_pxTabSaveGame^.UpdateSorting(p_bSortByFile);
	endproc;
endclass;
	
class CLoadSaveTabGame inherit CStaticCtrlEx
	
	var ^CLoadSaveGameMenu2		m_pxParent;
	var bool					m_bLoadSave;
	
	var ^CList					m_pxSaveGameList;
	var ^CStaticCtrl			m_pxLevelName;
	var ^CStaticCtrl			m_pxLevelDate;
	var ^CStaticCtrl			m_pxLevelPlayedTime;
	var ^CMenuButton 			m_pxLoadSaveBtn;
	var ^CMenuButton 			m_pxDeleteBtn;
	var ^CEdit					m_pxGameNameEdit;
	var ^CStaticCtrlEx			m_pxPreviewImage;
	var ^CStaticCtrlEx			m_pxBackgroundImage;
	var string					m_sLevelName;
	var string					m_sMapType;
	var ^CRadioButton			m_pxSortByFile;
	var ^CRadioButton			m_pxSortByDate;
	
	static var string 			ms_sBackgroundPic_MP;
	static var string 			ms_sBackgroundPic_SP;
	
	export constructor(^CLoadSaveGameMenu2 p_pxParent)
		ms_sBackgroundPic_MP = CClientWrap.GetUrsRelPath()+"/Data/Base/UI/menue/decoration/levelimage_background_mp.tga";
		ms_sBackgroundPic_SP = CClientWrap.GetUrsRelPath()+"/Data/Base/UI/menue/decoration/levelimage_background.tga";
		m_pxParent = p_pxParent;
		if(m_pxParent==null)then
			return;
		endif;
		if(!InitFromResource("UI/LoadGameMenu","LoadGameMenu_Tab_Game")) then
			return;
		endif;
		m_pxSaveGameList=cast<CList>(GetControl("SaveGameList"));
		m_pxSaveGameList^.m_xOnSelect=OnLevelSelect;
		m_pxLoadSaveBtn=cast<CMenuButton>(GetControl("LoadGameButton"));
		m_pxDeleteBtn = cast<CMenuButton>(GetControl("DeleteGameButton"));
		m_pxDeleteBtn^.m_xOnClick=OnAskForDeletion;
		m_pxLevelName=cast<CStaticCtrl>(GetControl("NameStatic"));
		m_pxLevelDate=cast<CStaticCtrl>(GetControl("DateStatic"));
		m_pxLevelPlayedTime=cast<CStaticCtrl>(GetControl("PlayedTimeStatic"));
		m_pxGameNameEdit=cast<CEdit>(GetControl("GameNameEdit"));
		m_pxBackgroundImage=cast<CStaticCtrlEx>(GetControl("ImageBackground"));
		m_pxPreviewImage=cast<CStaticCtrlEx>(GetControl("ImageBackground/PreviewImage"));
		m_pxBackgroundImage^.SetBitmap(ms_sBackgroundPic_MP);
		m_pxSortByFile=cast<CRadioButton>(GetControl("SortFile"));
		m_pxSortByFile^.SetSelected(true);
		m_pxSortByFile^.m_xOnChange=OnChangeSorting;
		m_pxSortByDate=cast<CRadioButton>(GetControl("SortDate"));
		m_pxSortByDate^.m_xOnChange=OnChangeSorting;
	endconstructor;
	
	export destructor()
	enddestructor;
	
	export proc bool Init(bool p_bLoadSave)
		m_bLoadSave=p_bLoadSave;
		m_pxGameNameEdit^.SetReadOnly(m_bLoadSave);
		if(m_bLoadSave)then
			m_pxLoadSaveBtn^.SetText(CLocalizer.Get().Translate("_UI_LoadGame_Button_Load"));
			m_pxLoadSaveBtn^.m_xOnClick=OnLoad;
		else
			m_pxLoadSaveBtn^.SetText(CLocalizer.Get().Translate("_UI_LoadGame_Button_Save"));
			m_pxLoadSaveBtn^.m_xOnClick=OnSave;
		endif;
		if(m_bLoadSave==false)then
			m_pxGameNameEdit^.SetText(CLocalizer.Get().Translate("_UI_LoadGame_Label_GameName"));
			CWindowMgr.Get().BringWindowToTop(m_pxGameNameEdit,true);			
			m_pxGameNameEdit^.SetSelection(0,m_pxGameNameEdit^.GetText().GetLength());
			m_pxSaveGameList^.Select(-1);
		endif;
		return true;
	endproc;
	
	export proc void Deselect()
		m_pxSaveGameList^.Select(-1);
	endproc;
	
	export proc bool OnLevelSelect()
		//Disable buttons if list is empty.
		var int iSelItem=m_pxSaveGameList^.GetSelectedItem();
		m_pxLoadSaveBtn^.SetDisabled(m_bLoadSave&&iSelItem==-1);
		m_pxDeleteBtn^.SetDisabled(iSelItem==-1);
		var string sName;
		var string sDate;
		var string sPlayedTime;
		var CBitmapPtr pxImage;
		if(iSelItem!=-1) then 
			var ^CMapData pxItemData=cast<CMapData>(m_pxSaveGameList^.GetItemData(iSelItem));
			if(pxItemData!=null) then 
				if(pxItemData^.GetMapType()=="singleplayer")then
					m_pxBackgroundImage^.SetBitmap(ms_sBackgroundPic_SP);
				else
					m_pxBackgroundImage^.SetBitmap(ms_sBackgroundPic_MP);
				endif;
				sName=pxItemData^.GetMapName();
				m_sLevelName=sName;
				sName = CLocalizer.Get().Translate(sName);
				m_sMapType=pxItemData^.GetMapType();
				//03h 25m played
				var int iTotalMin=pxItemData^.GetPlayedTime().GetSecondsF().ToInt()/60;
				var int iHour=iTotalMin/60;
				var int iMin=iTotalMin%60;
				sPlayedTime=CUIMgr.GetLocalizedNewstickerMsg("_UI_LoadGame_Label_TimePlayed\t"+iHour.ToReal().ToString("02.0")+"\t"+iMin.ToReal().ToString("02.0"));
				var ^CUserProfileList pxList = ^(CClientWrap.GetUserProfileList());
				var string sPath=pxList^.GetSaveGamePath();
				var Filesystem.CFileAttributes xFileAttribs;
				if(xFileAttribs.GetFromFile(sPath+pxItemData^.GetFileName()))then
					var string sDateFormat = CLocalizer.Get().Translate("_DATE_FORMAT");
					var string sTimeFormat = CLocalizer.Get().Translate("_TIME_FORMAT");
					sDate = xFileAttribs.m_xTimeWrite.ToFormatString(sDateFormat+" "+sTimeFormat);
					var string sFileName=pxItemData^.GetFileName();
					var int iDot=sFileName.FindRev('.');
					sFileName.Delete(iDot,sFileName.GetLength()-iDot);
					m_pxGameNameEdit^.SetText(sFileName);
					pxImage=pxItemData^.GetImage();
				endif;
			endif;
		endif;
		m_pxLevelName^.SetText(sName);
		m_pxLevelDate^.SetText(sDate);
		m_pxLevelPlayedTime^.SetText(sPlayedTime);
		m_pxPreviewImage^.SetBitmap(pxImage);
		return true;
	endproc;
	
	proc bool OnAskForDeletion()
		if(m_pxSaveGameList^.GetSelectedItem()==(-1))then
			return(false);
		else
			CMessageBox.MsgBox_YESNO(CLocalizer.Get().Translate("_UI_LoadSaveMenu_SaveGameDelete_Caption"),CLocalizer.Get().Translate("_UI_LoadSaveMenu_SaveGameDelete_Text"),CMessageBox.SMB_ICONQUESTION,OnQuitMsgBox_CallBack_Delete);
		endif;
		return true;
	endproc;
	
	proc void OnQuitMsgBox_CallBack_Delete(int p_iResult)
		var bitset dwResult = Math.IntToBitset(p_iResult);
		if(dwResult==CMessageBox.SID_YES)then
			var ^CMapData pxItemData;
			var int iSelItem=m_pxSaveGameList^.GetSelectedItem();
			if(iSelItem!=-1) then 
				var ^CMapData pxItemData=cast<CMapData>(m_pxSaveGameList^.GetItemData(iSelItem));
				if(pxItemData!=null) then
					var ^CUserProfileList pxList = ^(CClientWrap.GetUserProfileList());
					var string sPath = pxList^.GetSaveGamePath();
					var string sFile=sPath+pxItemData^.GetFileName();
					if(!Filesystem.Delete(sFile))then
						KLog.LogError("LoadGameMenu","Could not delete: "+sFile);
						return;
					endif;
					m_pxSaveGameList^.DeleteItem(iSelItem);
					m_pxGameNameEdit^.SetText("");
					m_pxSaveGameList^.Select(iSelItem);
					delete pxItemData;
				endif;
			endif;
		endif;
	endproc;
	
	proc void OnQuitMsgBox_CallBack_Overwrite(int p_iResult)
		var bitset dwResult = Math.IntToBitset(p_iResult);
		if(dwResult==CMessageBox.SID_YES)then
			m_pxParent^.ResetDefButtons();
			if(m_pxGameNameEdit^.GetText()=="")then return();endif;
			var ^CUserProfileList pxList = ^(CClientWrap.GetUserProfileList());
			var string sPath=pxList^.GetSaveGamePath()+m_pxGameNameEdit^.GetText()+".ula";
			CEvt_SaveLevel.Send(sPath);
			if(CGameWrap.GetClient().GetLevelInfo().GetNumHumanPlayers()>1)then
				CFeedback.Print("_NT_MPSavedGame");
			else
				CFeedback.Print("_NT_GAMESAVED");
			endif;
			m_pxGameNameEdit^.SetText("");
			m_pxParent^.OnBack();
		endif;
	endproc;
	
	export proc void ClearFileList(bool p_bDeleteItemData)
		if(p_bDeleteItemData)then
			var int i,iC=m_pxSaveGameList^.NumItems();
			for(i=0)cond(i<iC)iter(i++)do
				var ^CItemData pxWalk=m_pxSaveGameList^.GetItemData(i);
				if(pxWalk!=null)then
					delete pxWalk;
				endif;
			endfor;
		endif;
		m_pxSaveGameList^.Clear();
	endproc;
	
	export proc void AddListEntry(string p_sFileName, ^CMapData p_pxMapData)
		if(p_pxMapData==null)then return; endif;
		var int iItemIdx=m_pxSaveGameList^.AddItem(p_sFileName);
		m_pxSaveGameList^.SetItemData(iItemIdx,p_pxMapData);
	endproc;
	
	proc bool OnLoad()
		CSoundMgrCln.SetGameIsRunning(false);
		CUIStateMgr.Get().InvalidateLoadScreenInfo();
		if(!CClientWrap.HasServer())then
			var int iSelItem=m_pxSaveGameList^.GetSelectedItem();
			if(iSelItem!=-1) then 
				var ^CMapData pxItemData=cast<CMapData>(m_pxSaveGameList^.GetItemData(iSelItem));
				if(pxItemData!=null) then
					CUIStateMgr.Get().SetLoadScreenInfo(CUIStateMgr.CLoadScreenInfo.LOADSCR_SAVEGAME,pxItemData^.GetMapName(),pxItemData^.GetLevelCheckSumme());
				endif;
			endif;
			CUIStateMgr.Get().ShowLoadingScreen("StartingServerAndStartingGame",CUIStateMgr.STATE_LOADGAMEMENU);
		else
			if(CUIStateMgr.Get().GetState()==CUIStateMgr.STATE_LOADGAMEMENU)then
				var int iLoadWindowState=CUIStateMgr.Get().GetLoadWindowState();
				if(iLoadWindowState==CUIStateMgr.STATE_GAMEMENU || iLoadWindowState==CUIStateMgr.STATE_GAMEEND)then
					CUIStateMgr.Get().GetInGameScreen()^.SetGameActive(false);
					var ^CUserProfileList pxList = ^(CClientWrap.GetUserProfileList());
					var string sPath = pxList^.GetSaveGamePath();
					var int iSelItem=m_pxSaveGameList^.GetSelectedItem();
					if(iSelItem!=-1)then
						var ^CMapData pxItemData=cast<CMapData>(m_pxSaveGameList^.GetItemData(iSelItem));
						if(pxItemData!=null) then
							CUIStateMgr.Get().SetLoadScreenInfo(CUIStateMgr.CLoadScreenInfo.LOADSCR_SAVEGAME,pxItemData^.GetMapName(),pxItemData^.GetLevelCheckSumme());
							CUIStateMgr.Get().ShowLoadingScreen("StartingGame",CUIStateMgr.STATE_INGAME);
							var string sFile=sPath+pxItemData^.GetFileName();
							CEvt_LoadLevelPreview.Send(sFile);
							CGameWrap.GetGame().SetAttrib("NewGame",0);
							CEvt_StartGame.Send();
						endif;
					endif;
				else
					OnLoadEnd();
				endif;
			else
				OnLoadEnd();
			endif;
		endif;
		return true;
	endproc;
	
	export proc bool OnLoadEnd()
		var int iSelItem=m_pxSaveGameList^.GetSelectedItem();
		if(iSelItem==-1) then return true; endif;
		var ^CMapData pxItemData=cast<CMapData>(m_pxSaveGameList^.GetItemData(iSelItem));
		if(pxItemData==null) then return true; endif;
		var ^CUserProfileList pxList = ^(CClientWrap.GetUserProfileList());
		var string sPath=pxList^.GetSaveGamePath();
		var string sFile=sPath+pxItemData^.GetFileName();
		CEvt_LoadLevelPreview.Send(sFile);
		CEvt_StartGame.Send();
		CUIStateMgr.Get().SetState(CUIStateMgr.STATE_INGAME);
		return true;
	endproc;
	
	proc bool OnSave()
		var bool bCheck=false;
		var int i,iC=m_pxSaveGameList^.NumItems();
		for(i=0)cond(i<iC)iter(i++)do
			if(m_pxSaveGameList^.GetItem(i)==m_pxGameNameEdit^.GetText())then
				bCheck=true;
				break;
			endif;
		endfor;
		if(bCheck)then
			CMessageBox.MsgBox_YESNO(CLocalizer.Get().Translate("_UI_LoadSaveMenu_SaveGameOverwrite_Caption"),CLocalizer.Get().Translate("_UI_LoadSaveMenu_SaveGameOverwrite_Text"),CMessageBox.SMB_ICONQUESTION,OnQuitMsgBox_CallBack_Overwrite);			
		else
			OnQuitMsgBox_CallBack_Overwrite(CMessageBox.SID_YES.ToInt());
		endif;
		return true;
	endproc;
	
	export proc ^CMenuButton GetOKButton()
		return m_pxLoadSaveBtn;
	endproc;
	
	export proc void SetFocusToEdit()
		CWindowMgr.Get().BringWindowToTop(m_pxGameNameEdit,true);
	endproc;
	
	export proc void SetFocusToList()
		CWindowMgr.Get().BringWindowToTop(m_pxSaveGameList,true);
	endproc;
	
	export proc bool OnChangeSorting()
		if(m_pxParent!=null)then
			if(m_pxSortByFile^.GetSelected())then
				m_pxParent^.SetSortingMethod(true);
			else
				m_pxParent^.SetSortingMethod(false);
			endif;
			m_pxParent^.UpdateFileLists();
		endif;
		return true;
	endproc;
	
	export proc void UpdateSorting(bool p_bSortByFile)
		if(p_bSortByFile)then
			m_pxSortByFile^.SetSelected(true);
			m_pxSortByDate^.SetSelected(false);
		else
			m_pxSortByFile^.SetSelected(false);
			m_pxSortByDate^.SetSelected(true);
		endif;
	endproc;
endclass;

class CLoadSaveTabReplay inherit CStaticCtrlEx
	
	var ^CLoadSaveGameMenu2		m_pxParent;
	var bool									m_bLoadSave;

	var ^CList								m_pxSaveGameList;
	var ^CMenuButton					m_pxLoadSaveBtn;
	var ^CMenuButton					m_pxDeleteBtn;
	var ^CEdit								m_pxGameNameEdit;
	
	export constructor(^CLoadSaveGameMenu2 p_pxParent)
		m_pxParent = p_pxParent;
		if(m_pxParent==null)then
			return;
		endif;
		if(!InitFromResource("UI/LoadGameMenu","LoadGameMenu_Tab_Replay")) then
			return;
		endif;
		m_pxSaveGameList=cast<CList>(GetControl("SaveGameList"));
		m_pxSaveGameList^.m_xOnSelect=OnLevelSelect;
		m_pxLoadSaveBtn=cast<CMenuButton>(GetControl("LoadGameButton"));
		m_pxDeleteBtn = cast<CMenuButton>(GetControl("DeleteGameButton"));
		m_pxDeleteBtn^.m_xOnClick=OnAskForDeletion;
		m_pxGameNameEdit=cast<CEdit>(GetControl("GameNameEdit"));
	endconstructor;
	
	export destructor()
	enddestructor;
	
	export proc bool Init(bool p_bLoadSave)
		m_bLoadSave=p_bLoadSave;
		if(m_bLoadSave)then
			m_pxLoadSaveBtn^.SetText(CLocalizer.Get().Translate("_UI_LoadGame_Button_Load"));
			m_pxLoadSaveBtn^.m_xOnClick=OnLoad;
		else
			m_pxLoadSaveBtn^.SetText(CLocalizer.Get().Translate("_UI_LoadGame_Button_Save"));
			m_pxLoadSaveBtn^.m_xOnClick=OnSave;
		endif;
		UpdateFileList();
		if(m_bLoadSave==false)then
			m_pxGameNameEdit^.SetText(CLocalizer.Get().Translate("_UI_LoadGame_Tab_Replay"));
			CWindowMgr.Get().BringWindowToTop(m_pxGameNameEdit,true);
			m_pxGameNameEdit^.SetSelection(0,m_pxGameNameEdit^.GetText().GetLength());
			m_pxSaveGameList^.Select(-1);
		endif;
		return true;
	endproc;
	
	proc bool OnAskForDeletion()
		if(m_pxSaveGameList^.GetSelectedItem()==(-1))then
			return(false);
		else
			CMessageBox.MsgBox_YESNO(CLocalizer.Get().Translate("_UI_LoadSaveMenu_SaveGameDelete_Caption"),CLocalizer.Get().Translate("_UI_LoadSaveMenu_SaveGameDelete_Text"),CMessageBox.SMB_ICONQUESTION,OnQuitMsgBox_CallBack_Delete);
		endif;
		return true;
	endproc;
	
	proc void OnQuitMsgBox_CallBack_Delete(int p_iResult)
		var bitset dwResult = Math.IntToBitset(p_iResult);
		if(dwResult==CMessageBox.SID_YES)then
			var int iSelItem=m_pxSaveGameList^.GetSelectedItem();
			if(iSelItem!=-1) then 
				var ^CItemDataString pxItemData=cast<CItemDataString>(m_pxSaveGameList^.GetItemData(iSelItem));
				if(pxItemData!=null) then
					var ^CUserProfileList pxList = ^(CClientWrap.GetUserProfileList());
					var string sPath=pxList^.GetReplayPath();
					var string sFile=sPath+pxItemData^.m_sData;
					if(!Filesystem.Delete(sFile))then
						KLog.LogError("LoadGameMenu","Could not delete: "+sFile);
						return;
					endif;
					delete pxItemData;
					m_pxSaveGameList^.DeleteItem(iSelItem);
					m_pxGameNameEdit^.SetText("");
					m_pxSaveGameList^.Select(iSelItem);
				endif;
			endif;
		endif;
	endproc;
	
	proc void OnQuitMsgBox_CallBack_Overwrite(int p_iResult)
		var bitset dwResult = Math.IntToBitset(p_iResult);
		if(dwResult==CMessageBox.SID_YES)then
			m_pxParent^.ResetDefButtons();
			if(m_pxGameNameEdit^.GetText()=="")then return();endif;
			var ^CUserProfileList pxList = ^(CClientWrap.GetUserProfileList());
			var string sPath=pxList^.GetReplayPath();
			var string sFileName=sPath+m_pxGameNameEdit^.GetText()+".rpl";
			CEvt_SaveReplay.Send(sFileName);
			m_pxGameNameEdit^.SetText("");
			m_pxParent^.OnBack();
		endif;
	endproc;
	
	proc void ClearFileList()
		var int i,iC=m_pxSaveGameList^.NumItems();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CItemData pxWalk=m_pxSaveGameList^.GetItemData(i);
			delete pxWalk;
		endfor;
		m_pxSaveGameList^.Clear();
	endproc;
	
	proc bool UpdateFileList()
		ClearFileList();
		var ^CUserProfileList pxList = ^(CClientWrap.GetUserProfileList());
		var string sPath=pxList^.GetReplayPath();
		var Filesystem.CFileList xFileList;
		xFileList.ReadListEx(sPath,"*.rpl",false,false);
		var int i,iC=xFileList.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var string sReplayName = xFileList[i].m_sName;
			var int iExtensionPos = sReplayName.GetLength()-4;
			if(iExtensionPos>-1)then
				sReplayName = sReplayName.Left(iExtensionPos);
			endif;
			var ^CItemDataString pxData = new CItemDataString(xFileList[i].m_sName);
			var int iItemIdx=m_pxSaveGameList^.AddItem(sReplayName);
			m_pxSaveGameList^.SetItemData(iItemIdx,pxData);
		endfor;
		OnLevelSelect();
		return true;
	endproc;
	
	export proc bool OnLevelSelect()
		//Disable buttons if list is empty.
		var int iSelItem=m_pxSaveGameList^.GetSelectedItem();
		m_pxLoadSaveBtn^.SetDisabled(m_bLoadSave&&iSelItem==-1);
		m_pxDeleteBtn^.SetDisabled(iSelItem==-1);
		var string sName;
		var string sDate;
		var string sPlayedTime;
		var CBitmapPtr pxImage;
		if(iSelItem!=-1) then
			var ^CItemDataString pxItemData=cast<CItemDataString>(m_pxSaveGameList^.GetItemData(iSelItem));
			if(pxItemData!=null) then 
				var ^CUserProfileList pxList = ^(CClientWrap.GetUserProfileList());
				var string sPath=pxList^.GetReplayPath();
				var Filesystem.CFileAttributes xFileAttribs;
				if(xFileAttribs.GetFromFile(sPath+pxItemData^.m_sData))then
					var string sDateFormat = CLocalizer.Get().Translate("_DATE_FORMAT");
					var string sTimeFormat = CLocalizer.Get().Translate("_TIME_FORMAT");
					sDate = xFileAttribs.m_xTimeWrite.ToFormatString(sDateFormat+" "+sTimeFormat);
					
					var string sFileName=pxItemData^.m_sData;
					var int iDot=sFileName.FindRev('.');
					sFileName.Delete(iDot,sFileName.GetLength()-iDot);
					m_pxGameNameEdit^.SetText(sFileName);
				endif;
			endif;
		endif;
		return true;
	endproc;
	
	proc bool OnLoad()
		CSoundMgrCln.SetGameIsRunning(false);
		CUIStateMgr.Get().InvalidateLoadScreenInfo();
		if(!CClientWrap.HasServer())then
			var int iSelItem=m_pxSaveGameList^.GetSelectedItem();
			CUIStateMgr.Get().ShowLoadingScreen("StartingServerAndStartingGame",CUIStateMgr.STATE_LOADGAMEMENU);
		else
			if(CUIStateMgr.Get().GetState()==14)then
				if(CUIStateMgr.Get().GetLoadWindowState()==CUIStateMgr.STATE_GAMEMENU)then
					CUIStateMgr.Get().GetInGameScreen()^.SetGameActive(false);
					var int iSelItem=m_pxSaveGameList^.GetSelectedItem();
					if(iSelItem!=-1) then 
						var ^CItemDataString pxItemData=cast<CItemDataString>(m_pxSaveGameList^.GetItemData(iSelItem));
						if(pxItemData!=null) then
							CUIStateMgr.Get().InvalidateLoadScreenInfo();
							CUIStateMgr.Get().ShowLoadingScreen("StartingGame",CUIStateMgr.STATE_INGAME);
							var ^CUserProfileList pxList = ^(CClientWrap.GetUserProfileList());
							var string sPath=pxList^.GetReplayPath();
							var string sFile=sPath+pxItemData^.m_sData;
							CEvt_LoadReplay.Send(sFile);
						endif;
					endif;
				else
					OnLoadEnd();
				endif;
			else
				OnLoadEnd();
			endif;
		endif;
		return true;
	endproc;
	
	export proc bool OnLoadEnd()
		var int iSelItem=m_pxSaveGameList^.GetSelectedItem();
		if(iSelItem==-1) then return true; endif;
		var ^CItemDataString pxItemData=cast<CItemDataString>(m_pxSaveGameList^.GetItemData(iSelItem));
		if(pxItemData==null) then return true; endif;
		var ^CUserProfileList pxList = ^(CClientWrap.GetUserProfileList());
		var string sPath=pxList^.GetReplayPath();
		var string sFile=sPath+pxItemData^.m_sData;
		CEvt_LoadReplay.Send(sFile);
		CUIStateMgr.Get().SetState(CUIStateMgr.STATE_INGAME);
		return true;
	endproc;
	
	proc bool OnSave()
		var bool bCheck=false;
		var int i,iC=m_pxSaveGameList^.NumItems();
		for(i=0)cond(i<iC)iter(i++)do
			if(m_pxSaveGameList^.GetItem(i)==m_pxGameNameEdit^.GetText())then
				bCheck=true;
				break;
			endif;
		endfor;
		if(bCheck)then
			CMessageBox.MsgBox_YESNO(CLocalizer.Get().Translate("_UI_LoadSaveMenu_SaveGameOverwrite_Caption"),CLocalizer.Get().Translate("_UI_LoadSaveMenu_SaveGameOverwrite_Text"),CMessageBox.SMB_ICONQUESTION,OnQuitMsgBox_CallBack_Overwrite);			
		else
			OnQuitMsgBox_CallBack_Overwrite(CMessageBox.SID_YES.ToInt());
		endif;
		return true;
	endproc;
	
	export proc ^CMenuButton GetOKButton()
		return m_pxLoadSaveBtn;
	endproc;
	
	export proc void SetFocusToEdit()
		CWindowMgr.Get().BringWindowToTop(m_pxGameNameEdit,true);
	endproc;
	
	export proc void SetFocusToList()
		CWindowMgr.Get().BringWindowToTop(m_pxSaveGameList,true);
	endproc;
	
endclass;
