
class CMirageServer inherit CWindow
	
	export constructor()
		Init();
	endconstructor;
	
	export proc void Init()
		if(!InitFromResource("UI/MirageSettings","MirageServer"))then return; endif;
		//var ^CStaticCtrl pxStatic;
		var ^CGame pxGame = ^(CGameWrap.GetGame());
		var CConfig xConf;
//		var ^CCheckBox pxCheckBox;
//		var ^CDropList pxDrop;
//		var ^CSpinCtrlNumber pxSpinCtrl;
		var ^CButton pxButton;
//		var string sName, sParam;
//		var bool bEnabled, bAllow;
//		var int iSetting, iDef, iStep, k, iK;
		pxGame^.SetAttrib("NewGame",1);
//		pxGame^.SetAttrib("NotReplay",1);
		pxGame^.SetAttrib("CheatsEnabled",xConf.GetB("Game/EnableCheats",false));
		pxGame^.SetAttrib("OverlordHost",xConf.GetB("Game/BigBro",false));
		
		pxButton = cast<CButton>(GetControl("WorldButton"));
		pxButton^.m_xOnClick=OnWorld;
		
		pxButton = cast<CButton>(GetControl("BuildingButton"));
		pxButton^.m_xOnClick=OnBuilding;
		
		pxButton = cast<CButton>(GetControl("UnitButton"));
		pxButton^.m_xOnClick=OnUnit;
		
		pxButton = cast<CButton>(GetControl("GameMechanicButton"));
		pxButton^.m_xOnClick=OnGameMechanic;
		
		pxButton = cast<CButton>(GetControl("TimerButton"));
		pxButton^.m_xOnClick=OnTime;
		
		pxButton = cast<CButton>(GetControl("PhantomModeButton"));
		pxButton^.m_xOnClick=OnPhantomMode;
		
		SetDefaultStuff();
		OnChangePhantomMode();
	endproc;
	
	export proc bool SetDefaultStuff()
		var CConfig xConf;
		var ^CGame pxGame = ^(CGameWrap.GetGame());
		var string sName, sParam;
		var bool bEnabled;
		var bool bSteal;
		var int iSetting, iDef, iStep, k, iK;
		
		sName="FruitsRemovement";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="NestRespawn";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="AnimalsVisInFOW";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="ShowResourcesInFOW";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="ResourcesUnlimited";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="UnitResources";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="CorpseDamage";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="BuildingBurndown";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="BuildingCancellation";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="WarpInvisible";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="Portals";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false)&&pxGame^.GetDisableWarpgate();
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="EarlyTransport";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="FlyingEnabled";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="TitanSlots";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="RemoveTitans";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="RemoveTrading";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="PerfectArmor";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="BonusSkulls";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="HeroPool";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="FreeSpecials";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="HeroGratis";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="UseSupply";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="TreasureSharing";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false)&&pxGame^.GetDiplomacyLocked();
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="UseFM";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="BldgMaxCapacity";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="AllyBuildup";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,true);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="DominationContinue";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="CustomTime";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="ExternalUnpause";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="SpeedUp";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="AllowThrow";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,true);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="UseOldSpirits";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="GlobalReanim";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="ExcludeBuildUp";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="AttackInFOW";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="OldDisembark";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,true);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="AuraSharing";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,true);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="DivideSkulls";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="DeliveryUnbound";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="DisableArtifactRelease";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="ObserverChat";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="NoHumpWalking";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="InfantryWar";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="ManaEnabled";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="TechtreeSteal";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		bSteal=bEnabled;
		
		sName="MultiTribe";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		bEnabled=bEnabled&&bSteal;
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="GeneralAdvancement";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		bEnabled=bEnabled&&bSteal;
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="AlienCommands";
		bEnabled=xConf.GetSetB("Server/AllowAlienCommands",false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="PauseLimit";
		k=-1; iK=50; iStep=1; iDef=3;
		iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
		pxGame^.SetAttrib(sName,iSetting);
		
		sName="DwnLvlSwitch";
		iK=4; iDef=0;
		iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK-1);
		pxGame^.SetAttrib(sName,iSetting);
		
		sName="TransportHealing";
		k=0; iK=100; iStep=10; iDef= 60;
		iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
		pxGame^.SetAttrib(sName,iSetting);
		
		sName="MinEpoch";
		k=1; iK=6; iStep=1; iDef=1;
		iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
		pxGame^.SetAttrib(sName,iSetting);
		
		sName="MaxEpoch";
		k=1; iK=6; iStep=1; iDef=5;
		iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
		pxGame^.SetAttrib(sName,iSetting);
		
		sName="StartHour";
		k=0; iK=23; iStep=1; iDef=8;
		iSetting=Math.Clamp(xConf.GetSetI("Game/MPSettings/"+sName,iDef),k,iK);
		sParam=iSetting.ToString()+":";
		
		sName="StartMin";
		k=0; iK=59; iStep=1; iDef=30;
		iSetting=Math.Clamp(xConf.GetSetI("Game/MPSettings/"+sName,iDef),k,iK);
		sParam+=iSetting.ToString()+":";
		
		sName="StartSec";
		k=0; iK=59; iStep=1; iDef=0;
		iSetting=Math.Clamp(xConf.GetSetI("Game/MPSettings/"+sName,iDef),k,iK);
		sParam+=iSetting.ToString();
		pxGame^.SetAttrib("VirtualTime",sParam);
		
		sName="WarpGateTimer";
		k=0; iK=15; iStep=1; iDef=5;
		iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
		pxGame^.SetAttrib(sName,iSetting);
		
		sName="HQTimer";
		k=-1; iK=15; iStep=1; iDef=5;
		iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
		pxGame^.SetAttrib(sName,iSetting);
		
		sName="DominationUpDownTimer";
		k=1; iK=25; iStep=1; iDef=10;
		iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
		pxGame^.SetAttrib(sName,iSetting);
		
		sName="SandGlass";
		k=0; iK=2880; iStep=5; iDef=0;
		iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
		pxGame^.SetAttrib(sName,iSetting);
		
		return(true);
	endproc;
	
	export proc bool OnChangePhantomMode()
		var string sName="PhantomMode";
		var CConfig xConf;
		var ^CGame pxGame = ^(CGameWrap.GetGame());
		var bool bOn=pxGame^.GetAttribInt(sName)==1||xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		var bool bDeny = pxGame^.GetAttribInt("GameType")!=0 || pxGame^.GetDiplomacyLocked() || CMultiPlayerClientMgr.Get().GetNumPlayers()<3;
		var bool bEnabled, bRandom;
		var int iC, iD;
		if(bDeny)then
			bOn=false;
		endif;
		xConf.SetB("Server/GameplayOptions/"+sName, bOn);
		pxGame^.SetAttrib(sName,bOn);
		
		sName="RandomRoles";
		bRandom=xConf.GetB("Server/GameplayOptions/"+sName, false);
		pxGame^.SetAttrib(sName,bRandom);
		
		sName="SeerPlayer";
		bEnabled=xConf.GetB("Server/GameplayOptions/"+sName, false);
		if(!bRandom)then
			xConf.SetB("Server/GameplayOptions/"+sName,false);
			bEnabled=false;
		endif;
		pxGame^.SetAttrib(sName,bEnabled);
		
		// Henry: validate numbers
		var int iSetting, iDef, k, iK, iMid, iAll=CMultiPlayerClientMgr.Get().GetNumPlayers();
//		if(iAll<=0)then
//			iAll=CClientWrap.GetUserProfileValueI("Multiplayer/NumPlayers",2);
//		endif;
		iMid=iAll/2;
		sName="ConquerorNumber";
		k=1; iK=4; iDef=1;
		iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,Math.Min(iK,iMid));
		iAll-=iSetting;
		iC=iSetting;
		xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
		pxGame^.SetAttrib(sName,iSetting);
		
		sName="PaladinNumber";
		k=0; iK=5; iDef=0;
		iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,Math.Min(iK,Math.Min(iAll,iMid)));
		iAll-=iSetting;
		xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
		pxGame^.SetAttrib(sName,iSetting);
		
		sName="DefenderNumber";
		k=0; iK=7; iDef=3;
		iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,Math.Min(iK,Math.Min(iAll,iMid)));
		iAll-=iSetting;
		iD=iSetting;
		xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
		pxGame^.SetAttrib(sName,iSetting);
		
		sName="Revelation";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		if(!bRandom&&iC<2)then
			xConf.SetB("Server/GameplayOptions/"+sName,false);
			bEnabled=false;
		endif;
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="BloodBrothers";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="SoulKeepers";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		if(!bRandom&&iD<1)then
			xConf.SetB("Server/GameplayOptions/"+sName,false);
			bEnabled=false;
		endif;
		pxGame^.SetAttrib(sName,bEnabled);
		
		sName="PopulationBonus";
		bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
		pxGame^.SetAttrib(sName,bEnabled);
		
		return(true);
	endproc;
	
	export proc bool OnEnablePortalsEx()
		var string sName="Portals";
		var CConfig xConf;
		var ^CGame pxGame = ^(CGameWrap.GetGame());
		var bool bOn=pxGame^.GetAttribInt(sName)==1;
		var bool bAllow = pxGame^.GetDisableWarpgate();
		if(!bOn)then
			return true;
		elseif(!bAllow)then
			xConf.SetB("Server/GameplayOptions/"+sName, false);
			pxGame^.SetAttrib(sName,false);
		endif;
		return(true);
	endproc;
	
	export proc bool OnEnableTreasureSharingEx()
		var string sName="TreasureSharing";
		var CConfig xConf;
		var ^CGame pxGame = ^(CGameWrap.GetGame());
		var bool bOn=pxGame^.GetAttribInt(sName)==1;
		var bool bAllow = pxGame^.GetDiplomacyLocked();
		if(!bOn)then
			return true;
		elseif(!bAllow)then
			xConf.SetB("Server/GameplayOptions/"+sName, false);
			pxGame^.SetAttrib(sName,false);
		endif;
		return(true);
	endproc;
	
	export proc bool CheckPhantomModeEx()
		var string sName="PhantomMode";
		var CConfig xConf;
		var ^CGame pxGame = ^(CGameWrap.GetGame());
		var bool bOn=pxGame^.GetAttribInt(sName)==1;
		var bool bDeny = pxGame^.GetAttribInt("GameType")!=0 || pxGame^.GetDiplomacyLocked() || CMultiPlayerClientMgr.Get().GetNumPlayers()<3;
		if(!bOn)then
			return true;
		elseif(bDeny)then
			xConf.SetB("Server/GameplayOptions/"+sName, false);
			pxGame^.SetAttrib(sName,false);
		endif;
		return(true);
	endproc;
	
	proc bool OnWorld()
		var ^CMirageServer.CAdjustWorld pxTmp=new CMirageServer.CAdjustWorld();
		CClientWrap.GetDesktop()^.AddChild(pxTmp);
		CWindowMgr.Get().BringWindowToTop(pxTmp,true);
		CWindowMgr.Get().SetModal(pxTmp);
		return(true);
	endproc;
	
	proc bool OnBuilding()
		var ^CMirageServer.CAdjustBuilding pxTmp=new CMirageServer.CAdjustBuilding();
		CClientWrap.GetDesktop()^.AddChild(pxTmp);
		CWindowMgr.Get().BringWindowToTop(pxTmp,true);
		CWindowMgr.Get().SetModal(pxTmp);
		return(true);
	endproc;
	
	proc bool OnUnit()
		var ^CMirageServer.CAdjustUnit pxTmp=new CMirageServer.CAdjustUnit();
		CClientWrap.GetDesktop()^.AddChild(pxTmp);
		CWindowMgr.Get().BringWindowToTop(pxTmp,true);
		CWindowMgr.Get().SetModal(pxTmp);
		return(true);
	endproc;
	
	proc bool OnGameMechanic()
		var ^CMirageServer.CAdjustGameMechanic pxTmp=new CMirageServer.CAdjustGameMechanic();
		CClientWrap.GetDesktop()^.AddChild(pxTmp);
		CWindowMgr.Get().BringWindowToTop(pxTmp,true);
		CWindowMgr.Get().SetModal(pxTmp);
		return(true);
	endproc;
	
	proc bool OnTime()
		var ^CMirageServer.CAdjustTimer pxTmp=new CMirageServer.CAdjustTimer();
		CClientWrap.GetDesktop()^.AddChild(pxTmp);
		CWindowMgr.Get().BringWindowToTop(pxTmp,true);
		CWindowMgr.Get().SetModal(pxTmp);
		return(true);
	endproc;
	
	proc bool OnPhantomMode()
		var ^CMirageServer.CAdjustPhantomMode pxTmp=new CMirageServer.CAdjustPhantomMode();
		CClientWrap.GetDesktop()^.AddChild(pxTmp);
		CWindowMgr.Get().BringWindowToTop(pxTmp,true);
		CWindowMgr.Get().SetModal(pxTmp);
		return(true);
	endproc;
	
	class CAdjustWorld inherit CStateUIWnd;
		
		export constructor()
			if(!InitFromResource("UI/MirageSettings","AdjustWorld"))then
				return;
			endif;
			var CConfig xConf;
			var ^CGame pxGame = ^(CGameWrap.GetGame());
			var ^CCheckBox pxCheckBox;
			var ^CDropList pxDrop;
			var ^CSpinCtrlNumber pxSpinCtrl;
			var ^CButton pxButton;
			var string sName;
			var bool bEnabled;
			var int iSetting, iDef, iStep, k, iK;
			SetPos((CClientWrap.GetDesktop()^.GetSize().GetX()/2)-GetSize().GetX()/2,(CClientWrap.GetDesktop()^.GetSize().GetY()/2)-GetSize().GetY()/2);
			
			sName="FruitsRemovement";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableFruitsRemovement;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="NestRespawn";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableNestRespawn;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="AnimalsVisInFOW";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableAnimalsVisInFOW;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="ShowResourcesInFOW";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableShowResourcesInFOW;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="UnitResources";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableUnitResources;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="CorpseDamage";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableCorpseDamage;
			pxGame^.SetAttrib(sName,bEnabled);
			
			pxButton = cast<CButton>(GetControl("OkButton"));
			pxButton^.m_xOnClick=OnOk;
			
		endconstructor;
		
		proc bool OnEnableFruitsRemovement()
			var string sName="FruitsRemovement";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableNestRespawn()
			var string sName="NestRespawn";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		export proc bool OnEnableAnimalsVisInFOW()
			var string sName="AnimalsVisInFOW";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableShowResourcesInFOW()
			var string sName="ShowResourcesInFOW";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableUnitResources()
			var string sName="UnitResources";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableCorpseDamage()
			var string sName="CorpseDamage";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnOk()
			Destroy();
			return(true);
		endproc;
		
	endclass;
	
	class CAdjustBuilding inherit CStateUIWnd;
		
		export constructor()
			if(!InitFromResource("UI/MirageSettings","AdjustBuilding"))then
				return;
			endif;
			var CConfig xConf;
			var ^CGame pxGame = ^(CGameWrap.GetGame());
			var ^CCheckBox pxCheckBox;
			var ^CDropList pxDrop;
			var ^CSpinCtrlNumber pxSpinCtrl;
			var ^CButton pxButton;
			var string sName;
			var bool bEnabled, bAllow;
			var int iSetting, iDef, iStep, k, iK;
			SetPos((CClientWrap.GetDesktop()^.GetSize().GetX()/2)-GetSize().GetX()/2,(CClientWrap.GetDesktop()^.GetSize().GetY()/2)-GetSize().GetY()/2);
			
			sName="BuildingBurndown";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableBuildingBurndown;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="BuildingCancellation";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableBuildingCancellation;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="WarpInvisible";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableWarpInvisible;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="Portals";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			bAllow = pxGame^.GetDisableWarpgate();
			if(!bAllow)then
				pxCheckBox^.SetChecked(0);
				pxCheckBox^.SetDisabled(true);
			else
				if(bEnabled)then
					pxCheckBox^.SetChecked(1);
				else
					pxCheckBox^.SetChecked(0);
				endif;
				pxCheckBox^.SetDisabled(false);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnablePortals;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="BldgMaxCapacity";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableBldgMaxCapacity;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="AllyBuildup";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,true);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableAllyBuildup;
			pxGame^.SetAttrib(sName,bEnabled);
			
			pxButton = cast<CButton>(GetControl("OkButton"));
			pxButton^.m_xOnClick=OnOk;
			
		endconstructor;
		
		proc bool OnEnableBuildingBurndown()
			var string sName="BuildingBurndown";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableBuildingCancellation()
			var string sName="BuildingCancellation";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableWarpInvisible()
			var string sName="WarpInvisible";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		export proc bool OnEnablePortals()
			var string sName="Portals";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			var ^CGame pxGame = ^(CGameWrap.GetGame());
			var bool bAllow = pxGame^.GetDisableWarpgate();
			if(!bAllow)then
				pxTmp^.SetChecked(0);
				pxTmp^.SetDisabled(true);
			else
				pxTmp^.SetDisabled(false);
			endif;
			xConf.SetB("Server/GameplayOptions/"+sName, pxTmp^.GetCheckMark());
			pxGame^.SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		export proc bool OnEnableBldgMaxCapacity()
			var string sName="BldgMaxCapacity";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		export proc bool OnEnableAllyBuildup()
			var string sName="AllyBuildup";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnOk()
			Destroy();
			return(true);
		endproc;
		
	endclass;
	
	class CAdjustUnit inherit CStateUIWnd;
		
		export constructor()
			if(!InitFromResource("UI/MirageSettings","AdjustUnit"))then
				return;
			endif;
			var CConfig xConf;
			var ^CGame pxGame = ^(CGameWrap.GetGame());
			var ^CCheckBox pxCheckBox;
			var ^CDropList pxDrop;
			var ^CSpinCtrlNumber pxSpinCtrl;
			var ^CButton pxButton;
			var string sName;
			var bool bEnabled;
			var bool bSteal;
			var int iSetting, iDef, iStep, k, iK;
			SetPos((CClientWrap.GetDesktop()^.GetSize().GetX()/2)-GetSize().GetX()/2,(CClientWrap.GetDesktop()^.GetSize().GetY()/2)-GetSize().GetY()/2);
			
			sName="EarlyTransport";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableEarlyTransport;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="FlyingEnabled";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableFlyingEnabled;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="TitanSlots";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableTitanSlots;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="RemoveTitans";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableRemoveTitans;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="RemoveTrading";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableRemoveTrading;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="PerfectArmor";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnablePerfectArmor;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="BonusSkulls";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableBonusSkulls;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="FreeSpecials";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableFreeSpecials;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="HeroGratis";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableHeroGratis;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="TechtreeSteal";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			bSteal=bEnabled;
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableTechtreeSteal;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="MultiTribe";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false)&&bSteal;
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.SetDisabled(!bSteal);
			pxCheckBox^.m_xOnStateChange=OnEnableMultiTribe;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="GeneralAdvancement";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false)&&bSteal;
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.SetDisabled(!bSteal);
			pxCheckBox^.m_xOnStateChange=OnEnableGeneralAdvancement;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="NoHumpWalking";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableNoHumpWalking;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="InfantryWar";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableInfantryWar;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="ManaEnabled";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableManaEnabled;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="TransportHealing";
			k=0; iK=100; iStep=10; iDef= 60;
			pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetLimits(k,iK,iStep);
			pxSpinCtrl^.SetEditable(true);
			iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
			pxSpinCtrl^.SetValue(iSetting);
			pxSpinCtrl^.m_xOnChange=OnChangeTransportHealing;
			pxGame^.SetAttrib(sName,iSetting);
			
			pxButton = cast<CButton>(GetControl("OkButton"));
			pxButton^.m_xOnClick=OnOk;
			
		endconstructor;
		
		proc bool OnEnableEarlyTransport()
			var string sName="EarlyTransport";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableFlyingEnabled()
			var string sName="FlyingEnabled";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableTitanSlots()
			var string sName="TitanSlots";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableRemoveTitans()
			var string sName="RemoveTitans";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableRemoveTrading()
			var string sName="RemoveTrading";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnablePerfectArmor()
			var string sName="PerfectArmor";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableBonusSkulls()
			var string sName="BonusSkulls";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableFreeSpecials()
			var string sName="FreeSpecials";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableHeroGratis()
			var string sName="HeroGratis";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableTechtreeSteal()
			var string sName="TechtreeSteal";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			CheckMultiTribe(pxTmp^.GetCheckMark());
			CheckGeneralAdvancement(pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableMultiTribe()
			var string sName="MultiTribe";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool CheckMultiTribe(bool p_bSteal)
			var string sName="MultiTribe";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			var bool bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false)&&p_bSteal;
			if(!bEnabled)then
				xConf.SetB("Server/GameplayOptions/"+sName,false);
				pxTmp^.SetChecked(0);
			endif;
			pxTmp^.SetDisabled(!p_bSteal);
			CGameWrap.GetGame().SetAttrib(sName,bEnabled);
			return(true);
		endproc;
		
		proc bool OnEnableGeneralAdvancement()
			var string sName="GeneralAdvancement";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool CheckGeneralAdvancement(bool p_bSteal)
			var string sName="GeneralAdvancement";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			var bool bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false)&&p_bSteal;
			if(!bEnabled)then
				xConf.SetB("Server/GameplayOptions/"+sName,false);
				pxTmp^.SetChecked(0);
			endif;
			pxTmp^.SetDisabled(!p_bSteal);
			CGameWrap.GetGame().SetAttrib(sName,bEnabled);
			return(true);
		endproc;
		
		proc bool OnEnableNoHumpWalking()
			var string sName="NoHumpWalking";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableInfantryWar()
			var string sName="InfantryWar";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableManaEnabled()
			var string sName="ManaEnabled";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		export proc bool OnChangeTransportHealing()
			var string sName="TransportHealing";
			var ^CSpinCtrlNumber pxSpinCtrl = cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			var int iSetting = pxSpinCtrl^.GetValueInt();
			var CConfig xConf;
			xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
			CGameWrap.GetGame().SetAttrib(sName,iSetting);
			return(true);
		endproc;
		
		proc bool OnOk()
			Destroy();
			return(true);
		endproc;
		
	endclass;
	
	class CAdjustGameMechanic inherit CStateUIWnd;
		
		export constructor()
			if(!InitFromResource("UI/MirageSettings","AdjustGameMechanic"))then
				return;
			endif;
			var CConfig xConf;
			var ^CGame pxGame = ^(CGameWrap.GetGame());
			var ^CCheckBox pxCheckBox;
			var ^CDropList pxDrop;
			var ^CSpinCtrlNumber pxSpinCtrl;
			var ^CButton pxButton;
			var string sName;
			var bool bEnabled, bAllow;
			var int iSetting, iDef, iStep, k, iK;
			SetPos((CClientWrap.GetDesktop()^.GetSize().GetX()/2)-GetSize().GetX()/2,(CClientWrap.GetDesktop()^.GetSize().GetY()/2)-GetSize().GetY()/2);
			
			sName="ResourcesUnlimited";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableResourcesUnlimited;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="HeroPool";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableHeroPool;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="UseSupply";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableUseSupply;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="TreasureSharing";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			bAllow = pxGame^.GetDiplomacyLocked();
			if(!bAllow)then
				pxCheckBox^.SetChecked(0);
				pxCheckBox^.SetDisabled(true);
			else
				if(bEnabled)then
					pxCheckBox^.SetChecked(1);
				else
					pxCheckBox^.SetChecked(0);
				endif;
				pxCheckBox^.SetDisabled(false);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableTreasureSharing;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="UseFM";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableUseFM;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="AllowThrow";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,true);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableAllowThrow;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="UseOldSpirits";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableUseOldSpirits;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="GlobalReanim";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableGlobalReanim;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="ExcludeBuildUp";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableExcludeBuildUp;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="AttackInFOW";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableAttackInFOW;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="OldDisembark";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,true);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableOldDisembark;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="AuraSharing";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,true);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableAuraSharing;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="DivideSkulls";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableDivideSkulls;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="DeliveryUnbound";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableDeliveryUnbound;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="DisableArtifactRelease";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableDisableArtifactRelease;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="ObserverChat";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableObserverChat;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="DwnLvlSwitch";
			iK=4; iDef=0;
			pxDrop=cast<CDropList>(GetControl(sName+"Droplist"));
			for(k=0)cond(k<iK)iter(k++)do
				pxDrop^.AddItem(CLocalizer.Get().Translate("_MIRAGE_UI_MirageServer_"+sName+"_"+k.ToString()));
			endfor;
			k=0;
			iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK-1);
			if(pxDrop^.NumItems()>iSetting && pxDrop^.NumItems()>0)then
				pxDrop^.Select(iSetting);
			endif;
			pxDrop^.m_xOnChange=OnChangeDwnLvlSwitch;
			pxGame^.SetAttrib(sName,iSetting);
			
			sName="AlienCommands";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/AllowAlienCommands",false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableAlienCommands;
			pxGame^.SetAttrib(sName,bEnabled);
			
			pxButton = cast<CButton>(GetControl("OkButton"));
			pxButton^.m_xOnClick=OnOk;
			
		endconstructor;
		
		
		proc bool OnEnableResourcesUnlimited()
			var string sName="ResourcesUnlimited";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableHeroPool()
			var string sName="HeroPool";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableUseSupply()
			var string sName="UseSupply";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		export proc bool OnEnableTreasureSharing()
			var string sName="TreasureSharing";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			var ^CGame pxGame = ^(CGameWrap.GetGame());
			var bool bAllow = pxGame^.GetDiplomacyLocked();
			if(!bAllow)then
				pxTmp^.SetChecked(0);
				pxTmp^.SetDisabled(true);
			else
				pxTmp^.SetDisabled(false);
			endif;
			xConf.SetB("Server/GameplayOptions/"+sName, pxTmp^.GetCheckMark());
			pxGame^.SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		export proc bool OnEnableUseFM()
			var string sName="UseFM";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableAllowThrow()
			var string sName="AllowThrow";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableUseOldSpirits()
			var string sName="UseOldSpirits";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableGlobalReanim()
			var string sName="GlobalReanim";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableExcludeBuildUp()
			var string sName="ExcludeBuildUp";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableAttackInFOW()
			var string sName="AttackInFOW";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableOldDisembark()
			var string sName="OldDisembark";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableAuraSharing()
			var string sName="AuraSharing";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableDivideSkulls()
			var string sName="DivideSkulls";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableDeliveryUnbound()
			var string sName="DeliveryUnbound";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableDisableArtifactRelease()
			var string sName="DisableArtifactRelease";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableObserverChat()
			var string sName="ObserverChat";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnChangeDwnLvlSwitch()
			var string sName="DwnLvlSwitch";
			var ^CDropList pxDrop=cast<CDropList>(GetControl(sName+"Droplist"));
			var int iSetting=pxDrop^.GetSelectedItem();
			var CConfig xConf;
			xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
			CGameWrap.GetGame().SetAttrib(sName,iSetting);
			return(true);
		endproc;
		
		proc bool OnEnableAlienCommands()
			var string sName="AlienCommands";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/AllowAlienCommands",pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnOk()
			Destroy();
			return(true);
		endproc;
		
	endclass;
	
	class CAdjustTimer inherit CStateUIWnd;
		
		export constructor()
			if(!InitFromResource("UI/MirageSettings","AdjustTimer"))then
				return;
			endif;
			var CConfig xConf;
			var ^CGame pxGame = ^(CGameWrap.GetGame());
			var ^CCheckBox pxCheckBox;
			var ^CDropList pxDrop;
			var ^CSpinCtrlNumber pxSpinCtrl;
			var ^CButton pxButton;
			var string sName, sParam;
			var bool bEnabled;
			var int iSetting, iDef, iStep, k, iK;
			SetPos((CClientWrap.GetDesktop()^.GetSize().GetX()/2)-GetSize().GetX()/2,(CClientWrap.GetDesktop()^.GetSize().GetY()/2)-GetSize().GetY()/2);
			
			sName="SpeedUp";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableSpeedUp;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="ExternalUnpause";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableExternalUnpause;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="DominationContinue";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableDominationContinue;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="CustomTime";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableCustomTime;
			pxGame^.SetAttrib(sName,bEnabled);
			
			sName="PauseLimit";
			k=-1; iK=50; iStep=1; iDef=3;
			pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetLimits(k,iK,iStep);
			pxSpinCtrl^.SetEditable(true);
			iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
			pxSpinCtrl^.SetValue(iSetting);
			pxSpinCtrl^.m_xOnChange=OnChangePauseLimit;
			pxGame^.SetAttrib(sName,iSetting);
			
			sName="MinEpoch";
			k=1; iK=6; iStep=1; iDef=1;
			pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetLimits(k,iK,iStep);
			pxSpinCtrl^.SetEditable(true);
			iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
			pxSpinCtrl^.SetValue(iSetting);
			pxSpinCtrl^.m_xOnChange=OnChangeMinEpoch;
			
			sName="MaxEpoch";
			k=1; iK=6; iStep=1; iDef=5;
			pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetLimits(k,iK,iStep);
			pxSpinCtrl^.SetEditable(true);
			iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
			pxSpinCtrl^.SetValue(iSetting);
			pxSpinCtrl^.m_xOnChange=OnChangeMaxEpoch;
			
			sName="StartHour";
			k=0; iK=23; iStep=1; iDef=8;
			pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetLimits(k,iK,iStep);
			pxSpinCtrl^.SetEditable(true);
			iSetting=Math.Clamp(xConf.GetSetI("Game/MPSettings/"+sName,iDef),k,iK);
			pxSpinCtrl^.SetValue(iSetting);
			pxSpinCtrl^.m_xOnChange=OnChangeStartTime;
			sParam=iSetting.ToString()+":";
			
			sName="StartMin";
			k=0; iK=59; iStep=1; iDef=30;
			pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetLimits(k,iK,iStep);
			pxSpinCtrl^.SetEditable(true);
			iSetting=Math.Clamp(xConf.GetSetI("Game/MPSettings/"+sName,iDef),k,iK);
			pxSpinCtrl^.SetValue(iSetting);
			pxSpinCtrl^.m_xOnChange=OnChangeStartTime;
			sParam+=iSetting.ToString()+":";
			
			sName="StartSec";
			k=0; iK=59; iStep=1; iDef=0;
			//Set seconds disabled
			//pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			//pxSpinCtrl^.SetLimits(k,iK,iStep);
			//pxSpinCtrl^.SetEditable(true);
			iSetting=Math.Clamp(xConf.GetSetI("Game/MPSettings/"+sName,iDef),k,iK);
			//pxSpinCtrl^.SetValue(iSetting);
			//pxSpinCtrl^.m_xOnChange=OnChangeStartTime;
			sParam+=iSetting.ToString();
			pxGame^.SetAttrib("VirtualTime",sParam);
			
			sName="WarpGateTimer";
			k=0; iK=15; iStep=1; iDef=5;
			pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetLimits(k,iK,iStep);
			pxSpinCtrl^.SetEditable(true);
			iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
			pxSpinCtrl^.SetValue(iSetting);
			pxSpinCtrl^.m_xOnChange=OnChangeWarpGateTimer;
			pxGame^.SetAttrib(sName,iSetting);
			
			sName="HQTimer";
			k=-1; iK=15; iStep=1; iDef=5;
			pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetLimits(k,iK,iStep);
			pxSpinCtrl^.SetEditable(true);
			iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
			pxSpinCtrl^.SetValue(iSetting);
			pxSpinCtrl^.m_xOnChange=OnChangeHQTimer;
			pxGame^.SetAttrib(sName,iSetting);
			
			sName="DominationUpDownTimer";
			k=1; iK=30; iStep=1; iDef=10;
			pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetLimits(k,iK,iStep);
			pxSpinCtrl^.SetEditable(true);
			iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
			pxSpinCtrl^.SetValue(iSetting);
			pxSpinCtrl^.m_xOnChange=OnChangeDominationUpDownTimer;
			pxGame^.SetAttrib(sName,iSetting);
			
			sName="SandGlass";
			k=0; iK=2880; iStep=5; iDef=0;
			pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetLimits(k,iK,iStep);
			pxSpinCtrl^.SetEditable(true);
			iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,iK);
			pxSpinCtrl^.SetValue(iSetting);
			pxSpinCtrl^.m_xOnChange=OnChangeSandGlass;
			pxGame^.SetAttrib(sName,iSetting);
			
			pxButton = cast<CButton>(GetControl("OkButton"));
			pxButton^.m_xOnClick=OnOk;
			
		endconstructor;
		
		proc bool OnEnableSpeedUp()
			var string sName="SpeedUp";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		export proc bool OnEnableExternalUnpause()
			var string sName="ExternalUnpause";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		export proc bool OnEnableDominationContinue()
			var string sName="DominationContinue";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		export proc bool OnEnableCustomTime()
			var string sName="CustomTime";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		export proc bool OnChangePauseLimit()
			var string sName="PauseLimit";
			var ^CSpinCtrlNumber pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			var int iSetting=pxSpinCtrl^.GetValueInt();
			var CConfig xConf;
			xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
			CGameWrap.GetGame().SetAttrib(sName,iSetting);
			return true;
		endproc;
		
		proc bool OnChangeMinEpoch()
			var string sName="MinEpoch";
			var ^CSpinCtrlNumber pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			var int iMinEpoch=pxSpinCtrl^.GetValueInt();
			pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl("MaxEpoch"+"SpinCtrl"));
			var int iMaxEpoch=pxSpinCtrl^.GetValueInt();
			if(iMaxEpoch<iMinEpoch)then
				pxSpinCtrl^.SetValue(iMinEpoch);
				OnChangeMaxEpoch();
			endif;
			var CConfig xConf;
			xConf.SetI("Server/GameplayOptions/"+sName,iMinEpoch);
			CGameWrap.GetGame().SetAttrib(sName,iMinEpoch);
			return true;
		endproc;
		
		proc bool OnChangeMaxEpoch()
			var string sName="MaxEpoch";
			var ^CSpinCtrlNumber pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			var int iMaxEpoch=pxSpinCtrl^.GetValueInt();
			pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl("MinEpoch"+"SpinCtrl"));
			var int iMinEpoch=pxSpinCtrl^.GetValueInt();
			if(iMinEpoch>iMaxEpoch)then
				pxSpinCtrl^.SetValue(iMaxEpoch);
				OnChangeMinEpoch();
			endif;
			var CConfig xConf;
			xConf.SetI("Server/GameplayOptions/"+sName,iMaxEpoch);
			CGameWrap.GetGame().SetAttrib(sName,iMaxEpoch);
			return true;
		endproc;
		
		export proc bool OnChangeStartTime()
			var CConfig xConf;
			var ^CSpinCtrlNumber pxSpinCtrl = cast<CSpinCtrlNumber>(GetControl("StartHour"+"SpinCtrl"));
			var int iSetting = pxSpinCtrl^.GetValueInt();
			var string sParam=iSetting.ToString()+":";
			xConf.SetI("Game/MPSettings/StartHour",iSetting);
			pxSpinCtrl = cast<CSpinCtrlNumber>(GetControl("StartMin"+"SpinCtrl"));
			iSetting = pxSpinCtrl^.GetValueInt();
			sParam+=iSetting.ToString()+":";
			xConf.SetI("Game/MPSettings/StartMin",iSetting);
			pxSpinCtrl = cast<CSpinCtrlNumber>(GetControl("StartSec"+"SpinCtrl"));
			iSetting = pxSpinCtrl^.GetValueInt();
			sParam+=iSetting.ToString();
			CGameWrap.GetGame().SetAttrib("VirtualTime",sParam);
			return(true);
		endproc;
		
		export proc bool OnChangeWarpGateTimer()
			var string sName="WarpGateTimer";
			var ^CSpinCtrlNumber pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			var int iSetting=pxSpinCtrl^.GetValueInt();
			var CConfig xConf;
			xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
			CGameWrap.GetGame().SetAttrib(sName,iSetting);
			return true;
		endproc;
		
		export proc bool OnChangeHQTimer()
			var string sName="HQTimer";
			var ^CSpinCtrlNumber pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			var int iSetting=pxSpinCtrl^.GetValueInt();
			var CConfig xConf;
			xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
			CGameWrap.GetGame().SetAttrib(sName,iSetting);
			return true;
		endproc;
		
		export proc bool OnChangeDominationUpDownTimer()
			var string sName="DominationUpDownTimer";
			var ^CSpinCtrlNumber pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			var int iSetting=pxSpinCtrl^.GetValueInt();
			var CConfig xConf;
			xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
			CGameWrap.GetGame().SetAttrib(sName,iSetting);
			return true;
		endproc;
		
		proc bool OnChangeSandGlass()
			var string sName="SandGlass";
			var ^CSpinCtrlNumber pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			var int iSetting=pxSpinCtrl^.GetValueInt();
			var CConfig xConf;
			xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
			CGameWrap.GetGame().SetAttrib(sName,iSetting);
			return true;
		endproc;
		
		proc bool OnOk()
			Destroy();
			return(true);
		endproc;
		
	endclass;
	
	class CAdjustPhantomMode inherit CStateUIWnd;
		
		var bool m_bOff, m_bRandom;
		var int m_iAvailable, m_iPlayers, m_iMid;
		var int m_iC, m_iP, m_iD;
		var array ^CCheckBox m_apxBoxes;
		var array ^CSpinCtrl m_apxSpins;
		
		export constructor()
			if(!InitFromResource("UI/MirageSettings","AdjustPhantomMode"))then
				return;
			endif;
			m_iPlayers=CMultiPlayerClientMgr.Get().GetNumPlayers();
			m_iAvailable=m_iPlayers;
			m_iMid=m_iPlayers/2;
			m_apxBoxes=0;
			m_apxSpins=0;
			m_bOff=true;
			SetPos((CClientWrap.GetDesktop()^.GetSize().GetX()/2)-GetSize().GetX()/2,(CClientWrap.GetDesktop()^.GetSize().GetY()/2)-GetSize().GetY()/2);
			
			var CConfig xConf;
			var ^CGame pxGame = ^(CGameWrap.GetGame());
			var ^CCheckBox pxCheckBox;
			var ^CSpinCtrlNumber pxSpinCtrl;
			var ^CButton pxButton;
			var string sName;
			var bool bEnabled, bImpossible=m_iAvailable<3 || pxGame^.GetAttribInt("GameType")!=0 || pxGame^.GetDiplomacyLocked();
			var int iSetting, iDef, iStep, k, iK;
			
			sName="PhantomMode";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bImpossible)then
				xConf.SetB("Server/GameplayOptions/"+sName,false);
			elseif(bEnabled)then
				pxCheckBox^.SetChecked(1);
				m_bOff=false;
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnablePhantomMode;
			pxCheckBox^.SetDisabled(bImpossible);
			pxGame^.SetAttrib(sName,pxCheckBox^.GetChecked());
			
			sName="RandomRoles";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			m_bRandom=bEnabled;
			pxCheckBox^.m_xOnStateChange=OnEnableRandomRoles;
			pxCheckBox^.SetDisabled(m_bOff);
			pxGame^.SetAttrib(sName,pxCheckBox^.GetChecked());
			m_apxBoxes.AddEntry(pxCheckBox);
			
			sName="SeerPlayer";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(!m_bRandom)then
				xConf.SetB("Server/GameplayOptions/"+sName,false);
			elseif(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableSeerPlayer;
			pxCheckBox^.SetDisabled(m_bOff||!m_bRandom);
			pxGame^.SetAttrib(sName,pxCheckBox^.GetChecked());
			m_apxBoxes.AddEntry(pxCheckBox);
			
			sName="ConquerorNumber";
			k=1; iK=4; iStep=1; iDef= 1;
			pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetLimits(k,iK,iStep);
			pxSpinCtrl^.SetEditable(true);
			iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,Math.Min(iK,Math.Min(m_iAvailable,m_iMid)));
			xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
			m_iC=iSetting;
			m_iAvailable-=iSetting;
			pxSpinCtrl^.SetValue(iSetting);
			pxSpinCtrl^.m_xOnChange=OnChangeConquerorNumber;
			pxSpinCtrl^.SetDisabled(m_bOff||m_bRandom);
			pxGame^.SetAttrib(sName,iSetting);
			m_apxSpins.AddEntry(pxSpinCtrl);
			
			sName="PaladinNumber";
			k=0; iK=5; iStep=1; iDef=0;
			pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetLimits(k,iK,iStep);
			pxSpinCtrl^.SetEditable(true);
			iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,Math.Min(iK,Math.Min(m_iAvailable,m_iMid)));
			xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
			m_iP=iSetting;
			m_iAvailable-=iSetting;
			pxSpinCtrl^.SetValue(iSetting);
			pxSpinCtrl^.m_xOnChange=OnChangePaladinNumber;
			pxSpinCtrl^.SetDisabled(m_bOff||m_bRandom);
			pxGame^.SetAttrib(sName,iSetting);
			m_apxSpins.AddEntry(pxSpinCtrl);
			
			sName="DefenderNumber";
			k=0; iK=7; iStep=1; iDef=3;
			pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetLimits(k,iK,iStep);
			pxSpinCtrl^.SetEditable(true);
			iSetting=Math.Clamp(xConf.GetSetI("Server/GameplayOptions/"+sName,iDef),k,Math.Min(iK,Math.Min(m_iAvailable,m_iMid)));
			xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
			m_iD=iSetting;
			m_iAvailable-=iSetting;
			pxSpinCtrl^.SetValue(iSetting);
			pxSpinCtrl^.m_xOnChange=OnChangeDefenderNumber;
			pxSpinCtrl^.SetDisabled(m_bOff||m_bRandom);
			pxGame^.SetAttrib(sName,iSetting);
			m_apxSpins.AddEntry(pxSpinCtrl);
			
			sName="Revelation";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(!m_bRandom&&m_iC<2)then
				xConf.SetB("Server/GameplayOptions/"+sName,false);
			elseif(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableRevelation;
			pxCheckBox^.SetDisabled(m_bOff||(!m_bRandom&&m_iC<2));
			pxGame^.SetAttrib(sName,pxCheckBox^.GetChecked());
			m_apxBoxes.AddEntry(pxCheckBox);
			
			sName="BloodBrothers";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableBloodBrothers;
			pxCheckBox^.SetDisabled(m_bOff);
			pxGame^.SetAttrib(sName,pxCheckBox^.GetChecked());
			m_apxBoxes.AddEntry(pxCheckBox);
			
			sName="SoulKeepers";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(!m_bRandom&&m_iD<1)then
				xConf.SetB("Server/GameplayOptions/"+sName,false);
			elseif(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnableSoulKeepers;
			pxCheckBox^.SetDisabled(m_bOff||(!m_bRandom&&m_iD<1));
			pxGame^.SetAttrib(sName,pxCheckBox^.GetChecked());
			m_apxBoxes.AddEntry(pxCheckBox);
			
			sName="PopulationBonus";
			pxCheckBox=cast<CCheckBox>(GetControl(sName));
			bEnabled=xConf.GetSetB("Server/GameplayOptions/"+sName,false);
			if(bEnabled)then
				pxCheckBox^.SetChecked(1);
			else
				pxCheckBox^.SetChecked(0);
			endif;
			pxCheckBox^.m_xOnStateChange=OnEnablePopulationBonus;
			pxCheckBox^.SetDisabled(m_bOff);
			pxGame^.SetAttrib(sName,pxCheckBox^.GetChecked());
			m_apxBoxes.AddEntry(pxCheckBox);
			
			pxButton = cast<CButton>(GetControl("OkButton"));
			pxButton^.m_xOnClick=OnOk;
			
		endconstructor;
		
		proc void ValidateControllers(bool p_bDisable)
			var int i, iC=m_apxBoxes.NumEntries();
			for(i=0)cond(i<iC)iter(i++)do
//				m_apxBoxes[i]^.SetDisabled(p_bDisable);
				m_apxBoxes[i]^.m_xOnStateChange.Call();
			endfor;
			iC=m_apxSpins.NumEntries();
			for(i=0)cond(i<iC)iter(i++)do
//				m_apxSpins[i]^.SetDisabled(p_bDisable);
				m_apxSpins[i]^.m_xOnChange.Call();
			endfor;
		endproc;
		
		proc bool OnEnablePhantomMode()
			var string sName="PhantomMode";
			var bool bPrev=m_bOff;
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			m_bOff = !(pxTmp^.GetCheckMark());
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			if(bPrev!=m_bOff)then
				ValidateControllers(m_bOff);
			endif;
			return(true);
		endproc;
		
		proc bool OnEnableRandomRoles()
			var string sName="RandomRoles";
			var bool bPrev=m_bRandom;
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			m_bRandom=pxTmp^.GetCheckMark();
			xConf.SetB("Server/GameplayOptions/"+sName,m_bRandom);
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			pxTmp^.SetDisabled(m_bOff);
			var int i, iC=m_apxSpins.NumEntries();
			for(i=0)cond(i<iC)iter(i++)do
				m_apxSpins[i]^.SetDisabled(m_bRandom);
			endfor;
			if(bPrev!=m_bRandom)then
				OnEnableSeerPlayer();
				OnEnableRevelation();
				OnEnableSoulKeepers();
			endif;
			return(true);
		endproc;
		
		proc bool OnEnableSeerPlayer()
			var string sName="SeerPlayer";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			if(!m_bRandom)then
				pxTmp^.SetChecked(0);
			endif;
			pxTmp^.SetDisabled(m_bOff||!m_bRandom);
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnChangeConquerorNumber()
			var string sName="ConquerorNumber";
			var ^CSpinCtrlNumber pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetDisabled(m_bOff||m_bRandom);
			var int iSetting=pxSpinCtrl^.GetValueInt();
			if((m_iAvailable-(iSetting-m_iC))<0)then
				pxSpinCtrl^.SetValue(m_iC);
				return true;
			else
				if(iSetting>m_iMid)then
					iSetting=m_iMid;
					pxSpinCtrl^.SetValue(iSetting);
				endif;
				m_iAvailable-=(iSetting-m_iC);
				m_iC=iSetting;
				OnEnableRevelation();
			endif;
			var CConfig xConf;
			xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
			CGameWrap.GetGame().SetAttrib(sName,iSetting);
			return true;
		endproc;
	
		proc bool OnChangePaladinNumber()
			var string sName="PaladinNumber";
			var ^CSpinCtrlNumber pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetDisabled(m_bOff||m_bRandom);
			var int iSetting=pxSpinCtrl^.GetValueInt();
			if((m_iAvailable-(iSetting-m_iP))<0)then
				pxSpinCtrl^.SetValue(m_iP);
				return true;
			else
				if(iSetting>m_iMid)then
					iSetting=m_iMid;
					pxSpinCtrl^.SetValue(iSetting);
				endif;
				m_iAvailable-=(iSetting-m_iP);
				m_iP=iSetting;
			endif;
			var CConfig xConf;
			xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
			CGameWrap.GetGame().SetAttrib(sName,iSetting);
			return true;
		endproc;
		
		proc bool OnChangeDefenderNumber()
			var string sName="DefenderNumber";
			var ^CSpinCtrlNumber pxSpinCtrl=cast<CSpinCtrlNumber>(GetControl(sName+"SpinCtrl"));
			pxSpinCtrl^.SetDisabled(m_bOff||m_bRandom);
			var int iSetting=pxSpinCtrl^.GetValueInt();
			if((m_iAvailable-(iSetting-m_iD))<0)then
				pxSpinCtrl^.SetValue(m_iD);
				return true;
			else
				m_iAvailable-=(iSetting-m_iD);
				m_iD=iSetting;
				OnEnableSoulKeepers();
			endif;
			var CConfig xConf;
			xConf.SetI("Server/GameplayOptions/"+sName,iSetting);
			CGameWrap.GetGame().SetAttrib(sName,iSetting);
			return true;
		endproc;
		
		proc bool OnEnableRevelation()
			var string sName="Revelation";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			if(!m_bRandom&&m_iC<2)then
				pxTmp^.SetChecked(0);
			endif;
			pxTmp^.SetDisabled(m_bOff||(!m_bRandom&&m_iC<2));
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableBloodBrothers()
			var string sName="BloodBrothers";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			pxTmp^.SetDisabled(m_bOff);
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnableSoulKeepers()
			var string sName="SoulKeepers";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			var CConfig xConf;
			if(!m_bRandom&&m_iD<1)then
				pxTmp^.SetChecked(0);
			endif;
			pxTmp^.SetDisabled(m_bOff||(!m_bRandom&&m_iD<1));
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnEnablePopulationBonus()
			var string sName="PopulationBonus";
			var ^CCheckBox pxTmp=cast<CCheckBox>(GetControl(sName));
			pxTmp^.SetDisabled(m_bOff);
			var CConfig xConf;
			xConf.SetB("Server/GameplayOptions/"+sName,pxTmp^.GetCheckMark());
			CGameWrap.GetGame().SetAttrib(sName,pxTmp^.GetCheckMark());
			return(true);
		endproc;
		
		proc bool OnOk()
			Destroy();
			return(true);
		endproc;
		
	endclass;
	
endclass;

class COverViewPage inherit CStaticCtrlEx
	
	var ^CMapListWindow m_pxOwner;
	
	export constructor()
		System.Assert(false,"invalid COverViewPage contructor");
	endconstructor;

	export constructor(^CMapListWindow p_pxOwner)
		if(!InitFromResource("UI/MirageSettings","MirageOverview"))then
			return;
		endif;
		m_pxOwner=p_pxOwner;
		var ^CStaticCtrlEx pxStatBackground=cast<CStaticCtrlEx>(GetControl("MirageBackground1st"));
		if(pxStatBackground!=null)then
			pxStatBackground^.SetBitmap(CGameWrap.GetUrsRelPath() + "/Data/Base/UI/menue/decoration/mirageoverview_statbackground_bigger.tga");
		endif;
		pxStatBackground=cast<CStaticCtrlEx>(GetControl("MirageBackground2nd"));
		if(pxStatBackground!=null)then
			pxStatBackground^.SetBitmap(CGameWrap.GetUrsRelPath() + "/Data/Base/UI/menue/decoration/mirageoverview_statbackground_bigger.tga");
		endif;
	endconstructor;
	
	export proc void Update()
		InvalidateContent();
	endproc;
	
	proc void OnUpdateContent()
		super.OnUpdateContent();
		var ^CGame pxGame = ^(CGameWrap.GetGame());
		var ^CStaticCtrlEx pxSBG;
		var ^CUIFloatBox pxUIFB;
//		var color xRed = {{ 255,0,0,255 }}, xYellow = {{ 255,216,0,255 }};
//		var color xRed = {{ 255,216,0,255 }}, xYellow = {{ 255,216,0,255 }}; // Henry: let's use same yellow for everything now
		var int i, iC, iIdx=1;
		var string sName, sText, sWords, sColor, sColor2;
		sColor="cogiw_1";
		sColor2="cogiw_1";
		// FIRST COLUMN
		pxSBG=cast<CStaticCtrlEx>(GetControl("MirageBackground1st"));
		if(pxSBG==null)then return; endif;
		
		sName="FruitsRemovement";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}0"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="NestRespawn";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}0"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="AnimalsVisInFOW";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}0"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="ShowResourcesInFOW";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Invisible");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Visible");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}0"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="ResourcesUnlimited";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
			sColor="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}0"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="UnitResources";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}0"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="CorpseDamage";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}0"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="BuildingBurndown";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}0"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="BuildingCancellation";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}0"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="WarpInvisible";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Invisible");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Visible");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="Portals";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
			sColor="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="EarlyTransport";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="FlyingEnabled";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
			sColor="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="TitanSlots";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
			sColor="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="PerfectArmor";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="BonusSkulls";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		
		// SECOND COLUMN
		pxSBG=cast<CStaticCtrlEx>(GetControl("MirageBackground2nd"));
		if(pxSBG==null)then return; endif;
		iIdx++;
		sName="HeroPool";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
			sColor="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="FreeSpecials";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
			sColor="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="UseSupply";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
			sColor="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="TreasureSharing";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="UseFM";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="DwnLvlSwitch";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		//pxUIFB^.DefColor("giw_yellow",xYellow);
		iC=pxGame^.GetAttribInt(sName);
		if(iC>=3)then
			sColor="cored";
		elseif(iC>0)then
			sColor="coyellow";
		endif;
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_MirageServer_"+sName+"_"+iC.ToString());
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="TransportHealing";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		//pxUIFB^.DefColor("giw_yellow",xYellow);
		sText = pxGame^.GetAttribInt(sName).ToString();
		if(sText!="0")then
			sColor="coyellow";
		endif;
		sText+=CLocalizer.Get().Translate("_MIRAGE_Percent");
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="Epochs";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = pxGame^.GetAttribInt("MinEpoch").ToString();
		sWords = pxGame^.GetAttribInt("MaxEpoch").ToString();
		if(sText!="1")then
			sColor="cored";
		endif;
		if(sWords!="5")then
			sColor2="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cogiw_1}, \\{cp}\\{"+sColor2+"}"+sWords+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sColor2="cogiw_1";
		sName="VirtualTime";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		if(pxGame^.GetAttrib("CustomTime")=="1")then
			sText = pxGame^.GetAttrib(sName);
			if(sText!="")then
				var array string asStartTime;
				sText.Split(asStartTime,":",false);
				if(asStartTime.NumEntries()>1)then
					var string sHours, sMinutes;
					var int iHours = asStartTime[0].ToInt();
					var int iMinutes = asStartTime[1].ToInt();
					if(iHours<10)then
						sHours += "0";
					endif;
					if(iMinutes<10)then
						sMinutes += "0";
					endif;
					sHours += iHours.ToString();
					sMinutes += iMinutes.ToString();
					sText = sHours+":"+sMinutes;
				endif;
			endif;
			pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		else
			pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+CLocalizer.Get().Translate("_MIRAGE_Off_1")+"\\{cp}\\{p}");
		endif;
		iIdx++;
		sName="WarpGateTimer";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		//pxUIFB^.DefColor("giw_yellow",xYellow);
		sColor="coyellow";
		sText = (pxGame^.GetAttribInt(sName)).ToString();
		sWords = "_MIRAGE_Duration_4";
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{"+sColor+"}"+CLocalizer.Get().Translate(sWords)+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="HQTimer";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		//pxUIFB^.DefColor("giw_yellow",xYellow);
		sWords = "_MIRAGE_Duration_4";
		iC = pxGame^.GetAttribInt(sName);
		sText = iC.ToString();
		if(iC<=-1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_Off_1");
			sWords = "";
			sColor="cored";
		else
			sColor="coyellow";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{"+sColor+"}"+CLocalizer.Get().Translate(sWords)+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="SandGlass";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sWords = "_MIRAGE_Duration_4";
		iC = pxGame^.GetAttribInt(sName);
		sText = iC.ToString();
		if(iC<=0)then
			sText=CLocalizer.Get().Translate("_MIRAGE_Off_1");
			sWords = "";
		else
			sColor="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{"+sColor+"}"+CLocalizer.Get().Translate(sWords)+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="BldgMaxCapacity";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
			sColor="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="ExternalUnpause";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="PauseLimit";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		iC = pxGame^.GetAttribInt(sName);
		sText = iC.ToString();
		sWords = "_MIRAGE_Pieces";
		if(iC<0)then
			sText=CLocalizer.Get().Translate("_MIRAGE_Off_1");
			sWords = "";
		else
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{cogiw_1}"+CLocalizer.Get().Translate(sWords)+"\\{cp}\\{p}");
		iIdx++;
		sName="SpeedUp";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
			sColor="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		
	endproc;
	
endclass;

class COverViewPage2 inherit CStaticCtrlEx
	
	var ^CMapListWindow m_pxOwner;
	
	export constructor()
		System.Assert(false,"invalid COverViewPage contructor");
	endconstructor;

	export constructor(^CMapListWindow p_pxOwner)
		if(!InitFromResource("UI/MirageSettings","MirageOverview2"))then
			return;
		endif;
		m_pxOwner=p_pxOwner;
		var ^CStaticCtrlEx pxStatBackground=cast<CStaticCtrlEx>(GetControl("MirageBackground1st"));
		if(pxStatBackground!=null)then
			pxStatBackground^.SetBitmap(CGameWrap.GetUrsRelPath() + "/Data/Base/UI/menue/decoration/mirageoverview_statbackground_bigger.tga");
		endif;
		pxStatBackground=cast<CStaticCtrlEx>(GetControl("MirageBackground2nd"));
		if(pxStatBackground!=null)then
			pxStatBackground^.SetBitmap(CGameWrap.GetUrsRelPath() + "/Data/Base/UI/menue/decoration/mirageoverview_statbackground_bigger.tga");
		endif;
	endconstructor;
	
	export proc void Update()
		InvalidateContent();
	endproc;
	
	proc void OnUpdateContent()
		super.OnUpdateContent();
		var ^CGame pxGame = ^(CGameWrap.GetGame());
		var ^CStaticCtrlEx pxSBG;
		var ^CUIFloatBox pxUIFB;
		var int i, iC, iIdx=33;
		var string sName, sText, sWords, sColor, sColor2;
		var bool bRandom=false;
//		var color xRed = {{ 255,0,0,255 }}, xYellow = {{ 255,216,0,255 }};
		sColor="cogiw_1";
		sColor2="cogiw_1";
		
		// FIRST COLUMN
		pxSBG=cast<CStaticCtrlEx>(GetControl("MirageBackground1st"));
		if(pxSBG==null)then return; endif;
		
		sName="AllowThrow";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="UseOldSpirits";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="GlobalReanim";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="ExcludeBuildUp";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="AttackInFOW";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="TechtreeSteal";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="MultiTribe";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
			sColor="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="PhantomMode";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
			sColor="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="Revelation";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="BloodBrothers";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="SoulKeepers";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="SeerPlayer";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="PopulationBonus";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		sName="RandomRoles";
		if(pxGame^.GetAttribInt(sName)==1)then
			bRandom=true;
		endif;
		iIdx++;
		sName="ConquerorNumber";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		iC = pxGame^.GetAttribInt(sName);
		sText = iC.ToString();
		if(bRandom)then
			sText=CLocalizer.Get().Translate("_MIRAGE_Random");
		else
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="PaladinNumber";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		iC = pxGame^.GetAttribInt(sName);
		sText = iC.ToString();
		if(bRandom)then
			sText=CLocalizer.Get().Translate("_MIRAGE_Random");
		else
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="DefenderNumber";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		iC = pxGame^.GetAttribInt(sName);
		sText = iC.ToString();
		if(bRandom)then
			sText=CLocalizer.Get().Translate("_MIRAGE_Random");
		else
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		
		// SECOND COLUMN
		pxSBG=cast<CStaticCtrlEx>(GetControl("MirageBackground2nd"));
		if(pxSBG==null)then return; endif;
		iIdx++;
		sName="OldDisembark";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="AuraSharing";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="DefenderTimer";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		//pxUIFB^.DefColor("giw_yellow",xYellow);
		sText = (pxGame^.GetAttribInt(sName)).ToString();
		sWords = "_MIRAGE_Duration_4";
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_UI_PlLiWind_Label_DefenderTimer")+": "+"\\{cp}\\{coyellow}"+sText+"\\{cp}\\{coyellow}"+CLocalizer.Get().Translate(sWords)+"\\{cp}\\{p}");
		iIdx++;
		sName="DominationUpDownTimer";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		//pxUIFB^.DefColor("giw_yellow",xYellow);
		sText = (pxGame^.GetAttribInt(sName)).ToString();
		sWords = "_MIRAGE_Duration_4";
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{coyellow}"+sText+"\\{cp}\\{coyellow}"+CLocalizer.Get().Translate(sWords)+"\\{cp}\\{p}");
		iIdx++;
		sName="HeroGratis";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="DivideSkulls";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="ObserverChat";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="NoHumpWalking";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="RemoveTitans";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
			sColor="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="RemoveTrading";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
			sColor="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="InfantryWar";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="DeliveryUnbound";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="DisableArtifactRelease";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="ManaEnabled";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
			sColor="cored";
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sColor="cogiw_1";
		sName="GeneralAdvancement";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		iIdx++;
		sName="AllyBuildup";
		pxUIFB=cast<CUIFloatBox>(pxSBG^.GetControl(sName));
		//pxUIFB^.DefColor("giw_red",xRed);
		sText = CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_No");
		if(pxGame^.GetAttribInt(sName)==1)then
			sText=CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_Yes");
		endif;
		pxUIFB^.SetText("\\{cogiw_1}"+iIdx.ToString()+". \\{cp}\\{cogiw_2}"+CLocalizer.Get().Translate("_MIRAGE_UI_OverView_Label_"+sName)+"\\{cp}\\{"+sColor+"}"+sText+"\\{cp}\\{p}");
		
	endproc;
	
endclass;
