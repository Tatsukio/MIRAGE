//class CMainMenu inherit CFrameWindow
class CMainMenu inherit CStateUIWnd
	
	var ^CDesktop m_pxDesktop;
	var array ^CMenuButton m_apxButtons;
	var int m_iSelectedButton;
	var string m_sLastCampaignLevel;
	var int m_iTimerID;
	var int m_iTimerCheat;
	var bool m_bMultiplayerEnable;
	var bool m_bSkirmishEnable;
	var bool m_bCampaignEnable;
	var CUIStateMgr.CLoadScreenInfo m_xContinueGameLoadScreenInfo;
	var int m_iCounter;
	var int m_iCounterMax;
	var ^CStaticCtrlEx m_pxCheat;
	var string m_sCheat;
	var int m_iMaxCheatLength;
	static var bool ms_bAutoRestart;
//	var int m_iTimerForce;
//	var int m_iTimerRestart;
//	var int m_iTimerAutoChange;
	
	export constructor()
		if(!InitFromResource("UI/MainMenu","MainMenu"))then
			return;
		endif;
		var real fLOD;
//		if(!CSettings.Get("Pest/Rendering/LODBorderAnmlHigh0",fLOD)||fLOD!=200.0)then
//			CMainMenu.ms_bAutoRestart=true;
//		endif;
		m_pxDesktop=CClientWrap.GetDesktop();
		var CConfig xConf;
		m_bMultiplayerEnable=xConf.GetB("Game/GUIOptions/MainMenuEnableMP",false);
		m_bSkirmishEnable=xConf.GetB("Game/GUIOptions/MainMenuEnableSK",false);
		m_bCampaignEnable=xConf.GetB("Game/GUIOptions/MainMenuEnableSP",false);
//		var bool bCheatsOn = (xConf.GetB("Game/EnableCheats",false)&&CVersionInfo.GetCompatibleVersionsString().Find("CheatSrv")!=-1);
		var bool bCheatsOn = xConf.GetB("Game/EnableCheats",false);
		var bool bAServerIsStillRunning=CGameWrap.IsServerExeRunning();
		if(bAServerIsStillRunning)then
			m_iTimerID=SetTimer(200,true);
		endif;
		
		var int iHeight=450;
		if(bCheatsOn)then
			iHeight=470;
		endif;
		SetSize(300 * CGameInst.ms_iUIScaleFactor,iHeight * CGameInst.ms_iUIScaleFactor);
		if(xConf.GetI("Game/GUIOptions/CenterMenu",1)==1)then 
			SetPos(m_pxDesktop^.GetWidth()/2-GetWidth()/2,m_pxDesktop^.GetHeight()/2-GetHeight()/2);
		else
			SetPos(30 * CGameInst.ms_iUIScaleFactor,30 * CGameInst.ms_iUIScaleFactor);
		endif;

		var ^CMenuButton pxTmp = cast<CMenuButton>(GetControl("StartNewCampaign"));
		pxTmp^.m_xOnClick=OnStartNewCampaign;
		SetCmd("OnStartNewCampaign", OnStartNewCampaign );
		AddAccelerator("1,NONE,OnStartNewCampaign");
		if(bAServerIsStillRunning)then
			pxTmp^.SetDisabled(true);
		endif;
		if(!m_bCampaignEnable)then
			pxTmp^.SetVisible(false);
		endif;
		m_apxButtons.AddEntry(pxTmp);
		pxTmp = cast<CMenuButton>(GetControl("Multiplayer"));
		pxTmp^.m_xOnClick=OnMultiplayer;
		SetCmd("OnMultiplayer", OnMultiplayer );
		AddAccelerator("4,NONE,OnMultiplayer");
		if(bAServerIsStillRunning)then
			pxTmp^.SetDisabled(true);
		endif;
		if(!m_bMultiplayerEnable)then
			pxTmp^.SetVisible(false);
		endif;
		m_apxButtons.AddEntry(pxTmp);
		pxTmp = cast<CMenuButton>(GetControl("Skirmish"));
		pxTmp^.m_xOnClick=OnSkirmish;
		SetCmd("OnSkirmish", OnSkirmish );
		AddAccelerator("2,NONE,OnSkirmish");
		if(bAServerIsStillRunning)then
			pxTmp^.SetDisabled(true);
		endif;
		if(!m_bSkirmishEnable)then
			pxTmp^.SetVisible(false);
		endif;
		m_apxButtons.AddEntry(pxTmp);
		pxTmp = cast<CMenuButton>(GetControl("LoadGame"));
		pxTmp^.m_xOnClick=OnLoadGame;
		SetCmd("OnLoadGame", OnLoadGame );
		AddAccelerator("3,NONE,OnLoadGame");
		if(bAServerIsStillRunning)then
			pxTmp^.SetDisabled(true);
		endif;
		m_apxButtons.AddEntry(pxTmp);
		pxTmp = cast<CMenuButton>(GetControl("Options"));
		pxTmp^.m_xOnClick=OnOptions;
		SetCmd("OnOptions", OnOptions );
		AddAccelerator("5,NONE,OnOptions");
		m_apxButtons.AddEntry(pxTmp);
		pxTmp = cast<CMenuButton>(GetControl("Credits"));
		pxTmp^.m_xOnClick=OnCredits;
		m_apxButtons.AddEntry(pxTmp);
		SetCmd("OnCredits", OnCredits );
		AddAccelerator("6,NONE,OnCredits");
		pxTmp = cast<CMenuButton>(GetControl("Website"));
		pxTmp^.m_xOnClick=OnWebsite;
		m_apxButtons.AddEntry(pxTmp);
		SetCmd("OnWebsite", OnWebsite );
		AddAccelerator("7,NONE,OnWebsite");
		
		//pxTmp = cast<CMenuButton>(GetControl("Version"));
		//pxTmp^.m_xOnClick=ShowVersion;
		//m_apxButtons.AddEntry(pxTmp);
		//SetCmd("ShowVersion", ShowVersion );
		//AddAccelerator("8,NONE,ShowVersion");
		
		pxTmp = cast<CMenuButton>(GetControl("OnlineHelp"));
		pxTmp^.m_xOnClick=ShowHelp;
		m_apxButtons.AddEntry(pxTmp);
		SetCmd("ShowHelp", ShowHelp );
		AddAccelerator("9,NONE,ShowHelp");
		pxTmp = cast<CMenuButton>(GetControl("Quit"));
		pxTmp^.m_xOnClick=AskForQuit;
		m_apxButtons.AddEntry(pxTmp);
		SetCmd("AskForQuit", AskForQuit );
		AddAccelerator("0,NONE,AskForQuit");
		SetWindowTitle(CLocalizer.Get().Translate("_UI_MainMenu_Title_Menu"));
		AddAccelerator("UP, NONE,Up");
		AddAccelerator("DOWN, NONE,Down");
		AddAccelerator("RETURN, NONE,Return");
		SetCmd("Up",MenuUp);
		SetCmd("Down",MenuDown);
		SetCmd("Return",OnReturn);
		m_iSelectedButton=0;
		
		var ^CStaticCtrlEx pxVersion=cast<CStaticCtrlEx>(GetControl("VersionBox"));
//		pxVersion^.SetTextColor({{255,255,255,255}});
		pxVersion^.SetTextColor({{238,187,119,255}});
		pxVersion^.SetTextAlign(1,1);
//		pxVersion^.SetText(CLocalizer.Get().Translate("_MIRAGE_UI_MainMenu_Label_MirageVersion")+CMirageClnMgr.VERSION+CMirageClnMgr.BUILD+"\n"+CLocalizer.Get().Translate("_UI_MainMenu_Label_VersionText"));
		pxVersion^.SetText(CLocalizer.Get().Translate("_MIRAGE_UI_MainMenu_Label_MirageVersion")+CMirageClnMgr.VERSION+CMirageClnMgr.BUILD);
		m_pxCheat=cast<CStaticCtrlEx>(GetControl("Warning"));
		if(bCheatsOn)then
			m_iCounterMax = 30;
			m_sCheat = m_pxCheat^.GetText()+"        +++        ";
			m_iMaxCheatLength = 40;
			m_iTimerCheat = SetTimer(100, true);
			OnTimer(m_iTimerCheat);
		else
			m_pxCheat^.SetVisible(false);
		endif;
		// Henry: HACK...
//		xConf.SetI("Game/ButtonSaveMultiplayerEnable",1);
		//ENDHACK
//		CLocalizer.Get().Translate("_CampaignMenuWnd_WndTitle");
		// Henry: HACK...
//		xConf.SetB("Pest/Config/GroupWalk/Enabled",true);
		//ENDHACK
	endconstructor;
	
//	proc void OnRestartMsgBox(int p_iResult)
//		m_iTimerAutoChange = SetTimer(50, true);
//	endproc;
	
	destructor()
		DeleteAccelerator("UP, NONE,Up");
		DeleteAccelerator("DOWN, NONE,Down");
		DeleteCmd("Up");
		DeleteCmd("Down");
		UnsetTimer(m_iTimerID);
		UnsetTimer(m_iTimerCheat);
//		UnsetTimer(m_iTimerForce);
//		UnsetTimer(m_iTimerRestart);
//		UnsetTimer(m_iTimerAutoChange);
	enddestructor;
	
	export proc bool Init()
		m_sLastCampaignLevel.Empty();
		var ^CMapInfoList.CMapInfo pxLCLMapInfo=null;
		var ^CUserProfileList pxList = ^(CClientWrap.GetUserProfileList());
		var string sSaveGamePath=pxList^.GetSaveGamePath();
		var CMapInfoList xMapInfoList;
		CGameWrap.GetMapInfoList(sSaveGamePath,xMapInfoList,200,200);
		var int i,iC=xMapInfoList.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CMapInfoList.CMapInfo pxMapInfo=^(xMapInfoList.GetMapInfo(i));
			if(!pxMapInfo^.GetLevelInfo().IsMultiplayer())then
				if(pxLCLMapInfo==null)then
					pxLCLMapInfo=pxMapInfo;
				else
					if(pxMapInfo^.GetLastWriteTime()>pxLCLMapInfo^.GetLastWriteTime())then
						pxLCLMapInfo=pxMapInfo;
					endif;
				endif;
			endif;
		endfor;
		if(pxLCLMapInfo!=null)then
			m_sLastCampaignLevel=pxLCLMapInfo^.GetFile();
			m_xContinueGameLoadScreenInfo.Set(CUIStateMgr.CLoadScreenInfo.LOADSCR_SAVEGAME,pxLCLMapInfo^.GetMapName(),pxLCLMapInfo^.GetLevelInfo().GetLevelCheckSumme());
		endif;
		//m_pxContinueCampaignBtn^.SetDisabled(m_sLastCampaignLevel.IsEmpty());
//		if(CMainMenu.ms_bAutoRestart)then
//			m_iTimerForce = SetTimer(500, false);
//			var CConfig xConf;
//			xConf.SetF("Pest/Rendering/LODBorderAnmlHigh0",200.0);
//		endif;
		return(true);
	endproc;
	
	proc bool OnMultiplayer()
		if(CGameWrap.IsServerExeRunning())then return false; endif;
		CUIStateMgr.Get().SetState(CUIStateMgr.STATE_MULTIPLAYERSELECT);
		return true;
	endproc;
	
	export proc bool OnSkirmish()
		if(CGameWrap.IsServerExeRunning())then return false; endif;
		CMultiPlayerClientMgr.Get().SetSkirmishMode(true); 
		CMultiPlayerClientMgr.Get().SetDirectIPMode(false);
		CGameWrap.SetGameSpyGame(false);
		CGameWrap.SetInternetGame(false);
		CUIStateMgr.Get().SetState(CUIStateMgr.STATE_NEWMULTIPLAYERLOBBY,"LAN");
	/*
		//if(CGameWrap.GetClient().GetPlayerSlotID().IsValid())then
			CUIStateMgr.Get().SetState(CUIStateMgr.STATE_SKIRMISH);
			CGameWrap.SetGameSpyGame(false);
		/ *else
			OnCheckForServer();	
		endif;* /
	*/
		return true;
	endproc;
/*
	proc bool OnCheckForServer()
		CGameWrap.StopFindServers();
		CGameWrap.m_xOnServerFound.Clear();		
		if(!CClientWrap.HasServer())then
			CUIStateMgr.Get().InvalidateLoadScreenInfo();
			CUIStateMgr.Get().ShowLoadingScreen("StartingNetworkServer",CUIStateMgr.STATE_SKIRMISH);
		else
			CUIStateMgr.Get().SetState(CUIStateMgr.STATE_SKIRMISH);
		endif;
		return(true);
	endproc;
*/
	proc bool OnStartNewCampaign()
		if(CGameWrap.IsServerExeRunning())then return false; endif;
		CUIStateMgr.Get().SetState(CUIStateMgr.STATE_STARTCAMPAIGN);
		CGameWrap.SetGameSpyGame(false);
		return(true);
	endproc;

	proc bool OnContinueCampaign()
		CGameWrap.SetGameSpyGame(false);
		System.Assert(CClientWrap.HasServer()==false,"CClientWrap.HasServer()==false");
		CUIStateMgr.Get().SetLoadScreenInfo(m_xContinueGameLoadScreenInfo);
		CUIStateMgr.Get().ShowLoadingScreen("StartingServerAndStartingGame",-1,OnContinueCampaignEnd);
		return(true);
	endproc;
	
	proc bool OnContinueCampaignEnd()
		CEvt_LoadLevelPreview.Send(m_sLastCampaignLevel);
		CEvt_StartGame.Send();
		return true;
	endproc;
	
	proc bool OnLoadGame()
		if(CGameWrap.IsServerExeRunning())then return false; endif;
		CUIStateMgr.Get().SetState(CUIStateMgr.STATE_LOADGAMEMENU);
		return true;
	endproc;
	
	proc bool OnOptions()
		CUIStateMgr.Get().SetState(CUIStateMgr.STATE_OPTIONSMENU);
		return true;
	endproc;
	
	proc bool OnCredits()
		CClientWrap.PlayBink("credits.bik");
		return true;
	endproc;
	
	proc bool OnWebsite()
		var CConfig xConf;
		//Henry: changing deafault home url and adding the option to set it in configuration file as well
		var string sURL=xConf.GetS("Game/GUIOptions/PWNewHomeURL","http://www.para-welt.com");
		m_pxDesktop^.OpenURLInBrowser(sURL);
		return true;
	endproc;
	
//	proc bool ShowVersion()
//		CMessageBox.MsgBox_YESNO(CLocalizer.Get().Translate("_MIRAGE_UI_MainMenu_Title_MirageVersion"),CLocalizer.Get().Translate("_MIRAGE_UI_MainMenu_Label_MirageVersion")+CMirageClnMgr.VERSION+CMirageClnMgr.BUILD+"\n"+CLocalizer.Get().Translate("_MIRAGE_UI_MainMenu_Question_MirageVersion")+"\n"+" ",CMessageBox.SMB_ICONQUESTION,OnVersionMsgBox_CallBack);
//		return true;
//	endproc;
	
	proc bool ShowVersion()
//		CMessageBox.MsgBox_YESNO(CLocalizer.Get().Translate("_MIRAGE_UI_MainMenu_Title_MirageVersion"),CLocalizer.Get().Translate("_MIRAGE_UI_MainMenu_Label_MirageVersion")+CMirageClnMgr.VERSION+CMirageClnMgr.BUILD+"\n"+CLocalizer.Get().Translate("_MIRAGE_UI_MainMenu_Question_MirageVersion")+"\n"+" ",CMessageBox.SMB_ICONQUESTION,OnVersionMsgBox_CallBack);
		m_pxDesktop^.OpenURLInBrowser(CMirageClnMgr.URL+CMirageClnMgr.UPDATE);
		return true;
	endproc;
	
	export static proc bool ShowHelp()
		CUIStateMgr.Get().SetState(CUIStateMgr.STATE_HELPMENU);
		return true;
	endproc;
	
	proc bool AskForQuit()
		CMessageBox.MsgBox_YESNO(CLocalizer.Get().Translate("_UI_MainMenu_Title_QuitToWindows"),CLocalizer.Get().Translate("_UI_MainMenu_Label_QuitToWindows"),CMessageBox.SMB_ICONQUESTION,OnQuitMsgBox_CallBack);
		return true;
	endproc;

	proc ^CQuestionWindow CreateQuestionWindow(string p_sText)
		var ^CQuestionWindow pxTmp= new CQuestionWindow(p_sText);
		CClientWrap.GetDesktop()^.AddChild(pxTmp);
		return pxTmp;
	endproc;

	proc void OnVersionMsgBox_CallBack(int p_iResult)
		var bitset dwResult = Math.IntToBitset(p_iResult);
		if(dwResult==CMessageBox.SID_YES)then
			m_pxDesktop^.OpenURLInBrowser(CMirageClnMgr.URL+CMirageClnMgr.UPDATE);
		endif;
	endproc;

	proc void OnQuitMsgBox_CallBack(int p_iResult)
		var bitset dwResult = Math.IntToBitset(p_iResult);
		if(dwResult==CMessageBox.SID_YES)then
			CGameWrap.Quit();
		endif;
	endproc;

	proc bool MenuDown()
		if(m_iSelectedButton<m_apxButtons.NumEntries()-1)then
			m_iSelectedButton++;
		else
			m_iSelectedButton=0;
		endif;
		//L KLog.LogWarn("Manni","Selected Button: "+m_iSelectedButton.ToString());
		return(true);
	endproc;
	
	proc bool MenuUp()
		if(m_iSelectedButton>0)then
			m_iSelectedButton--;
		else
			m_iSelectedButton=m_apxButtons.NumEntries()-1;
		endif;
		//L KLog.LogWarn("Manni","Selected Button: "+m_iSelectedButton.ToString());
		return(true);
	endproc;
	
	proc bool OnReturn()
		m_apxButtons[m_iSelectedButton]^.m_xOnClick.Call();
		return(true);
	endproc;
	
	proc bool OnTimer(int p_iTimerID)
		if(p_iTimerID==m_iTimerID)then
			if(CGameWrap.IsServerExeRunning()==false)then
				var int i;
				for(i=0)cond(i<5)iter(i++)do
					m_apxButtons[i]^.SetDisabled(false);
					if((i==1))then // Continue Campaign Button
						m_sLastCampaignLevel.Empty();
						var ^CMapInfoList.CMapInfo pxLCLMapInfo=null;		
						var ^CUserProfileList pxList = ^(CClientWrap.GetUserProfileList());
						var string sSaveGamePath=pxList^.GetSaveGamePath();
						var CMapInfoList xMapInfoList;
						CGameWrap.GetMapInfoList(sSaveGamePath,xMapInfoList,200,200);
						var int i,iC=xMapInfoList.NumEntries();
						for(i=0)cond(i<iC)iter(i++)do
							var ^CMapInfoList.CMapInfo pxMapInfo=^(xMapInfoList.GetMapInfo(i));
							if(!pxMapInfo^.GetLevelInfo().IsMultiplayer())then
								if(pxLCLMapInfo==null)then
									pxLCLMapInfo=pxMapInfo;
								else
									if(pxMapInfo^.GetLastWriteTime()>pxLCLMapInfo^.GetLastWriteTime())then
										pxLCLMapInfo=pxMapInfo;
									endif;
								endif;
							endif;
						endfor;
						if(pxLCLMapInfo!=null)then
							m_sLastCampaignLevel=pxLCLMapInfo^.GetFile();
						endif;
						//m_pxContinueCampaignBtn^.SetDisabled(m_sLastCampaignLevel.IsEmpty());
					endif;
					/*
					if(i==3)then // Skirmish Button
						m_apxButtons[i]^.SetDisabled(true);
					endif;
					*/
				endfor;
				
				UnsetTimer(m_iTimerID);
			endif;
		elseif(p_iTimerID==m_iTimerCheat)then
			m_iCounter++;
			if(m_iCounter >= m_iCounterMax)then
				m_iCounter=-m_iCounterMax;
			endif;
			var real fIntensity = m_iCounter.ToReal();
			fIntensity /= m_iCounterMax.ToReal();
			fIntensity *= Math.Pi();
			fIntensity = Math.Sin(fIntensity)*255.0;
			var int iNtensity = fIntensity.ToInt();
			if(iNtensity < 0)then
				iNtensity=0;
			endif;
			// color flash
			var color xCol;
			xCol.FromString((192+(iNtensity/4)).ToString()+" "+(iNtensity/2).ToString()+" "+(iNtensity/2).ToString()+" 255");
			m_pxCheat^.SetTextColor(xCol);
			var int iLen = m_sCheat.GetLength();
			m_sCheat = m_sCheat.Right(iLen-1)+m_sCheat.Left(1);
			m_pxCheat^.SetText(m_sCheat.Left(m_iMaxCheatLength));
//		elseif(p_iTimerID==m_iTimerForce)then
//			var CConfig xConf;
//			xConf.SetF("Pest/Rendering/LODBorderAnmlHigh0",200.0);
////			CSettings.Set("Pest/Rendering/LODBorderAnmlHigh0",200.0);
//			CMessageBox.MsgBox_OK(CLocalizer.Get().Translate("_UI_Options_MsgBoxTitle_ChangeRequiresRestart"),CLocalizer.Get().Translate("_UI_Options_MsgBoxText_ChangeRequiresRestart"),CMessageBox.SMB_ICONEXCLAMATION,OnRestartMsgBox);
//		elseif(p_iTimerID==m_iTimerAutoChange)then
//			var real fLOD;
//			if(!CSettings.Get("Pest/Rendering/LODBorderAnmlHigh0",fLOD)||fLOD!=200.0)then
//				var CConfig xConf;
//				xConf.SetF("Pest/Rendering/LODBorderAnmlHigh0",200.0);
//			else
//				UnsetTimer(m_iTimerAutoChange);
//				m_iTimerRestart = SetTimer(1000, false);
//			endif;
//		elseif(p_iTimerID==m_iTimerRestart)then
//			CGameWrap.Quit();
		endif;
		return(true);
	endproc;

endclass;

class CMenuButton inherit CButton

	export constructor()
		SetTransparent(true);
		SetBackground(false);
		SetTextAlign(0);
		SetTextIndent(6);
	endconstructor;
	
endclass;
	