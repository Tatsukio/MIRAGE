class CAiTaskGetScalps inherit CAiTaskGetResource
	
	var CAiObjWrapList				m_xList;
	var bool						m_bHostileArea;
	var bool						m_bActive;
	var bool						m_bMultimap;
	var bool						m_bCustommap;
	var string						m_sLevelName;
	var int							m_iDifficulty;
	
	///constructor
	export constructor()
		m_sLevelName="";
	endconstructor;
	
	///destructor
	export destructor()
	enddestructor;
	
	///init
	export proc void Init(^CAiGoal p_pxGoal)	
		super.Init(p_pxGoal);
		if(p_pxGoal==null)then return; endif;
		
		m_pxBrain = p_pxGoal^.GetAiBrain(); 
		if(m_pxBrain==null)then return; endif;
		
		m_pxSensor=^(m_pxBrain^.GetSensor());
		if(m_pxSensor==null) then return; endif;
		
		m_iPlayerID=m_pxBrain^.GetPlayerId();
		m_sPlayerID=m_iPlayerID.ToString();	
		m_sLevelName=CAiUtilityMgr.Get()^.GetLevelName(m_pxBrain);
		m_bMultimap=m_pxSensor^.GetMultimap();
		m_bCustommap=CMirageAIMgr.Get().CheckCustomAI(m_sLevelName,m_sPlayerID,"CampaignAI");
		
//		var int iNumPlayers=1+m_pxSensor^.GetNumPlayers();
//		var int iType = 1+Random.GetInt()%iNumPlayers;
		var int iType = 1;
		
		m_pxCM=cast<CAiModuleControlDefault>(m_pxBrain^.GetControlModule());
		SetThinkWait(m_pxCM^.GetDifficultyInt()+iType);
		m_iDifficulty=m_pxCM^.GetOldDifficultyInt();
		
		m_xList.Clear();
		m_bHostileArea = false;
		m_iNeededResources = 5;	
		SetActive(false);
	endproc;
	
	///CalculateCost
	export proc real CalculateStartCost()
		if(GetActive()==false)then
			if(m_pxSensor==null)then return 1.0; endif;
			if(m_pxBrain==null)then return 1.0; endif;
			
			var real fCost=1.0;
			var ^CAiMaps pxMaps= ^(m_pxSensor^.GetAiMaps());
	
			if(!ComputeBestAreaInBestAiMap(m_xMaxArea))then
				SetImpossible();
				return 99999999.0f;
			endif;
			
			var ^CAiMap pxFOWMap= ^(pxMaps^.GetAiMap("Fow", m_iPlayerID));
			if(pxFOWMap^.GetValue(m_xMaxArea)==0.0)then	
				var ^CAiExplorationInfo pxExplInfo=new CAiExplorationInfo();
				var CFourCC xType = "";
				
				pxExplInfo^.SetType("ANML");
				pxExplInfo^.SetType("SHIP", true);
				pxExplInfo^.SetType("CHTR", true);
				pxExplInfo^.SetType("BLDG", true);
				pxExplInfo^.SetType("VHCL", true);
				pxExplInfo^.AddMyEnemiesToSearch(m_iPlayerID, true);
				pxExplInfo^.SetOwner(-1, true);
				pxExplInfo^.RegionArea(m_xMaxArea);
				SetRequesterFor(pxExplInfo);
				
				if(m_pxBrain^.GetAreaModule()!=null)then
					m_pxBrain^.GetAreaModule()^.RequestExploration(pxExplInfo);
				else
					fCost = 99999999.0f;
					SetImpossible();
				endif;	
			else 
				if(m_pxBrain^.GetFightModule()!=null)then
					var CFourCC xType = "ANML";
					var CAiObjQuery xQuery;
	
					m_xList.Clear();
					xQuery.SetType("ANML");
					xQuery.SetType("SHIP", true);
					xQuery.SetType("CHTR", true);
					xQuery.SetType("BLDG", true);
					xQuery.SetType("VHCL", true);
					xQuery.AddMyEnemiesToSearch(m_iPlayerID, true);
					xQuery.SetOwner(-1, true);
					xQuery.RegionArea(m_xMaxArea);
					
					if(xQuery.Execute(m_xList))then
						var ^CAiAttackInfo	pxAttackInfo=new CAiAttackInfo();
						if(m_bMultimap&&!m_bCustommap)then
							pxAttackInfo^.SetCanUse(CAiAttackInfo.AT_Infantry,true);
							pxAttackInfo^.SetCanUse(CAiAttackInfo.AT_NotPresent,true);
							
							if(m_bHostileArea)then
								var CAiObjWrapList xList;
								var int i, iC=Math.Min(m_xList.NumEntries(),5);
								for(i=0)cond(i<iC)iter(i++)do
									pxAttackInfo^.GetTargets().AddEntry(m_xList[i]);
								endfor;
							else
								pxAttackInfo^.GetTargets().AddEntry(m_xList[0]);
							endif;
							
							pxAttackInfo^.SetRisk(0.0);
							pxAttackInfo^.SetStrategy("quick");
							SetRequesterFor(pxAttackInfo);
							m_pxBrain^.GetFightModule()^.RequestAttack(pxAttackInfo);
						else
							if(m_pxCM!=null)then
								if(m_iDifficulty==9&&!(m_sLevelName=="_CU_MP_6_BFPW_HIGHLAND"||m_sLevelName=="BfPW - Highland"||m_sLevelName=="BfPW - HL"))then
									m_pxCM^.GetCheatMgr().SpawnResources("iron", 5);
								endif;	
							endif;
							fCost = 99999999.0f;
							SetImpossible();
						endif;
					else
						fCost = 99999999.0f;
						SetImpossible();
					endif;
				else
					fCost = 99999999.0f;
					SetImpossible();
				endif;
			endif;
			SetActive(true);
			return fCost;
		endif;
		return 0.0f;
	endproc;


	///ComputeBestAreaInBestAiMap
	proc bool ComputeBestAreaInBestAiMap(ref CAiArea po_rxMaxArea)
		if(m_pxSensor==null)then return false; endif;
		
		var ^CAiMaps	pxMaps = ^(m_pxSensor^.GetAiMaps());
		var ^CAiMaps	pxGlobalMaps = ^(m_pxSensor^.GetGlobalAiMaps());
		var CAiMap		xFriendlyAnimal;
		var CAiMap		xNeutralAnimal;
		var ^CAiMap		pxEnemy;
		var CAiArea		xSLArea;
		var int			iSearchDistStep = 4;
		var int			iMaxSearchSteps = 2;
		var int			iMaxWidth = Math.Max(pxMaps^.GetMapWidth(), pxMaps^.GetMapHeight());
		var int			iSearchDist;
		var int			iC = Math.Min(iMaxWidth / iSearchDistStep, iMaxSearchSteps);
		var int			iSLAreaX;
		var int			iSLAreaY;
		
		CAiArea.Vec3ToArea(m_pxSensor^.GetStartLocation(), iSLAreaX, iSLAreaY);
		xSLArea.SetX(iSLAreaX);
		xSLArea.SetY(iSLAreaY);
		
		xFriendlyAnimal.CopyFrom(pxGlobalMaps^.GetAiMap("FriendlyAnimal", m_iPlayerID));
		xFriendlyAnimal.OpMultiplication(pxMaps^.GetAiMap("FriendlyAnimalModifier", m_iPlayerID), true);
		xFriendlyAnimal.MultMosaicFast(m_pxSensor^.GetStartLocation());
		xNeutralAnimal.CopyFrom(pxGlobalMaps^.GetAiMap("NeutralAnimal", m_iPlayerID));
		xNeutralAnimal.OpMultiplication(pxMaps^.GetAiMap("NeutralAnimalModifier", m_iPlayerID), true);
		xNeutralAnimal.MultMosaicFast(m_pxSensor^.GetStartLocation());
		pxEnemy = ^(pxMaps^.GetAiMap("Enemy", m_iPlayerID));
		
		for(iSearchDist=0)cond(iSearchDist<iC)iter(iSearchDist+=iSearchDistStep)do
			
			po_rxMaxArea=xFriendlyAnimal.FindMaxAreaRadial(xSLArea, iSearchDist, iSearchDist+iSearchDistStep-1);
			if(xFriendlyAnimal.GetValue(po_rxMaxArea)>0.0)then
				return true;
			endif;
			
			po_rxMaxArea=xNeutralAnimal.FindMaxAreaRadial(xSLArea, iSearchDist, iSearchDist+iSearchDistStep-1);
			if(xNeutralAnimal.GetValue(po_rxMaxArea)>0.0)then
				m_bHostileArea=true;
				return true;
			endif;
			
			po_rxMaxArea=pxEnemy^.FindMinAreaRadial(xSLArea, iSearchDist, iSearchDist+iSearchDistStep-1);
			if(pxEnemy^.GetValue(po_rxMaxArea)<0.0)then
				m_bHostileArea = true;
				return true;
			endif;
		endfor;		
		
		po_rxMaxArea=xFriendlyAnimal.FindMaxArea();
		if(xFriendlyAnimal.GetValue(po_rxMaxArea)>0.0)then
			return true;
		endif;
		
		po_rxMaxArea=xNeutralAnimal.FindMaxArea();
		if(xNeutralAnimal.GetValue(po_rxMaxArea)>0.0)then
			m_bHostileArea=true;
			return true;
		endif;
		
		po_rxMaxArea=pxEnemy^.FindMinArea();
		if(pxEnemy^.GetValue(po_rxMaxArea)<0.0)then
			m_bHostileArea=true;
			return true;
		endif;
		
		return false;
	endproc;


	///Start
	export proc bool Start()
		var ^CAiSolution pxSolution=GetSolution();
		var int iResult;
		var int iCResult=pxSolution^.NumResults();
		SetRunning();		
		
		for(iResult=0)cond(iResult<iCResult)iter(iResult++)do
			if(pxSolution^.GetResult(iResult)^.IsResource())then
				m_pxResourceNI=pxSolution^.GetResult(iResult);
				m_iOldResourceCount=m_pxResourceNI^.GetInstanceCount();
				m_pxResourceNI^.DebugDump(0);
				break;
			endif;
		endfor;	
		
		SetActive(true);
		return true;
	endproc;


	///EvtRequestAccepted
	export proc void EvtRequestAccepted(^CAiRequestInfo p_pxRequest)
		SetActive(true);
	endproc;
	
	
	///EvtRequestRejected
	export proc void EvtRequestRejected(^CAiRequestInfo p_pxRequest)
		var CFourCC xATCKType="ATCK";
		var CFourCC xEXPLType="EXPL";		

		if(m_pxCM!=null)then
			if(m_iDifficulty==9&&!(m_sLevelName=="_CU_MP_6_BFPW_HIGHLAND"||m_sLevelName=="BfPW - Highland"||m_sLevelName=="BfPW - HL"))then
				m_pxCM^.GetCheatMgr().SpawnResources("iron", 5);
			endif;
		endif;
		
		if(p_pxRequest^.GetType()==xATCKType)then
			SetImpossible();
		elseif(p_pxRequest^.GetType()==xEXPLType)then
			SetImpossible();
		endif;
	endproc;
	
	
	///EvtRequestSucceeded
	export proc void EvtRequestSucceeded(^CAiRequestInfo p_pxRequest)
		var CFourCC xATCKType="ATCK";
		var CFourCC xEXPLType="EXPL";		
		SetActive(false);
		
		if(p_pxRequest^.GetType()==xATCKType)then 
			CalculateStartCost();
		elseif(p_pxRequest^.GetType()==xEXPLType)then
			CalculateStartCost();
		endif;
	endproc;
	
	
	///EvtRequestFailed
	export proc void EvtRequestFailed(^CAiRequestInfo p_pxRequest)
		var CFourCC xATCKType="ATCK";
		var CFourCC xEXPLType="EXPL";		
		
		if(m_pxCM!=null)then
			if(m_iDifficulty==9&&!(m_sLevelName=="_CU_MP_6_BFPW_HIGHLAND"||m_sLevelName=="BfPW - Highland"||m_sLevelName=="BfPW - HL"))then
				m_pxCM^.GetCheatMgr().SpawnResources("iron", 5);
			endif;
		endif;
		
		if(p_pxRequest^.GetType()==xATCKType)then
			SetImpossible();
		elseif(p_pxRequest^.GetType()==xEXPLType)then
			SetImpossible();
		endif;		
	endproc;
	
	
	///SetActive
	export proc void SetActive(bool p_bActive)
		m_bActive=p_bActive;
	endproc;
	
	
	///GetActive
	export proc bool GetActive()
		return m_bActive;
	endproc;
	
endclass;
