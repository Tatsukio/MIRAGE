/*
	This task supervises and manages given units.
*/
class CAiTaskUnitSupervisor inherit CAiTask
	
	var ^CAiBrain																m_pxBrain;
	var ^CAiSensor															m_pxSensor;
	var CAiObjWrapList													m_xUnits;
	var array int																m_aiLastHitpoints;
	export var procref <void, ref CAiObjWrap>		m_xOnUnitAttacked;
	var int																			m_iPlayerID;
	var string																	m_sPlayerID;
	
	///constructor
	export constructor()
	endconstructor;
	
	///destructor
	export destructor()
	enddestructor;
	
	///Init
	export proc void Init(^CAiGoal p_pxGoal)
		super.Init(p_pxGoal);
		if(p_pxGoal==null)then return; endif;
		m_pxBrain = GetGoal()^.GetAiBrain(); 
		if(m_pxBrain==null)then return; endif;
		m_pxSensor=^(m_pxBrain^.GetSensor());
		if(m_pxSensor==null) then return; endif;
		m_iPlayerID=m_pxBrain^.GetPlayerId();
		m_sPlayerID=m_iPlayerID.ToString();
//		var int iType = 1+Random.GetInt()%3;
		var int iType = 10;
		SetThinkWait(iType);
		var int i, iC = m_xUnits.Validate();
		for(i=0)cond(i<iC)iter(++i)do
			RemUnit(m_xUnits[i], false);
			i--;
			iC--;
		endfor;
		m_xUnits.Clear();
		m_aiLastHitpoints = 0;
		SetStarted();
	endproc;
	
	///OnUserInteraction
	export proc void OnUserInteraction(CAiObjWrap p_xOW)
		if(m_xUnits.FindEntry(p_xOW) != -1)then
			RemUnit(p_xOW, false);
		endif;
	endproc;
	
	///ComputeMeanUnitPosition
	export proc vec3 ComputeMeanUnitPosition()
		var vec3 vPos;
		var int i, iC = m_xUnits.NumEntries();
		for(i=0)cond(i<iC)iter(++i)do
			if(m_xUnits[i].IsValid() == false)then
				m_xUnits.RemEntry(m_xUnits[i]);
				i--;
				iC--;
				continue;
			endif;
			vPos += m_xUnits[i].GetPos();
		endfor;
		vPos /= iC.ToReal();
		return vPos;
	endproc;
	
	///AddUnit
	export proc void AddUnit(CAiObjWrap p_xUnit)
		var int iUnitHandle=p_xUnit.GetHandle();
		if(!p_xUnit.IsValid())then
			return;
		endif;
		if(m_xUnits.FindEntry(p_xUnit)!=-1)then return; endif;
		if(p_xUnit.GetName().Find("_bunkercrew")!=(-1))then
			return;
		endif;
		GetAiAllocationMgr()^.ExternalLock(p_xUnit);
		var int iUC = m_xUnits.Validate();
		m_xUnits.Include(p_xUnit);
		if(m_xUnits.NumEntries() > iUC)then
			if(m_pxSensor==null) then return; endif;
			m_pxSensor^.AddCheckpoint(this,iUnitHandle,"dhnd:"+iUnitHandle.ToString()+" Name: "+p_xUnit.GetName(),0.0);
			m_aiLastHitpoints.AddEntry(0);
		endif;
	endproc;
	
	///AddUnits
	export proc void AddUnits(CAiObjWrapList p_xUnits)
		var int i, iC = p_xUnits.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			if(p_xUnits[i].IsValid())then
				AddUnit(p_xUnits[i]);
			endif;
		endfor;
	endproc;
	
	///RemUnit
	export proc void RemUnit(CAiObjWrap p_xUnit, bool p_bUnlock)
		var int iUnitHandle=p_xUnit.GetHandle();
		if(p_bUnlock == true)then
			GetAiAllocationMgr()^.ExternalUnlock(p_xUnit);
		endif;
		var int iUnitIdx = m_xUnits.FindEntry(p_xUnit);
		m_xUnits.RemEntry(p_xUnit);
		if(m_pxSensor==null) then return; endif;
		m_pxSensor^.RemoveCheckpoint(this,iUnitHandle);
		if(iUnitIdx != -1)then
			m_aiLastHitpoints.DeleteEntry(iUnitIdx);
		endif;
	endproc;
	
	///RemoveUnits
	export proc void RemoveUnits(ref CAiObjWrapList p_rxUnits, bool p_bUnlock)
		var int i, iC = p_rxUnits.Validate();
		for(i=0)cond(i<iC)iter(i++)do
			RemUnit(p_rxUnits[i], p_bUnlock);
		endfor;
	endproc;
	
	///UnlockExternal
	proc void UnlockExternal()
		var int i, iC = m_xUnits.Validate();
		var ^CAiAllocationMgr pxAllocMgr = GetAiAllocationMgr();
		if(pxAllocMgr == null)then
			return;
		endif;
		for(i=0)cond(i<iC)iter(i++)do
			pxAllocMgr^.ExternalUnlock(m_xUnits[i]);
		endfor;
		m_xUnits.Clear();
		m_aiLastHitpoints = 0;
	endproc;
	
	///Shut
	export proc void Shut()
		UnlockExternal();
		var int i, iC = m_xUnits.Validate();
		for(i=0)cond(i<iC)iter(++i)do
			RemUnit(m_xUnits[i], true);
			i--;
			iC--;
		endfor;
		m_xUnits.Clear();
		m_aiLastHitpoints = 0;
		Abort();
	endproc;
	
	///GetUnits
	export proc ref CAiObjWrapList GetUnits()
		return m_xUnits;
	endproc;
	
	///EvtCheckpointReached
	export proc void EvtCheckpointReached(int p_iCheckpointId, int p_iObjHandle)
		if(m_pxSensor==null) then return; endif;
		RemUnit(m_pxSensor^.CreateObjWrap(p_iCheckpointId), true);
	endproc;
	
	///EvtCheckpointTimeout
	export proc void EvtCheckpointTimeout(int p_iCheckpointId)
	endproc;
	
	///Think
	export proc void Think()
		if(m_xOnUnitAttacked.IsNull() == true)then
			return;
		endif;
		var int i, iC = m_xUnits.NumEntries();
		for(i=0)cond(i<iC)iter(++i)do
			if(m_xUnits[i].IsValid() == false)then
				RemUnit(m_xUnits[i], false);
				i--;
				iC--;
				continue;
			endif;
			var int iCurHPs = m_xUnits[i].GetAttribValueInt("hitpoints");
			if(iCurHPs < m_aiLastHitpoints[i])then
				m_xOnUnitAttacked.Call(m_xUnits[i]);
			endif;
			m_aiLastHitpoints[i] = iCurHPs;
		endfor;
	endproc;
	
	///Save
	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CAiTaskUnitSupervisor] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var CFourCC xType="TaUS";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,1);
		var ^CArc pxArc=^(pxWalk^.GetArc());
		m_xUnits.DoKArc(pxArc^);
		pxWalk^.Close();
	endproc;
	
	///Load
	export proc void Load(^CUOFReaderNode p_pxNode)
		if(p_pxNode^.GetType()=="TaUS") then
			var ^CArc pxArc=^(p_pxNode^.GetArc());
			var CAiObjWrapList xUnits;
			xUnits.DoKArc(pxArc^);
			AddUnits(xUnits);
		else
			super.Load(p_pxNode);
		endif;
	endproc;
	
	export proc int UnitsNumber()
		return m_xUnits.Validate();
	endproc;
	
	export proc bool HasUnits()
		return m_xUnits.Validate()>0;
	endproc;
	
endclass;
