///CAiModuleAreaDefault
class CAiModuleAreaDefault inherit IAiModuleArea

	var ^CAiBrain										m_pxBrain;
	var ^CAiSensor									m_pxSensor;
	var bool												m_bIsActive;
	var int													m_iMaxWaterCrossings;
	var int													m_iExplorationMode;
	var ^CAiGoalGenralScouting			m_pxGoal;
	var ^CAiGoalIslandSurveillance	m_pxIslandGoal;
	var array ^CAiGoalWatercrossing	m_apxWaterCrossingGoals;
	var bool												m_bProtectedTransport;
	var string											m_sLevelName;
	var int													m_iPlayerID;
	var string											m_sPlayerID;
	var string 											m_sGameType;
	var int													m_iTickCnt;
	var CAiObjWrapList							m_xTouries;
	var int													m_iTouriLastChangeTick;
	
	///constructor
	export constructor()
		m_iExplorationMode = 0;
	endconstructor;
	
	///destructor
	export destructor()
	enddestructor;
	
	export proc void RegisterTourist(CAiObjWrap p_xObj)
		m_xTouries.Include(p_xObj);
		m_iTouriLastChangeTick=m_iTickCnt;
		m_pxBrain^.GetAllocationMgr().ExternalLock(p_xObj);
	endproc;
	
	export proc bool IsProtectedTransport()
		return m_bProtectedTransport;
	endproc;
	
	///init
	export proc bool Init(^CAiBrain p_pxBrain, bool p_bReInit)
		m_pxBrain=p_pxBrain;
		if(m_pxBrain==null)then return false; endif;
		m_pxSensor=^(m_pxBrain^.GetSensor());
		if(m_pxSensor==null)then return false; endif;
		var int iNumPlayers=1+m_pxSensor^.GetNumPlayers();
//		var int iType = 1+Random.GetInt()%iNumPlayers;
		var int iType = 1;
		var ^CAiModuleControlDefault pxCM=cast<CAiModuleControlDefault>(m_pxBrain^.GetControlModule());
		SetThinkWait(pxCM^.GetDifficultyInt()+iType);
		m_iPlayerID=m_pxBrain^.GetPlayerId();
		m_sPlayerID=m_iPlayerID.ToString();
		m_sLevelName=CAiUtilityMgr.Get()^.GetLevelName(m_pxBrain);
		m_sGameType=CAiUtilityMgr.Get()^.GetGameType(m_pxBrain);
		//initialize and allocate IslandSurveillance goal
		m_pxIslandGoal = new CAiGoalIslandSurveillance();
		m_pxIslandGoal^.Init(m_pxBrain);
		AddGoal(m_pxIslandGoal);
		if(m_sGameType!="Defender"&&m_sGameType!="KingOfTheHill")then
			m_pxIslandGoal^.Activate();
		endif;
		m_pxIslandGoal^.SetPriority(50.0);
		//initialize and allocate scouting goal
		m_pxGoal = new CAiGoalGenralScouting();	
		m_pxGoal^.Init(m_pxBrain);
		AddGoal(m_pxGoal);
		m_pxGoal^.SetPriority(10.0);
		m_iMaxWaterCrossings = 5;
		m_bIsActive = true;
		m_bProtectedTransport = false;
		return true;
	endproc;

	///shut
	export proc void Shut()
		super.Shut();
		m_pxIslandGoal^.Deactivate();
		RemoveGoal(m_pxIslandGoal);
		var int i, iC = m_apxWaterCrossingGoals.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			if(m_apxWaterCrossingGoals[i] == null)then
				m_apxWaterCrossingGoals.DeleteEntry(i);
				iC--;
				i--;
				continue;
			endif;
			m_apxWaterCrossingGoals[i]^.Deactivate();
			RemoveGoal(m_apxWaterCrossingGoals[i]);
			delete m_apxWaterCrossingGoals[i];
			m_apxWaterCrossingGoals.DeleteEntry(i);
			iC--;
			i--;
		endfor;
		if(m_pxGoal!=null)then
			m_pxGoal^.Deactivate();
			RemoveGoal(m_pxGoal);
			delete m_pxGoal;
		endif;
	endproc;
	
	///Save
	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CAiModuleAreaDefault] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var int i,iC=m_apxWaterCrossingGoals.NumEntries();
		var CFourCC xType="wcgs";
		for(i=0)cond(i<iC)iter(i++)do
			var ^CAiGoal pxGoal=m_apxWaterCrossingGoals[i];
			if(pxGoal==null)then continue; endif;
			if(!pxGoal^.IsActive())then continue; endif;
			var string sSaveName=pxGoal^.GetSaveName();
			if(sSaveName.IsEmpty())then continue; endif;
			var ^CUOFWriterNode pxNodeWaterXGoal=p_pxWriterNode^.AddSubChunk(xType,1);
			var ^CArc pxArc=^(pxNodeWaterXGoal^.GetArc());
			(pxArc^) << sSaveName; //only fordebugging
			pxNodeWaterXGoal^.Close();
			pxGoal^.Save(pxNodeWaterXGoal);
		endfor;
		KLog.LogWarn("CArc.Save","[CAiModuleAreaDefault] Saving done");
	endproc;
	
	///Load
	export proc void Load(^CUOFReaderNode p_pxNode)
		if(p_pxNode^.GetType()=="wcgs")then
			var ^CArc pxArc=^(p_pxNode^.GetArc());
			var string sSaveName;
			(pxArc^) << sSaveName;
			var ^CAiGoalWatercrossing pxGoalWC=AddWaterCrossingGoal();
			if(pxGoalWC!=null)then
				pxGoalWC^.LoadData(p_pxNode);
			endif;
		else
			super.Load(p_pxNode);
		endif;
	endproc;
	
	///think
	export proc void Think()
		//scouting
		if(m_bIsActive == false)then return; endif;
		m_iTickCnt++;
		if(m_xTouries.Validate()>0)then
			var array int aiTIsls;
			iterloop(m_xTouries,i)do
				var string sTask=m_xTouries[i].GetCurrentTask();
				if(sTask!="Idle"&&sTask!="HealUnit")then m_iTouriLastChangeTick=m_iTickCnt; break; endif;
				var int iIslId=m_pxSensor^.ComputeIslandId(m_xTouries[i].GetPos());
				if(iIslId>=0)then aiTIsls.AddEntry(iIslId); endif;
			enditerloop;
			if((m_iTickCnt-m_iTouriLastChangeTick)>5)then
				var CAiObjWrapList xList;
				var CAiObjQuery xQuery;
				xQuery.SetOwner(m_iPlayerID);
				xQuery.SetType("ANML");
				xQuery.SetType("CHTR",true);
				xQuery.SetType("VHCL",true);
				xQuery.SetType("BLDG",true);
				xQuery.RegionCircle(m_xTouries[0].GetPos(),128.0f);
				xQuery.Execute(xList);
				iterloop(xList,ij)do
					var string sTask=xList[ij].GetCurrentTask();
					if(m_pxBrain^.GetAllocationMgr().IsUnitLocked(xList[ij],true,true,true))then continue; endif;
					if(m_xTouries.FindEntry(xList[ij])!=-1)then continue; endif;
					var int iIslId=m_pxSensor^.ComputeIslandId(xList[ij].GetPos());
					if(aiTIsls.FindEntry(iIslId)==-1)then continue; endif;
					m_xTouries.AddEntry(xList[ij]);
					m_iTouriLastChangeTick=m_iTickCnt;
					m_pxBrain^.GetAllocationMgr().ExternalLock(xList[ij]);
				enditerloop;
			endif;
			if((m_iTickCnt-m_iTouriLastChangeTick)>10)then
				var int iHomeIslandID=(m_pxSensor^.GetOutpost(0)).GetIslandId();
				while(m_xTouries.NumEntries()>0)do
					var int iCurIslId=-1;
					var CAiObjWrapList xSend;
					iterloop(m_xTouries,i)do
						var int iIslId=m_pxSensor^.ComputeIslandId(m_xTouries[i].GetPos());
						if(iIslId<0)then m_xTouries.DeleteEntry(i); i--; continue; endif;
						if(iCurIslId==-1)then iCurIslId=iIslId; endif;
						if(iCurIslId==iIslId)then
							xSend.AddEntry(m_xTouries[i]);
							m_xTouries.DeleteEntry(i);
							i--;
						endif;
					enditerloop;
					if(xSend.NumEntries()>0&&iCurIslId!=-1)then
						var ^CAiTransferInfo pxTransInfo=IAiModuleArea.CreateTransferInfo();
						pxTransInfo^.SetIslandID(iHomeIslandID);
						var ^CAiObjWrapList pxOWL = ^(pxTransInfo^.GetTargets());
						pxOWL^.CopyFrom(xSend);
						pxTransInfo^.SetOwner(m_iPlayerID);
						pxTransInfo^.SetPos((m_pxSensor^.GetOutpost(0)).GetWorldPos());
						RequestTransfer(pxTransInfo);
					endif;
				endwhile;
			endif;
		endif;
		if(m_sLevelName!="Single 13"&&m_sLevelName!="Single 14"&&m_sLevelName!="Single 15"&&m_sLevelName!="Single 09")then
			var ^CAiExplorationInfo pxExplo = GetTopRequestedExploration();
			while(pxExplo!=null)do
				if(m_pxGoal^.IsActive()==false)then
					m_pxGoal^.Activate();
					m_pxGoal^.StartNewExplo(pxExplo);
					pxExplo^.NotifyOnAccepted();
				else
					pxExplo^.NotifyOnRejected();
				endif;
				RemoveTopRequestedExploration();
				pxExplo=GetTopRequestedExploration();
			endwhile;
		endif;
		//watercrossing
		//delete inactive goals
		var int i, iC = m_apxWaterCrossingGoals.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			if(m_apxWaterCrossingGoals[i] == null)then
				m_apxWaterCrossingGoals.DeleteEntry(i);
				iC--;
				i--;
				continue;
			endif;
			if(m_apxWaterCrossingGoals[i]^.IsActive() == false)then
				m_apxWaterCrossingGoals[i]^.Shut();
				RemoveGoal(m_apxWaterCrossingGoals[i]);
				delete m_apxWaterCrossingGoals[i];
				m_apxWaterCrossingGoals.DeleteEntry(i);
				iC--;
				i--;
			endif;
		endfor;
		var ^CAiTransferInfo pxTransfer = GetTopRequestedTransfer();
		var bool bReject;
		while(pxTransfer!=null)do
			bReject = false;
			if(m_apxWaterCrossingGoals.NumEntries() >= m_iMaxWaterCrossings)then
				bReject = true;
			endif;
			if(pxTransfer == null)then
				bReject = true;
			endif;
			if(bReject == true)then
				pxTransfer^.NotifyOnRejected(); 
				IAiModuleArea.DeleteTransferInfo(pxTransfer);
				RemoveTopRequestedTransfer();
				pxTransfer = GetTopRequestedTransfer();
				continue;
			endif;
			var ^CAiGoalWatercrossing pxGoalWC = AddWaterCrossingGoal();
			pxTransfer^.NotifyOnAccepted();
			pxGoalWC^.StartNewTransfer(pxTransfer, false);
			RemoveTopRequestedTransfer();
			pxTransfer=GetTopRequestedTransfer();
		endwhile;
	endproc;
	
	proc ^CAiGoalWatercrossing AddWaterCrossingGoal()
		var ^CAiGoalWatercrossing pxGoalWC = new CAiGoalWatercrossing();
		m_apxWaterCrossingGoals.AddEntry(pxGoalWC);
		AddGoal(pxGoalWC);
		pxGoalWC^.Init(GetBrain());
		pxGoalWC^.SetPriority(50.0);
		pxGoalWC^.Activate();
		return pxGoalWC;
	endproc;
	
	export proc void SetCustomTransfer(^CAiTransferInfo p_pxTransferInfo, CAiObjWrap p_xShip, CAiObjWrap p_xProtectorShip)
		var ^CAiGoalWatercrossing pxGoalWC = new CAiGoalWatercrossing();
		m_apxWaterCrossingGoals.AddEntry(pxGoalWC);
		AddGoal(pxGoalWC);
		pxGoalWC^.Init(GetBrain());
		pxGoalWC^.SetPriority(50.0);
		pxGoalWC^.Activate();
		p_pxTransferInfo^.NotifyOnAccepted();
		pxGoalWC^.StartNewTransfer(p_pxTransferInfo, true);
		pxGoalWC^.SetSingleplayerShip(p_xShip, p_xProtectorShip);
	endproc;

	///set behavior
	export proc bool SetBehavior(string p_sBehavior)
		var array string asTokens;
		p_sBehavior.Split(asTokens," ",false);
		if(asTokens.NumEntries()==2)then
			if(asTokens[0]=="exploration")then
				m_iExplorationMode = asTokens[1].ToInt();
			elseif(asTokens[0]=="ProtectedTransport")then
				m_bProtectedTransport = (asTokens[1] == "true");
			endif;
		elseif(asTokens.NumEntries()==1)then
			if(asTokens[0]=="disable")then
				m_bIsActive = false;
				m_pxGoal^.Deactivate();
				m_pxIslandGoal^.Deactivate();
			endif;
		endif;
		return true;
	endproc;

	export proc ^CAiGoal GetGoalByName(string p_sGoal)
		var int i,iC=NumGoals();
		if(iC<1)then return null; endif;
		for(i=0)cond(i<iC)iter(i++)do
			var ^CAiGoal pxGoal=GetGoal(i);
			if(pxGoal==null)then continue; endif;
			if(pxGoal^.GetDbgString()==p_sGoal)then
				return pxGoal;
			endif;
		endfor;
		return null;
	endproc;
	
endclass;