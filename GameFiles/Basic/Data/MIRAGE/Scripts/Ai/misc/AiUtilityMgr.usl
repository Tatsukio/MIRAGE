class CAiUtilityMgr
	
	var bool m_bCheckOnce;
	///singleton interface
	static var ^CAiUtilityMgr ms_pxInst;
	
	///Get
	export static proc ^CAiUtilityMgr Get()
		if(ms_pxInst==null)then
			ms_pxInst=new CAiUtilityMgr();
		endif;
		return ms_pxInst;
	endproc;
	
	///ShutStatic
	export static proc void ShutStatic()
		delete ms_pxInst;
	endproc;
	
	///constructor
	constructor()
		m_bCheckOnce=false;
	endconstructor;
	
	///destructor
	destructor()
	enddestructor;
	
	//GetKothSectors
	export proc bool GetKothSectors(^CAiBrain p_pxBrain, ref CAiObjWrapList po_rxKothList)
		if(p_pxBrain == null)then return false; endif;
		var array CAiGoalDisturbAttack.CFloatObjSorter axSorter;
		var CAiObjQuery xQuery;
		xQuery.SetType("DOFL");
		xQuery.Execute(po_rxKothList);
		if(po_rxKothList.NumEntries()<=0)then return false; endif;
		var ^CAiSensor pxSensor = ^(p_pxBrain^.GetSensor());	
		var vec3 vSL = pxSensor^.GetStartLocation();
		var int i, iC = po_rxKothList.NumEntries();
		for(i=0)cond(i<iC)iter(++i)do
			if(po_rxKothList[i].IsValid() == false)then
				po_rxKothList.RemEntry(po_rxKothList[i]);
				i--;
				iC--;
				continue;
			endif;
			var vec3 vPos;
			vPos=(po_rxKothList[i].GetPos());
			var real fDist = (vPos - vSL).Abs2S();
			var CAiGoalDisturbAttack.CFloatObjSorter xSorter;
			xSorter.m_fValue = -fDist;
			xSorter.m_xObj = po_rxKothList[i];
			axSorter.AddEntry(xSorter);
		endfor;
		axSorter.QSort();
		iC = axSorter.NumEntries();
		po_rxKothList.Clear();
		for(i=0)cond(i<iC)iter(++i)do
			po_rxKothList.AddEntry(axSorter[i].m_xObj);
		endfor;
		return true;
	endproc;
	
	///IsDefenderPlayer
	export proc bool IsDefenderPlayer(int p_iPlayerID)
		var bool bDefender = false;
		var CAiObjWrapList xList;
		var CAiObjQuery xQuery;
		xList.Clear();
		xQuery.SetOwner(p_iPlayerID);
		xQuery.SetClass("defender_object");
		xQuery.Execute(xList);
		if(xList.NumEntries()>0)then
			bDefender=true;
		else
			bDefender=false;
		endif;
		return bDefender;
	endproc;
	
	///IsMovingAwayFrom
	export proc bool IsMovingAwayFrom(CAiObjWrap p_xObj, vec3 p_vFrom)
		if(p_xObj.IsValid() == false)then return false; endif;
		var vec3 vOldPos;
		if(p_xObj.GetLastPos(vOldPos, 1.0) == false)then return false; endif;
		var real fDist1 = (p_xObj.GetPos() - p_vFrom).Abs2S();
		var real fDist2 = (vOldPos - p_vFrom).Abs2S();
		if(fDist2 >= fDist1)then return false; endif;
		return true;
	endproc;
	
	///DumpSolution
	export proc bool DumpSolution(^CAiBrain p_pxBrain, ^CAiSolution p_pxSol)
		if(p_pxBrain == null)then return false; endif;
		if(p_pxSol == null)then return false; endif;
		var int i, iC = p_pxSol^.NumRequired();
		for(i=0)cond(i<iC)iter(++i)do
			var CAiNeedPtr pxNeed = p_pxSol^.GetRequired(i);
			if(DumpNeed(p_pxBrain, pxNeed) == false)then
				KLog.LogWarn("AiUtilityMgr", "Failed to dump need "+i.ToString()+"!");
				continue;
			endif;
		endfor;
		return true;
	endproc;
	
	///DumpNodeinstance
	export proc bool DumpNodeInstance(^CAiBrain p_pxBrain, ^CAiNodeInstance p_pxNI)
		if(p_pxBrain==null)then return false; endif;
		if(p_pxNI==null)then return false; endif;
		var string sAttribs;
		var int iAttr, iAttrC = p_pxNI^.GetFlags().NumEntries();
		for(iAttr=0)cond(iAttr<iAttrC)iter(++iAttr)do
			sAttribs+=p_pxNI^.GetFlags().GetNameByIndex(iAttr)+"/"+p_pxNI^.GetFlags().GetValueByIndex(iAttr)+";";
		endfor;
		return true;
	endproc;
	
	///DumpNeed
	export proc bool DumpNeed(^CAiBrain p_pxBrain, CAiNeedPtr p_pxNeed)
		if(p_pxBrain==null)then return false; endif;
		if(p_pxNeed==null)then return false; endif;
		var int iOpt, iOptC = p_pxNeed.GetNeed()^.NumEntries();
		for(iOpt = 0)cond(iOpt < iOptC)iter(++iOpt)do
			var ^CAiNodeInstance pxNI = p_pxNeed.GetNeed()^.GetAt(iOpt);
			if(pxNI == null)then continue; endif;
			var string sAttribs;
			var int iAttr, iAttrC = pxNI^.GetFlags().NumEntries();
			for(iAttr=0)cond(iAttr<iAttrC)iter(++iAttr)do
				sAttribs+=pxNI^.GetFlags().GetNameByIndex(iAttr)+"/"+pxNI^.GetFlags().GetValueByIndex(iAttr)+";";
			endfor;
		endfor;
		return true;
	endproc;
	
	///ComputeCenterPosObjects
	export proc bool ComputeCenterPosObjects(ref CAiObjWrapList p_rxOWList,  ref vec3 po_rvPos)
		var int i, iC = p_rxOWList.NumEntries();
		var int iValidCount = 0;
		po_rvPos = {0.0, 0.0, 0.0};
		for(i=0)cond(i<iC)iter(++i)do
			if(p_rxOWList[i].IsValid() == false)then continue; endif;
			iValidCount++;
			po_rvPos += p_rxOWList[i].GetPos();
		endfor;
		if(iValidCount <= 0)then return false; endif;
		po_rvPos /= iValidCount.ToReal();
		return true;
	endproc;
	
	//GetPersonality
	export proc string GetPersonality(^CAiBrain p_pxBrain)
		if(p_pxBrain==null)then return ""; endif;
		var ^CAiModuleControlDefault pxCM;
		pxCM=cast<CAiModuleControlDefault>(p_pxBrain^.GetControlModule());
		if(pxCM==null)then return ""; endif;
		return pxCM^.GetBehaviorType();
	endproc;
	
	//FindHarbourPos
	export proc vec3 FindHarbourPos(^CAiBrain p_pxBrain)
		if(p_pxBrain == null)then return {0.0, 0.0, 0.0}; endif;
		var CAiObjQuery xOQ;
		var string sTribe = p_pxBrain^.GetSensor().GetTechTree().GetTribe();
		var string sClass;
		if(sTribe == "Hu")then
			sClass = "hu_harbour";
		elseif(sTribe == "Aje")then
			sClass = "aje_floating_harbour";
		elseif(sTribe == "Ninigi")then
			sClass = "ninigi_harbour";
		elseif(sTribe == "SEAS")then
			sClass = "seas_carrier";
		else
			return {0.0, 0.0, 0.0};
		endif;
		var CAiObjWrapList xList;
		xOQ.SetClass(sClass);
		xOQ.SetOwner(p_pxBrain^.GetPlayerId());
		xOQ.Execute(xList);
		if(xList.NumEntries() <= 0)then
			return {0.0, 0.0, 0.0};
		endif;
		var int i, iC = xList.NumEntries();
		for(i=0)cond(i<iC)iter(++i)do
			if(!xList[i].IsValid())then continue; endif;
			var vec3 vPos = xList[i].GetPos();
			return vPos;
		endfor;
		return {0.0, 0.0, 0.0};
	endproc;
	
	//FindNearestOwningObjOfClassAtPos
	export proc bool FindNearestOwningObjOfClassAtPos(^CAiBrain p_pxBrain, string p_sClass, vec3 p_vSearchPos, ref CAiObjWrap po_rxObj)
		if(p_pxBrain == null)then return false; endif;
		var CAiObjQuery xOQ;
		var CAiObjWrapList xList;
		xOQ.SetClass(p_sClass);
		xOQ.SetOwner(p_pxBrain^.GetPlayerId());
		xOQ.Execute(xList);
		if(xList.NumEntries() <= 0)then return false; endif;
		var real fMinDist = 10000000.0;
		var int iBestIdx = -1;
		var int i, iC = xList.NumEntries();
		for(i=0)cond(i<iC)iter(++i)do
			if(xList[i].IsValid() == false)then continue; endif;
			var real fDist = (xList[i].GetPos() - p_vSearchPos).Abs2S();
			if(fDist < fMinDist)then
				fMinDist = fDist;
				iBestIdx = i;
			endif;
		endfor;
		if(iBestIdx == -1)then return false; endif;
		po_rxObj = xList[iBestIdx];
		return true;
	endproc;
	
	///IsDefending
	export proc bool IsDefending(^CAiBrain p_pxBrain)
		if(p_pxBrain == null)then return false; endif;
		var ^CAiModuleDefenseDefault pxDM = cast<CAiModuleDefenseDefault>(p_pxBrain^.GetDefenseModule());		
		if(pxDM == null)then return false; endif;
		return pxDM^.IsDefending();
	endproc;
	
	///GetNearestPassablePointInArea
	export proc vec3 GetNearestPassablePointInArea(CAiArea p_xArea, ^CAiSensor p_pxSensor)
		var vec3 vPos = p_xArea.GetWorldCenterPos();
		if(p_pxSensor == null)then return vPos; endif;
		p_pxSensor^.GetFixedPosLand(vPos);
		return vPos;
	endproc;

	///StopUnits
	export proc void StopUnits(ref CAiObjWrapList p_rxUnits, ^CAiSensor p_pxSensor)
		if(p_pxSensor == null)then return; endif;
		var int i, iC = p_rxUnits.NumEntries();
		for(i=0)cond(i<iC)iter(++i)do
			if(p_rxUnits[i].IsValid() == false)then continue; endif;
			p_pxSensor^.ExecuteGamePlayCommand(p_rxUnits[i].GetHandle(), "Action", -1, p_rxUnits[i].GetPos(), "/Stop");
		endfor;
	endproc;
	
	///StopUnits
	export proc bool WalkToPos(^CAiSensor p_pxSensor, ref CAiObjWrapList p_rxUnits, vec3 p_vPos)
		if(p_pxSensor == null)then return false; endif;
		return p_pxSensor^.ExecuteGamePlayCommand(p_rxUnits, "Action", -1, p_vPos, "/Walk");
	endproc;
	
	///GetMOD
	export proc ^CAiGoalMinistryOfDefense GetMOD(^CAiBrain p_pxBrain)
		if(p_pxBrain == null)then return null; endif;
		var ^CAiModuleDefenseDefault pxDM=cast<CAiModuleDefenseDefault>(p_pxBrain^.GetDefenseModule());
		if(pxDM==null)then return null; endif;
		return ^(pxDM^.GetMOD());
	endproc;
	
	///GetEconomyModule
	export proc ^CAiModuleEconomyDefault GetEconomyModule(^CAiBrain p_pxBrain)
		if(p_pxBrain == null)then endif;
		var ^CAiModuleEconomyDefault pxEM = cast<CAiModuleEconomyDefault>(p_pxBrain^.GetEconomyModule());
		return pxEM;
	endproc;
	
	//GetGameType
	export proc string GetGameType(^CAiBrain p_pxBrain)
		if(p_pxBrain==null)then return ""; endif;
		var ^CAiSensor pxSensor=^(p_pxBrain^.GetSensor());
		if(pxSensor==null)then return ""; endif;
		var string sType;
		var int iGameType=pxSensor^.GetMapType();
		if(iGameType==0)then
			sType="Deathmatch";
		elseif(iGameType==1)then
			sType="KingOfTheHill";
		elseif(iGameType==2)then
			sType="Defender";
		endif;
		return sType;
	endproc;
	
	//GetLevelFileName
	export proc string GetLevelFileName(^CAiBrain p_pxBrain)
		if(p_pxBrain==null)then return ""; endif;
		var ^CAiSensor pxSensor=^(p_pxBrain^.GetSensor());
		var string sLevelFileName=pxSensor^.GetMapName();
		var string sType;
		var array string asFileName;
		sLevelFileName.Split(asFileName, "/", false);
		var int i,iC=asFileName.NumEntries();
		if(iC>1)then
			sType=asFileName[iC-1];
		else
			sType="";
		endif;
		return sType;
	endproc;
	
	///GetLevelName
	export proc string GetLevelName(^CAiBrain p_pxBrain)
		if(p_pxBrain==null)then return ""; endif;
		var ^CAiSensor pxSensor=^(p_pxBrain^.GetSensor());
		var string sLevelName=pxSensor^.GetLevelName();
		return sLevelName;
	endproc;
	
	//GetCurrentAge
	export proc int GetCurrentAge(^CAiBrain p_pxBrain)
		if(p_pxBrain==null)then return 0; endif;
		var ^CAiTechTree pxTechTree = ^(p_pxBrain^.GetSensor().GetTechTree());
		var int iAge;
		var ^CAiNodeInstance pxNI;
		for(iAge=5)cond(iAge>1)iter(--iAge)do
			var string sAge = "age_"+iAge.ToString();
			pxNI = pxTechTree^.GetNodeInstanceFromPartialName(sAge);
			if(pxNI == null)then
				continue;
			endif;
			if(pxNI^.GetInstanceCount() > 0)then
				break;
			endif;
		endfor;
		return iAge;
	endproc;
	
	//GetCurrentAge
	export proc int GetCurrentAge(^CAiBrain p_pxBrain, bool p_bCheckSE)
		if(p_pxBrain==null)then return 0; endif;
		var ^CAiTechTree pxTechTree = ^(p_pxBrain^.GetSensor().GetTechTree());
		var ^CAiNodeInstance pxNI;
		if(p_bCheckSE&&pxTechTree!=null)then
			var ^CAiNodeInstance pxNI=pxTechTree^.GetNodeInstanceFromPartialName("InventObjects/final_stage");
			if(pxNI!=null&&pxNI^.GetInstanceCount()>0)then
				return 6;
			endif;
		endif;
		var int iAge;
		for(iAge=5)cond(iAge>1)iter(--iAge)do
			var string sAge = "age_"+iAge.ToString();
			pxNI = pxTechTree^.GetNodeInstanceFromPartialName(sAge);
			if(pxNI == null)then
				continue;
			endif;
			if(pxNI^.GetInstanceCount() > 0)then
				break;
			endif;
		endfor;
		return iAge;
	endproc;
	
	///SetDefenderPlayOpinion
	export proc void SetDefenderPlayOpinion(^CAiBrain p_pxBrain)
		//Enemy=0	Neutral=1	Friend=2
		if(p_pxBrain==null)then return; endif;
		var ^CAiSensor pxSensor=^(p_pxBrain^.GetSensor());
		var int i, iC=pxSensor^.GetNumPlayers();
		if(p_pxBrain^.GetPlayerId()==0)then
			for(i=1)cond(i<iC)iter(i++)do
				pxSensor^.SetDiplomacyOpinion(i,0);
			endfor;
		else
			for(i=1)cond(i<iC)iter(i++)do
				pxSensor^.SetDiplomacyOpinion(i,2);
			endfor;
			pxSensor^.SetDiplomacyOpinion(0,0);
		endif;
	endproc;
	
	///SortTargetList
	export proc CAiObjWrapList SortTargetList(^CAiBrain p_pxBrain, CAiObjWrapList p_xTargetList, bool p_bAmphibianPathfinding)		
		var CAiObjWrapList xChtr, xVhcl,xAnml, xWall, xTower, xHouse, xShip;
		var CAiObjWrapList xInvalid;
		var CAiObjWrapList xTargetList;
		xTargetList.Clear();
		if(p_pxBrain==null)then return xInvalid; endif;
		if(p_xTargetList.NumEntries()==0)then return xInvalid; endif;
		var int j;
		for(j=0)cond(j<p_xTargetList.NumEntries())iter(j++)do
			if(p_xTargetList[j].GetType()=="SHIP")then
				xShip.AddEntry(p_xTargetList[j]);
				return p_xTargetList;
			elseif(p_xTargetList[j].GetType()=="CHTR")then
				xChtr.AddEntry(p_xTargetList[j]);
			elseif(p_xTargetList[j].GetType()=="BLDG")then
				if(p_xTargetList[j].IsWall())then
					xWall.AddEntry(p_xTargetList[j]);
				elseif(p_xTargetList[j].IsTower())then
					xTower.AddEntry(p_xTargetList[j]);
				else
					xHouse.AddEntry(p_xTargetList[j]);
				endif;
			elseif(p_xTargetList[j].GetType()=="VHCL")then
				xVhcl.AddEntry(p_xTargetList[j]);
			elseif(p_xTargetList[j].GetType()=="ANML")then
				xAnml.AddEntry(p_xTargetList[j]);
			endif;
		endfor;
		var int iPlayerID=p_pxBrain^.GetPlayerId();
		var bool bPathFound=CheckPathToTargetPlace(p_pxBrain, p_xTargetList, p_bAmphibianPathfinding);
		if(bPathFound)then
			if(xVhcl.NumEntries()>0)then
			xTargetList.Include(xVhcl);
			endif;
			if(xAnml.NumEntries()>0)then
				xTargetList.Include(xAnml);
			endif;
			if(xTower.NumEntries()>0)then
				xTargetList.Include(xTower);
			endif;
			if(xChtr.NumEntries()>0)then
				xTargetList.Include(xChtr);
			endif;
			if(xHouse.NumEntries()>0)then
				xTargetList.Include(xHouse);
			endif;
			if(xWall.NumEntries()>0)then
				xTargetList.Include(xWall);
			endif;
			if(xShip.NumEntries()>0)then
				xTargetList.Include(xShip);
			endif;
		else
			if(xWall.NumEntries()>0)then
				xTargetList.Include(xWall);
			endif;
			if(xTower.NumEntries()>0)then
				xTargetList.Include(xTower);
			endif;
			if(xVhcl.NumEntries()>0)then
				xTargetList.Include(xVhcl);
			endif;
			if(xAnml.NumEntries()>0)then
				xTargetList.Include(xAnml);
			endif;
			if(xChtr.NumEntries()>0)then
				xTargetList.Include(xChtr);
			endif;
			if(xHouse.NumEntries()>0)then
				xTargetList.Include(xHouse);
			endif;
			if(xShip.NumEntries()>0)then
				xTargetList.Include(xShip);
			endif;
		endif;
		return xTargetList;
	endproc;
	
	///CheckPathToTargetPlace->TargetPos
	export proc bool CheckPathToTargetPlace(^CAiBrain p_pxBrain, vec3 p_vDestinationPos, bool p_bAmphibianPathfinding)
		return CheckPathToTargetPlace(p_pxBrain,p_vDestinationPos,p_bAmphibianPathfinding, null, {0.0,0.0,0.0});
	endproc;

	export proc bool CheckPathToTargetPlace(^CAiBrain p_pxBrain, vec3 p_vDestinationPos, bool p_bAmphibianPathfinding,^CAiObjWrapList p_pxWalls,vec3 p_vPosStart)
		var ^CAiSensor pxSensor = ^(p_pxBrain^.GetSensor());
		if(pxSensor==null)then return false; endif;
		var CAiPathPtr pxPath;
		var vec3 vStartPos=pxSensor^.GetStartLocation();
		var bool bPathFound = true;
		if(p_vPosStart.GetX()>0.0) then vStartPos=p_vPosStart; endif;
		pxPath = pxSensor^.CalcPath(vStartPos, p_vDestinationPos, false, p_bAmphibianPathfinding);
		if(pxPath==null)then
			bPathFound=false;
		else
			if(pxPath.GetPath()^.NumEntries()<=0)then
				bPathFound=false;
			else
				var vec3 vFoundDest = pxPath.GetPath()^.Get(pxPath.GetPath()^.NumEntries()-1);
				if((p_vDestinationPos-vFoundDest).Abs2S()>20.0)then
					bPathFound=false;
					if(p_pxWalls!=null&&!p_bAmphibianPathfinding) then
						pxPath=pxSensor^.CalcPathIntersectingWalls(vFoundDest,p_vDestinationPos,p_pxWalls^);
					endif;
				else
					bPathFound=true;
				endif;
			endif;
		endif;
		return bPathFound;
	endproc;
	
	///CheckPathToTargetPlace-> TargetList
	export proc bool CheckPathToTargetPlace(^CAiBrain p_pxBrain, CAiObjWrapList p_xTargetList, bool p_bAmphibianPathfinding)
		return CheckPathToTargetPlace(p_pxBrain,p_xTargetList,p_bAmphibianPathfinding,null,{0.0,0.0,0.0});
	endproc;
	
	export proc bool CheckPathToTargetPlace(^CAiBrain p_pxBrain,ref CAiObjWrapList p_rxTargetList, bool p_bAmphibianPathfinding,^CAiObjWrapList p_pxWalls,vec3 p_vPosStart)
		var ^CAiSensor pxSensor = ^(p_pxBrain^.GetSensor());
		if(pxSensor==null)then return false; endif;
		var CAiPathPtr pxPath;
		var vec3 vEndPos={0.0,0.0,0.0};
		var int i, iC=p_rxTargetList.NumEntries();
		if(iC>0)then
			for(i=0)cond(i<iC)iter(i++)do
				if(p_rxTargetList[i].IsValid())then
					if(!p_rxTargetList[i].IsWall())then
						vEndPos=p_rxTargetList[i].GetPos();
						break;
					endif;
				endif;
			endfor;
		else
			return false;
		endif;
		if(vEndPos=={0.0,0.0,0.0})then
			return false;
		endif;
		var vec3 vStartPos=pxSensor^.GetStartLocation();
		var bool bPathFound = true;
		if(p_vPosStart.GetX()>0.0) then vStartPos=p_vPosStart; endif;
		pxPath = pxSensor^.CalcPath(vStartPos, vEndPos, false, p_bAmphibianPathfinding);
		if(pxPath==null||pxPath.GetPath()^.NumEntries()<=0)then
			return false;
		endif;
		var vec3 vFoundDest=pxPath.GetPath()^.Get(pxPath.GetPath()^.NumEntries() - 1);
		if((vEndPos-vFoundDest).Abs2S()>144.0)then //12m
			bPathFound=false;
		else
			bPathFound=true;
		endif;
		if(!bPathFound&&p_pxWalls!=null&&!p_bAmphibianPathfinding) then
			pxPath=pxSensor^.CalcPathIntersectingWalls(vFoundDest,vEndPos,p_pxWalls^);
		endif;
		if(p_rxTargetList.NumEntries()>0) then
			if(p_rxTargetList[0].GetOwner()>=0) then
				pxSensor^.ProcessPathPossibleAtkOutpostPositions(pxPath,vEndPos);
			endif;
		endif;
		return bPathFound;
	endproc;
	
	///CheckForEnemy
	export proc bool CheckForEnemy(^CAiBrain p_pxBrain, vec3 p_vPos)
		var CAiObjWrapList xList;
		var CAiObjWrapList xAggressiveList;
		var CAiObjQuery xQuery;
		var CAiObjQuery xAggressiveQuery;
		var int iBuildingCount=0;
		var int iUnitCount=0;
		var string sAttackType="";
		if(p_pxBrain==null) then return false; endif;
		var ^CAiSensor pxSensor = ^(p_pxBrain^.GetSensor());
		var string sLevelName=pxSensor^.GetLevelName();
		if(pxSensor==null)then return false; endif;
		var ^CAiModuleControlDefault pxCM=cast<CAiModuleControlDefault>(p_pxBrain^.GetControlModule());	
		var int iPlayerID=p_pxBrain^.GetPlayerId();
		xList.Clear();
		xAggressiveList.Clear();
		xQuery.AddMyEnemiesToSearch(iPlayerID, true);
		xQuery.SetType("ANML");
		xQuery.SetType("VHCL",true);
		xQuery.SetType("CHTR",true);
		xQuery.SetType("BLDG",true);
		xQuery.SetType("SHIP",true);
		xQuery.RegionCircle(p_vPos, 60.0);
		xQuery.Execute(xList);
		if(pxSensor^.GetMultimap()&&!CMirageAIMgr.Get().CheckCustomAI(sLevelName,iPlayerID.ToString(),"CampaignAI"))then
			xAggressiveQuery.SetOwner(-1);
			xAggressiveQuery.SetType("ANML");
			xAggressiveQuery.SetType("NEST",true);
			xAggressiveQuery.RegionCircle(p_vPos, 60.0);
			xAggressiveQuery.Execute(xAggressiveList);
			var int j, iD=xAggressiveList.Validate();
			if(iD>0)then
				for(j=0)cond(j<iD)iter(j++)do
					if(!xAggressiveList[j].IsHostile())then
						xAggressiveList.RemEntry(xAggressiveList[j]);
						j--; iD--;
					endif;
				endfor;
			endif;
			xList.Include(xAggressiveList);
		endif;
		var int i, iC=xList.NumEntries();
		if(iC<=0)then return true; endif;
		if(pxCM!=null)then
			if(pxCM^.GetAIAssistEnabled())then
				if(pxCM^.GetAIAssistEconomy()&&!pxCM^.GetAIAssistDefense()&&!pxCM^.GetAIAssistFight())then return true; endif;
			endif;
		endif;
		for(i=0)cond(i<iC)iter(i++)do
			if(i<0)then break; endif;
			if(!xList[i].IsValid())then continue; endif;
			if(xList[i].GetType()=="BLDG")then
				iBuildingCount++;
			else
				iUnitCount++;
			endif;
		endfor;
		if(iBuildingCount>iUnitCount)then
			sAttackType="siege";
		else
			sAttackType="suicide";
		endif;
		var ^CAiAttackInfo pxAttackInfo = new CAiAttackInfo();
		pxAttackInfo^.SetCanUse(CAiAttackInfo.AT_NotPresent,true);
		pxAttackInfo^.GetTargets().CopyFrom(xList); 
		pxAttackInfo^.SetRisk(100.0);
		pxAttackInfo^.SetStrategy(sAttackType);
		if(xList[0].IsValid())then
			pxAttackInfo^.SetIslandID(pxSensor^.ComputeIslandId(xList[0].GetPos()));
		endif;
		p_pxBrain^.GetFightModule()^.RequestAttack(pxAttackInfo);
		return false;
	endproc;
	
	///UnlockExternal
	export proc void UnlockExternal(^CAiTask p_pxTask, ref CAiObjWrapList p_rxObjs)
		var ^CAiAllocationMgr pxAllocMgr = p_pxTask^.GetAiAllocationMgr();
		if(pxAllocMgr == null)then return; endif;
		var int i, iC = p_rxObjs.NumEntries();
		for(i=0)cond(i<iC)iter(++i)do
			if(p_rxObjs[i].IsValid())then
				pxAllocMgr^.ExternalUnlock(p_rxObjs[i]);
			endif;
		endfor;
	endproc;
	
	///LockExternal
	export proc void LockExternal(^CAiTask p_pxTask, ref CAiObjWrapList p_rxObjs)
		var ^CAiAllocationMgr pxAllocMgr = p_pxTask^.GetAiAllocationMgr();
		if(pxAllocMgr == null)then return; endif;
		var int i, iC = p_rxObjs.NumEntries();
		for(i=0)cond(i<iC)iter(++i)do
			pxAllocMgr^.ExternalLock(p_rxObjs[i],"util");
		endfor;
	endproc;
	
	///GetFourCC
	export proc string GetFourCC(string p_sClassName)
		var string sFourCC = "";
		//specials
		if(p_sClassName=="Cole_s0")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="Stina_s0"||p_sClassName=="special_eusmilus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="Bela_s0")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="lovelace_s0")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="babbage_s0")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="special_mobile_suit")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="mayor_s0")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="tesla_s0")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="darwin_s0")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="hermit_s0")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="schliemann_s0"||p_sClassName=="schliemann_zombie")then
			sFourCC = "CHTR";
		//Henry: adding new heroes type
		elseif(p_sClassName=="livingstone_s0")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="Larry_s0")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="Tarna_s0")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="Miyagi_s0")then
			sFourCC = "ANML";

		//hu
		elseif(p_sClassName=="hu_worker")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="hu_spearman")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="hu_pikeman")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="hu_archer")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="hu_marksman")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="hu_jetpack_warrior")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="hu_berserker")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="hu_killer")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="hu_druid")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="hu_warrior")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="hu_wild_boar")then
			sFourCC = "ANML";
		elseif(p_sClassName=="hu_pteranodon")then
			sFourCC = "ANML";
		elseif(p_sClassName=="hu_scout")then
			sFourCC = "ANML";
		elseif(p_sClassName=="hu_chariot")then
			sFourCC = "ANML";
		elseif(p_sClassName=="hu_rhino")then
			sFourCC = "ANML";
		elseif(p_sClassName=="hu_rhino_transporter")then
			sFourCC = "ANML";
		elseif(p_sClassName=="hu_rhino_ballista")then
			sFourCC = "ANML";
		elseif(p_sClassName=="hu_mammoth")then
			sFourCC = "ANML";
		elseif(p_sClassName=="hu_mammoth_lumber_upgrade")then
			sFourCC = "ANML";
		elseif(p_sClassName=="hu_eusmilus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="hu_mammoth_log_cannon")then
			sFourCC = "ANML";
		elseif(p_sClassName=="hu_kentrosaurus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="hu_triceratops")then
			sFourCC = "ANML";
		elseif(p_sClassName=="hu_ballista_titan")then
			sFourCC = "ANML";
		elseif(p_sClassName=="hu_steam_tank")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="hu_zeppelin")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="hu_mobile_suit")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="hu_steam_ram")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="hu_cart")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="hu_transport_ship")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="hu_fishing_boat")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="hu_dragon_boat")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="hu_ram_ship")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="hu_steam_boat")then
			sFourCC = "SHIP";
		//Henry: adding new nm uits type
		elseif(p_sClassName=="hu_flamethrower")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="hu_colossi")then
			sFourCC = "VHCL";

		//aje
		elseif(p_sClassName=="aje_worker")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="aje_warrior")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="aje_scythian")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="aje_rammer")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="aje_assassin")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="aje_poisoner")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="aje_archer")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="aje_thrower")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="aje_spearman")then
			sFourCC = "CHTR";
		//Henry: namefix
		elseif(p_sClassName=="aje_shaman")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="aje_resource_collector")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_dilophosaurus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_ankylosaurus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_ankylosaurus_catapult")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_ankylosaurus_catapult_dino")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_ankylosaurus_catapult_stone")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_stegosaurus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_stegosaurus_transporter")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_brachiosaurus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_brachiosaurus_catapult")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_brachiosaurus_transporter")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_brachiosaurus_siege")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_brachiosaurus_mobile_camp")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_velociraptor_handler")then
			sFourCC = "ANML";
		//Henry: replaced by new warden nest
		elseif(p_sClassName=="aje_tracker_dino")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_eusmilus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_triceratops")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_triceratops_archer")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_allosaurus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_atroxosaurus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_trade_dino")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_transport_turtle")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="aje_torpedo_turtle")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="aje_cronosaurus")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="aje_catamaran")then
			sFourCC = "SHIP";
		//Herny: new dr units type
		elseif(p_sClassName=="aje_flamethrower")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="aje_pteranodon")then
			sFourCC = "ANML";
		elseif(p_sClassName.Find("aje_catapult_rex")!=-1)then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_tyrannosaurus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="aje_mosasaurus")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="aje_liopleurodon")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="aje_zeppelin")then
			sFourCC = "VHCL";

		//ninigi
		elseif(p_sClassName=="ninigi_worker")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="ninigi_archer")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="ninigi_warrior")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="ninigi_sumo")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="ninigi_spearman")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="ninigi_monk")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="ninigi_icespearman")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="ninigi_mortar")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="ninigi_marksman")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="ninigi_ninja")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="ninigi_scout")then
			sFourCC = "ANML";
		elseif(p_sClassName=="ninigi_baryonyx")then
			sFourCC = "ANML";
		elseif(p_sClassName=="ninigi_parasaurolophus_drums")then
			sFourCC = "ANML";
		elseif(p_sClassName=="ninigi_parasaurolophus_gatling")then
			sFourCC = "ANML";
		elseif(p_sClassName=="ninigi_saltasaurus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="ninigi_saltasaurus_archer")then
			sFourCC = "ANML";
		elseif(p_sClassName=="ninigi_saltasaurus_launcher")then
			sFourCC = "ANML";
		elseif(p_sClassName=="ninigi_styracosaurus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="ninigi_triceratops")then
			sFourCC = "ANML";
		elseif(p_sClassName=="ninigi_eusmilus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="ninigi_seismosaurus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="ninigi_kong")then
			sFourCC = "ANML";
		elseif(p_sClassName=="ninigi_smokebomb_thrower")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="ninigi_flamethrower_trike")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="ninigi_siegetower")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="ninigi_harvester")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="ninigi_firecannon")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="ninigi_helicopter")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="ninigi_cart")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="ninigi_fishing_boat")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="ninigi_minelayer")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="ninigi_mineship_mine")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="ninigi_fire_boat")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="ninigi_muraeno_submarine")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="ninigi_rocket_boat")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="ninigi_corsair")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="ninigi_water_turret")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="ninigi_transport_boat")then
			sFourCC = "SHIP";
		//Henry: new dc units type
		elseif(p_sClassName=="ninigi_tarbosaurus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="ninigi_cargolifter")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="ninigi_zeppelin")then
			sFourCC = "VHCL";

		//SEAS
		elseif(p_sClassName=="seas_worker")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="seas_warrior")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="seas_marksman")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="seas_gunner")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="seas_rocketman")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="seas_flamethrower")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="seas_medic")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="seas_mercenary")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="seas_sniper")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="seas_spearman")then
			sFourCC = "CHTR";
		elseif(p_sClassName=="seas_triceratops")then
			sFourCC = "ANML";
		elseif(p_sClassName=="seas_triceratops_transporter")then
			sFourCC = "ANML";
		elseif(p_sClassName=="seas_triceratops_carrier")then
			sFourCC = "ANML";
		elseif(p_sClassName=="seas_triceratops_machinegun")then
			sFourCC = "ANML";
		elseif(p_sClassName=="seas_triceratops_resource_collector")then
			sFourCC = "ANML";
		elseif(p_sClassName=="seas_mechanical_walker")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="seas_mobile_suit")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="seas_mobile_suit_flamethrower")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="seas_mobile_terminator")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="seas_wehrspinne")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="seas_lumberjack")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="seas_lumberjack_minigun")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="seas_hovercraft")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="seas_helicopter")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="seas_helicopter_flying")then
			sFourCC = "VHCL";
		elseif(p_sClassName=="seas_submarine")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="seas_eusmilus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="seas_trade_dino")then
			sFourCC = "ANML";
		elseif(p_sClassName=="seas_rex")then
			sFourCC = "ANML";
		elseif(p_sClassName=="seas_gigantosaurus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="seas_cannon_turtle")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="seas_carnotaurus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="seas_mosasaurus")then
			sFourCC = "SHIP";
		elseif(p_sClassName=="seas_polakanthus")then
			sFourCC = "ANML";
		elseif(p_sClassName=="seas_zeppelin")then
			sFourCC = "VHCL";
		else
			sFourCC= "";
		endif;
		return sFourCC;
	endproc;
	
endclass;
