class CAiGoalAttackGroup inherit CAiGoalGeneralAttack

	var CAiObjWrap			m_xLastEnemy;
	static var CPropDB		ms_xCompareDB;
	var int					m_iArmyModifier;

	//constructor
	export constructor()
	endconstructor;


	//destructor
	export destructor()
	enddestructor;


	//Init
	export proc bool Init(^CAiBrain p_pxBrain)
		super.Init(p_pxBrain);
		
		m_pxBrain = p_pxBrain;
		if(m_pxBrain==null)then return false; endif;
		
		m_pxSensor=^(m_pxBrain^.GetSensor());
		if(m_pxSensor==null) then return false; endif;
		
		m_iPlayerID=m_pxBrain^.GetPlayerId();
		m_sPlayerID=m_iPlayerID.ToString();
		m_sLevelName=CAiUtilityMgr.Get()^.GetLevelName(m_pxBrain);
		
		var int iNumPlayers=1+m_pxSensor^.GetNumPlayers();
//		var int iType = 1+Random.GetInt()%iNumPlayers;
		var int iType = 1;
		
		var ^CAiModuleControlDefault pxCM=cast<CAiModuleControlDefault>(m_pxBrain^.GetControlModule());
		SetThinkWait(pxCM^.GetDifficultyInt()+iType);
		
		m_sState = "";
		m_xOnEnemiesFound = OnEnemiesFound;
		m_xOnCalculateEnemyValue = OnCalculateValue;
		m_iArmyModifier = 1;

		if(ms_xCompareDB.GetRoot().NumSubs()<=0)then
			if(!ms_xCompareDB.Load(m_pxSensor^.GetUrsRelPath()+"/Data/Base/Scripts/Ai/settings/CompareValue.txt"))then
				KLog.LogWarn("AiGoalAttackGroup","Auto Attack failed to load ../Data/Base/Scripts/Ai/settings/CompareValue.txt! PlayerID: "+m_sPlayerID);
			endif;
		endif;

		return true;
	endproc;


	///SetArmyModifyer
	export proc void SetArmyModifier(int p_iMod)
		m_iArmyModifier = p_iMod;
	endproc;


	//Start
	export proc bool Start(^CAiAttackInfo p_pxAttackInfo)
		if((m_sLevelName=="Single 07")||(m_sLevelName=="Single 13")||(m_sLevelName=="Single 14"))then
			return false;
		endif;
		
		var bool bReturn = super.Start(p_pxAttackInfo);
		if(!bReturn)then return false; endif;
		
		var int i, iC = m_xEnemies.NumEntries();
		if(iC > 0)then
			var bool bAppend = false;
			for(i=0)cond(i<iC)iter(i++)do
				if(m_xEnemies[i].IsValid()==true)then
					GetEnemyQuery().SetOwner(m_xEnemies[i].GetOwner(),bAppend);
					GetEnemyQuery().SetType(m_xEnemies[i].GetType(),bAppend);
					if(!bAppend)then bAppend = true; endif;
				endif;
			endfor;
		else
			GetEnemyQuery().AddMyEnemiesToSearch(m_iPlayerID, true);
			GetEnemyQuery().SetOwner(-1, true);
			GetEnemyQuery().SetType("CHTR");
			GetEnemyQuery().SetType("ANML",true);
			GetEnemyQuery().SetType("VHCL",true);
			GetEnemyQuery().SetType("BLDG",true);
		endif;
		m_sState = "new";
		return true;
	endproc;
	
	
	//OnEnemiesFound
	proc void OnEnemiesFound(ref CAiObjWrapList p_rxList)
		m_xEnemies.CopyFrom(p_rxList);
		if(m_xEnemies.NumEntries()>0)then
			m_xLastEnemy = m_xEnemies[0];
		endif;
	endproc;
	
	
	//OnCalculateValue
	proc void OnCalculateValue(ref CAiObjWrap p_rxEnemy, ref real p_rfValue)
		if(p_rxEnemy.GetType()=="BLDG" || p_rxEnemy.GetClassName()=="aje_resource_collector")then
			p_rfValue-=0.9;
		elseif(p_rxEnemy.IsSameAs(m_xLastEnemy))then
			p_rfValue+=0.1;
		endif;
	endproc;

	
	//Shut
	export proc void Shut()
		super.Shut();
	endproc;

	
	//Think
	export proc void Think()
		super.Think();
		if(m_pxBrain==null)then return; endif;
		if(m_pxSensor==null)then return; endif;

		var ^CAiModuleControlDefault pxCM = cast<CAiModuleControlDefault>(m_pxBrain^.GetControlModule());
		if(pxCM == null)then return; endif;
		
		var ^CAiGoalMinistryOfDefense pxMOD = GetMOD();
		if(pxMOD == null)then return; endif;
		
		if(m_sState=="new")then			
			var bool			bSucceeded = false;
			var CAiObjWrapList	xUnits;

			m_xAllocator.StartAsSupervisor();
			
			var int iMax = m_iArmyModifier * m_xEnemies.NumEntries();
			var int iMin = Math.Max(iMax / 2, 1);
			
			if(iMin<1)then iMin=1; endif;
			if(iMax<4)then iMax=4; endif;
						
			var bool	bQuerySucceeded;
			var string	sTribe = m_pxSensor^.GetTechTree().GetTribe();
			//Henry: limited to campaign
			//if(sTribe == "SEAS")then
			if(sTribe == "SEAS" && (!m_pxSensor^.GetMultimap() || CMirageAIMgr.Get().CheckCustomAI(m_sLevelName,m_sPlayerID,"CampaignAI")))then
				bQuerySucceeded = pxMOD^.QueryUnits(xUnits, iMin, iMax, 0.5, 0, m_xEnemies);
			else
				bQuerySucceeded = pxMOD^.QueryEfficientUnits(xUnits, iMin, iMax, m_xEnemies);
			endif;
			
			if(bQuerySucceeded == false)then
				m_pxAttackInfo^.GetResult()="squad allocation failed (impossible)";
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
			else
				m_xAllocator.AddUnits(xUnits);
				
				pxMOD^.RemoveUnitsFromPool(xUnits);
				
				SeparateUnits();
				
				if(TransferUnits() == true)then
					m_sState = "transfering";
				else
				StartSitOn();
				m_sState = "sit_on";
				endif;
			endif;
		elseif(m_sState=="transfering")then
			if(m_bTransferSucceeded == true)then
				StartSitOn();
				m_sState = "sit_on";
			endif;
		elseif(m_sState=="sit_on")then
			if(m_bTransportersReady == true)then
				StartAllAttacks();
				m_sState = "fighting";
			endif;
		elseif(m_sState=="fighting")then
			if(!UpdateFighters())then
				m_pxAttackInfo^.GetResult()="all fighters are dead!";
				SetFailedPosition(m_vFightersPos);
				m_pxAttackInfo^.NotifyOnFailed();
				Deactivate();
				return;
			endif;

			if(CheckCompletion())then
				m_pxAttackInfo^.GetResult()="attack succeded!";
				m_pxAttackInfo^.NotifyOnSucceeded();
				Deactivate();
				return;
			endif;
			
			if(UpdateNearbyEnemies())then
				UpdateAllAttacks();
			endif;			
			UpdateSupporters();
		endif;
	endproc;

endclass;
