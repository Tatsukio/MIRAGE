//CAiGoalIslandSurveillance
class CAiGoalIslandSurveillance inherit CAiGoal
	
	static var CAiMap 			ms_xCostMap;
	var CAiMap 					m_xInvalidMap;	
	var CAiArea 				m_xMaxArea;	
	var ^CAiSolution 			m_pxSolution;	
	var CAiObjQuery 			m_xOQ;
	var CAiObjWrapList 			m_xOL;
	var CAiObjWrapList 			m_xFountainList;
	var CAiObjWrap				m_xTarget;
	var ^CAiBrain 				m_pxBrain;
	var ^CAiSensor				m_pxSensor;
	
	var int						m_iMaxChkPointTimeouts;
	var int						m_iHomeIslandId;
	var int						m_iDifficulty;
	var int						m_iPlayerID;
	var int						m_iNumOutposts;
	var int						m_iNumOuterOutposts;
	
	
	var string					m_sTribe;
	var string					m_sLevelName;
	var string					m_sPlayerID;	
	var string					m_sGametype;
	
	var bool					m_bCustommap;
	var bool 					m_bBusy;
	var bool					m_bFightOutpostStarted;
	var bool					m_bFoutainQuest;
	
	
	
	///constructor
	export constructor()
	endconstructor;
	
	
	///destructor
	export destructor()
	enddestructor;
	
	
	///init
	export proc bool Init(^CAiBrain p_pxBrain)
		super.Init(p_pxBrain);
		SetPermanent(true);
		
		m_pxBrain = p_pxBrain;
		if(m_pxBrain==null)then return false; endif;
		
		m_pxSensor=^(m_pxBrain^.GetSensor());
		if(m_pxSensor==null) then return false; endif;
		
		m_iPlayerID=m_pxBrain^.GetPlayerId();
		m_sPlayerID=m_iPlayerID.ToString();
		m_sLevelName=CAiUtilityMgr.Get()^.GetLevelName(m_pxBrain);
		m_sGametype=CAiUtilityMgr.Get()^.GetGameType(m_pxBrain);	
		
//		var int iNumPlayers=1+m_pxSensor^.GetNumPlayers();
//		var int iType=1+Random.GetInt()%iNumPlayers;
		var int iType = 1;
		var vec3 vSL=m_pxSensor^.GetStartLocation();
		m_iHomeIslandId=m_pxSensor^.ComputeIslandId(vSL);
		
		var ^CAiModuleControlDefault pxCM=cast<CAiModuleControlDefault>(m_pxBrain^.GetControlModule());
		m_iDifficulty=pxCM^.GetDifficultyInt();
		SetThinkWait(149+iType);
		
		m_bCustommap=CMirageAIMgr.Get().CheckCustomAI(m_sLevelName,m_sPlayerID,"CampaignAI");
		m_bBusy=false;
		m_bFightOutpostStarted=false;
		m_bFoutainQuest=false;
		m_iNumOutposts=0;
		m_iNumOuterOutposts=0;
	
		m_xOQ.SetOwner(-1);
		m_xOQ.SetType("STON");
		m_xOQ.SetSorting(m_pxSensor^.GetStartLocation(),1);
		m_xOL.Clear();
		m_xOQ.Execute(m_xOL);
		
		if(m_sLevelName=="_MN_MP_8_AJUBA")then
			var CAiObjQuery xFountainQuery;
			xFountainQuery.SetOwner(-1);
			xFountainQuery.SetClass("healing_well_01");
			m_xFountainList.Clear();
			xFountainQuery.Execute(m_xFountainList);
			if(m_xFountainList.NumEntries()>0)then
				m_xOL[0]=m_xFountainList[0];
			endif;
		endif;
		
		/*var int i, iC=m_xOL.Validate();
		if(iC>0)then
			for(i=0)cond(i<iC)iter(i++)do
				if(m_xOL[i].IsValid())then
					if((m_pxSensor^.ComputeIslandId(m_xOL[i].GetPos()))==(m_iHomeIslandId))then
						m_xOL.RemEntry(m_xOL[i]);
						i--;iC--;
					endif;
				endif;		
			endfor;	
		endif;	*/
		
		return true;
	endproc;
	
			
	///shutalltasks
	export proc void ShutAllTasks()
		var int i;
		var int iC = GetNumTasks();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CAiTask pxTask=GetTask(i);
			pxTask^.Shut();
			RemoveTaskUS(i);
			delete pxTask;
			i--; iC--;
		endfor;
	endproc;

	
	///shut
	export proc void Shut()
		ShutAllTasks();
	endproc;

	
	///RequestOutpost
	proc void RequestOutpost(int p_iIslandId, vec3 p_vTargetPos, string p_sOutpostType)
		if(m_pxBrain==null)then return; endif;
		var ^CAiModuleEconomyDefault pxEM	= cast<CAiModuleEconomyDefault>(m_pxBrain^.GetEconomyModule());
		if(pxEM==null)then return; endif;
		pxEM^.StartOutpost(p_iIslandId, p_vTargetPos, p_sOutpostType);
	endproc;
	
	
	//FindOnIsland
	export proc void FindOnIsland()
		if(m_pxBrain==null)then return; endif;
		if(m_pxSensor==null)then return; endif;
		
		var bool bMultimap=m_pxSensor^.GetMultimap();
		var int iAge=CAiUtilityMgr.Get()^.GetCurrentAge(m_pxBrain);
		var string sPersonality=CAiUtilityMgr.Get()^.GetPersonality(m_pxBrain);
		var string sOutpostType;
		if(m_sLevelName=="Single 09")then return; endif;
		if(!bMultimap||m_bCustommap)then return; endif;
		if(sPersonality=="Turtle")then return; endif;
		if(m_iDifficulty<3)then return; endif;
		if(iAge<2)then return; endif;
		if(GetBusy())then return; endif;

		begin FindStone;
			var int i, iC=m_xOL.Validate();
			if(iC<=0)then return; endif;
			for(i=0)cond(i<iC)iter(i++)do
				var vec3 vStonePos;
				
				if(m_xOL[i].GetName().Find("healing_well")!=(-1))then
					var real fX= m_xOL[i].GetPos().GetX();
					var real fY= m_xOL[i].GetPos().GetY();
					fX=fX+10.0;
					fY=fY+10.0;
					vStonePos.SetX(fX);
					vStonePos.SetY(fY);
					vStonePos.SetZ(m_xOL[i].GetPos().GetZ());
				else	
					vStonePos=m_xOL[i].GetPos();
				endif;
				var CAiObjWrapList xList;
				var CAiObjQuery xQuery;
				xQuery.SetOwnerExcept(m_iPlayerID);
				xQuery.SetType("ANML");
				xQuery.SetType("CHTR",true);
				xQuery.SetType("VHCL",true);
				xQuery.SetType("BLDG",true);
				xQuery.SetType("NEST",true);
				xQuery.RegionCircle(vStonePos, 60.0);
				xList.Clear();
				xQuery.Execute(xList);
				
				var CAiObjWrapList xOwnList;
				var CAiObjQuery xOwnQuery;
				xOwnQuery.SetOwner(m_iPlayerID);
				xOwnQuery.RegionCircle(vStonePos, 60.0);
				xOwnList.Clear();
				xOwnQuery.Execute(xOwnList);
				
				sOutpostType="OP_ResAll";
				
				if(xOwnList.NumEntries()>0)then
					continue;
				elseif(xList.NumEntries()<=0)then
					if((m_pxSensor^.ComputeIslandId(m_xOL[i].GetPos()))==(m_iHomeIslandId))then
						if(m_iNumOutposts>=1)then continue; endif;
						RequestOutpost(m_pxSensor^.ComputeIslandId(vStonePos), vStonePos, sOutpostType);
						m_iNumOutposts++;
						m_xOL.RemEntry(m_xOL[i]);
						i--;iC--;
						break;
					else
						if(m_iNumOuterOutposts>=1)then continue; endif;
						RequestOutpost(m_pxSensor^.ComputeIslandId(vStonePos), vStonePos, sOutpostType);
						m_iNumOuterOutposts++;
						m_xOL.RemEntry(m_xOL[i]);
						i--;iC--;
						break;
					endif;
				
				elseif(xList.Validate()>0&&xList.NumEntries()<10)then
					if(!m_pxSensor^.IsEnemy(xList[0].GetOwner()))then continue; endif;
					
					if((xList[0].GetOwner()!=(-1)))then
						var ^CAiModuleFightDefault pxFM=cast<CAiModuleFightDefault>(m_pxBrain^.GetFightModule());
						var ^CAiAttackInfo pxAttackInfo = new CAiAttackInfo();
						pxAttackInfo^.SetStrategy("suicide");
						pxAttackInfo^.SetPos(vStonePos);
						pxAttackInfo^.GetTargets() = xList;
						pxAttackInfo^.SetIslandID(m_pxSensor^.ComputeIslandId(vStonePos));
						SetRequesterFor(pxAttackInfo);
						if(pxFM!=null)then pxFM^.RequestAttack(pxAttackInfo); endif;
						RequestOutpost(m_pxSensor^.ComputeIslandId(vStonePos), vStonePos, sOutpostType);
						continue; 
					endif;
				else
					continue;
				endif;
			endfor;
		end FindStone;
	endproc;
	
	
	///Special SP9 scripting
	proc bool AttackPlayer0InSP9()
		if(m_pxBrain==null)then return false; endif;
		if(m_pxSensor==null)then return false; endif;
				
		var ^CAiModuleControlDefault pxCM=cast<CAiModuleControlDefault>(m_pxBrain^.GetControlModule());
		if(pxCM==null)then return false; endif;
		if(pxCM^.GetBehaviorType()!="Giraffe")then return false; endif;
		
		var CAiObjWrapList xList;
		var CAiObjQuery xQuery;
		xList.Clear();
	
		var vec3 vPos={220.39,836.77,39.47};
		xQuery.SetOwner(0);
		xQuery.RegionCircle(vPos, 120.0);
		xQuery.Execute(xList);
		
		var int i, iC=xList.NumEntries();
		if(iC>0)then
			for(i=0)cond(i<iC)iter(i++)do
				if(xList[i].IsValid())then
					var ^CAiAttackInfo pxAttackInfo = new CAiAttackInfo();
					pxAttackInfo^.SetStrategy("suicide");
					pxAttackInfo^.SetPos(xList[i].GetPos());
					pxAttackInfo^.GetTargets() = xList;
					pxAttackInfo^.SetIslandID(m_pxSensor^.ComputeIslandId(xList[i].GetPos()));
					SetRequesterFor(pxAttackInfo);
					m_pxBrain^.GetFightModule()^.RequestAttack(pxAttackInfo);
					break;
				endif;
			endfor;
		endif;
		return true;
	endproc;
	
	
	///think
	export proc void Think()
		if((m_iPlayerID==2)&&(m_sLevelName=="Single 09"))then AttackPlayer0InSP9(); endif;	
		if(m_sGametype=="Defender"||m_sGametype=="KingOfTheHill")then return; endif;
		FindOnIsland();
	endproc;
	

	///called to set busy status
	export proc void SetBusy(bool p_bBusy)
		m_bBusy = p_bBusy;
	endproc;
	
	
	///callled to set busy status
	export proc bool GetBusy()
		return m_bBusy;
	endproc;
	
	
	///EvtRequestSucceeded
	export proc void EvtRequestSucceeded(^CAiRequestInfo p_pxRequest)
		SetBusy(false);
	endproc;
	
	
	///EvtRequestFailed
	export proc void EvtRequestFailed(^CAiRequestInfo p_pxRequest)
		SetBusy(false);
	endproc;
	
endclass;
