class CTaskFactory inherit CObjStateFactory

	export constructor()
		SetName("TaskFactory");
	endconstructor;

	export destructor()
	enddestructor;

	proc ^CState CreateState(^CFSM p_pxFSM, TStateClassID p_xStateClassID)
		var ^CState pxState=null;
		if(p_xStateClassID=="TaskMgr")then
			pxState=new CTaskMgr();
		elseif(p_xStateClassID=="Queue")then
			pxState=new CTaskMgr.CQueue();
		elseif(p_xStateClassID=="Fight")then
			pxState=new CFight();
		elseif(p_xStateClassID=="Alarmed")then
			pxState=new CAlarmed();
		elseif(p_xStateClassID=="BUFight")then
			pxState=new CBuildUpFight();
		elseif(p_xStateClassID=="Finish")then
			pxState=new CFinishingMove();
		elseif(p_xStateClassID=="Trapped")then
			pxState=new CTrapped();
		elseif(p_xStateClassID=="ChtrBash")then
			pxState=new CCharacterBash();
		elseif(p_xStateClassID=="MayorSM")then
			pxState=new CMayorSpecialMove();
		elseif(p_xStateClassID=="WardenSM")then
			pxState=new CWardenSpecialMove();
		elseif(p_xStateClassID=="BabbageM")then
			pxState=new CBabbageMinigun();
		elseif(p_xStateClassID=="ResKick")then
			pxState=new CResKick();
		elseif(p_xStateClassID=="BurstA")then
			pxState=new CShootBurstArrow();
		elseif(p_xStateClassID=="MultiS")then
			pxState=new CShootMultiShot();
		elseif(p_xStateClassID=="Action")then
			pxState=new CAction();
		elseif(p_xStateClassID=="Firework")then
			pxState=new CFireworks();
		elseif(p_xStateClassID=="SwpBlow")then
			pxState=new CSweepingBlow();
		elseif(p_xStateClassID=="Harvest")then
			pxState=new CHarvest();
		elseif(p_xStateClassID=="HarvestT")then
			pxState=new CHarvesterTask();
		elseif(p_xStateClassID=="MineT")then
			pxState=new CMineTask();
		elseif(p_xStateClassID=="TeslaT")then
			pxState=new CTeslaTask();
		elseif(p_xStateClassID=="Mine")then
			pxState=new CMine();
		elseif(p_xStateClassID=="AcceptDe")then
			pxState=new CAcceptDeliveries();
		elseif(p_xStateClassID=="GetFood")then
			pxState=new CGetFood();
		elseif(p_xStateClassID=="Enchain")then
			pxState=new CEnchain();
		elseif(p_xStateClassID=="GetUlmtd")then
			pxState=new CGetUnlimited();
		elseif(p_xStateClassID=="GetCorn")then
			pxState=new CGetCorn();
		elseif(p_xStateClassID=="AlloScr")then
			pxState=new CAlloScrunch();
		elseif(p_xStateClassID=="BArrow")then
			pxState=new CShootBurningArrow();
		elseif(p_xStateClassID=="BuildUp")then
			pxState=new CBuildUp();
		elseif(p_xStateClassID=="Repair")then
			pxState=new CRepair();
		elseif(p_xStateClassID=="BuildUpB")then
			pxState=new CBuildUpBuilding();
		elseif(p_xStateClassID=="BldDownB")then
			pxState=new CBuildDownBuilding();
		elseif(p_xStateClassID=="CTheLite")then
			pxState=new CTheLite();
		elseif(p_xStateClassID=="AutoScou")then
			pxState=new CAutoScout();
		elseif(p_xStateClassID=="Insects")then
			pxState=new CInsects();
		elseif(p_xStateClassID=="Entrench")then
			pxState=new CEntrench();
		elseif(p_xStateClassID=="Termites")then
			pxState=new CTermites();
		elseif(p_xStateClassID=="Tornado")then
			pxState=new CTornado();
		elseif(p_xStateClassID=="QuickS")then
			pxState=new CQuicksandTask();
		elseif(p_xStateClassID=="LockPick")then
			pxState=new CLockPicking();
		elseif(p_xStateClassID=="Trade")then
			pxState=new CTrade();
		elseif(p_xStateClassID=="Walk2Pos")then
			pxState=new CWalkToPos();
		elseif(p_xStateClassID=="Walk2Obj")then
			pxState=new CWalkToObj();
		elseif(p_xStateClassID=="PickUp")then
			pxState=new CPickUp();
		elseif(p_xStateClassID=="DropItem")then
			pxState=new CDropItem();
		elseif(p_xStateClassID=="Resrct") then
			pxState=new CResurrect();
		elseif(p_xStateClassID=="PreUnbr") then
			pxState=new CPrepareUnboard();
		elseif(p_xStateClassID=="Shotgun") then
			pxState=new CShotgun();
		elseif(p_xStateClassID=="Jetpack") then
			pxState=new CJetpack();
		elseif(p_xStateClassID=="Throwdwn") then
			pxState=new CThrowdownshot();
		elseif(p_xStateClassID=="Dundee") then
			pxState=new CMickDundeeMove();
		elseif(p_xStateClassID=="Feed")then
			pxState=new CFeed();
		elseif(p_xStateClassID=="Sleep")then
			pxState=new CSleep();
		elseif(p_xStateClassID=="Fishing") then
			pxState=new CFishing();
		elseif(p_xStateClassID=="LCTask") then
			pxState=null;
			KLog.LogError("MaZi", "Der wird echt noch benutzt.");
		elseif(p_xStateClassID=="FlyTra") then
			pxState=new CFlyingTrade();
		elseif(p_xStateClassID=="Flee") then
			pxState=new CFlee();
		elseif(p_xStateClassID=="DelRes") then
			pxState=new CDeliverResources();
		elseif(p_xStateClassID=="idle") then
			pxState=new CObjState();
			pxState^.SetName("idle");
		elseif(p_xStateClassID=="FeignDth") then
			pxState = new CFeignDeath();
		elseif(p_xStateClassID=="BrHvst") then
			pxState=new CBrachioHarvest();
		elseif(p_xStateClassID=="Paw") then
			pxState=new CPaw();
		elseif(p_xStateClassID=="ShakeOff") then
			pxState=new CShakeOff();
		elseif(p_xStateClassID=="StunRoar") then
			pxState=new CStunningRoar();
		elseif(p_xStateClassID=="Lacerate") then
			pxState=new CLacerate();
		elseif(p_xStateClassID=="MTrumpet") then
			pxState=new CMammothTrumpet();
		elseif(p_xStateClassID == "Patrol") then
			pxState = new CPatrol();
		elseif(p_xStateClassID == "DockWall") then
			pxState = new CDockWall();
		elseif(p_xStateClassID == "JumpWall") then
			pxState = new CJumpOffWall();
		elseif(p_xStateClassID == "BldLddr") then
			pxState = new CBuildLadder();
		elseif(p_xStateClassID == "ClmbLddr") then
			pxState = new CClimbLadder();
		elseif(p_xStateClassID == "ClmbBrch") then
			pxState = new CClimbBrachio();
		elseif(p_xStateClassID == "DstrVhcl") then
			pxState = new CDestroyVHCL();
		elseif(p_xStateClassID == "HealAnml") then
			pxState = new CHealANML();
		elseif(p_xStateClassID == "EntrBnkr") then
			pxState = new CEnterBunker();
		elseif(p_xStateClassID == "HealUnit") then
			pxState = new CHealUnits();
		elseif(p_xStateClassID == "Notify") then
			pxState = new CNotify();
		elseif(p_xStateClassID == "FollowEn") then
			pxState = new CFollowEnemy();
		elseif(p_xStateClassID == "LeaveSiT") then
			pxState = new CLeaveSiegeTower();
		elseif(p_xStateClassID == "ClmbSiTo") then
			pxState = new CClimbSiegeTower();
		elseif(p_xStateClassID == "FntnHeal") then
			pxState = new CFountainHeal();
		elseif(p_xStateClassID == "AdaDeath") then
			pxState = new CAdaDeathShot();
		elseif(p_xStateClassID == "HangArnd") then
			pxState = new CHangAround();
		elseif(p_xStateClassID == "BoardPas") then
			pxState = new CManagedBoardingPassenger();
		elseif(p_xStateClassID == "BoardTra") then
			pxState = new CManagedBoardingTransporter();
		elseif(p_xStateClassID == "WateMine") then
			pxState = new CPlaceWaterMine();
		elseif(p_xStateClassID == "WateTurr") then
			pxState = new CPlaceWaterTurret();
		elseif(p_xStateClassID == "Sacrific") then
			pxState = new CSacrifice();
		//Henry: new tasks in MIRAGE
		elseif(p_xStateClassID=="Eating")then
			pxState=new CEating();
		elseif(p_xStateClassID=="Jumpjet") then
			pxState=new CJumpjet();
		elseif(p_xStateClassID == "SWHeal") then
			pxState = new CSeasWellHeal();
		elseif(p_xStateClassID == "WalkingBomb") then
			pxState = new CWalkingBomb();
		elseif(p_xStateClassID == "TricHook") then
			pxState = new CTriceratopsHook();
		elseif(p_xStateClassID == "ExoBash") then
			pxState = new CExoBash();
		elseif(p_xStateClassID == "ExoKick") then
			pxState = new CExoKick();
		elseif(p_xStateClassID == "MKHand") then
			pxState = new CMKHand();
		elseif(p_xStateClassID=="Deforest")then
			pxState=new CDeforest();
		elseif(p_xStateClassID == "EntrPortal")then
			pxState = new CEnterPortal();
		elseif(p_xStateClassID == "Meteor")then
			pxState = new CMeteor();
		elseif(p_xStateClassID == "Parasites")then
			pxState = new CParasites();
		elseif(p_xStateClassID == "Hemoplague")then
			pxState = new CHemoplague();
		elseif(p_xStateClassID == "BlindingStorm")then
			pxState = new CBlindingStorm();
		elseif(p_xStateClassID == "Deplenish")then
			pxState = new CDeplenish();
		elseif(p_xStateClassID == "PeaceGong")then
			pxState = new CPeaceGong();
		elseif(p_xStateClassID == "GetFoodTask")then
			pxState = new CGetFoodTask();
		elseif(p_xStateClassID == "Reanimation")then
			pxState = new CReanimation();
		elseif(p_xStateClassID == "Plunder")then
			pxState = new CPlunder();
		elseif(p_xStateClassID == "LethalWound")then
			pxState = new CLethalWound();
		elseif(p_xStateClassID == "Teleport")then
			pxState = new CTeleport();
		elseif(p_xStateClassID=="SpecSuitJ")then
			pxState=new CSpecialJumpjet();
		elseif(p_xStateClassID=="SMSMinigun")then
			pxState=new CSpecialMinigun();
		elseif(p_xStateClassID == "AutomaticHarvest")then
			pxState = new CAutomaticHarvest();
		elseif(p_xStateClassID == "CyborgRoar")then
			pxState = new CCyborgRoar();
		elseif(p_xStateClassID == "StartHourglass")then
			pxState = new CStartHourglass();
		elseif(p_xStateClassID == "Frightening")then
			pxState = new CFrightening();
		elseif(p_xStateClassID == "SongOfValor")then
			pxState = new CSongOfValor();
		elseif(p_xStateClassID == "CustTask")then
			pxState = new CCustomTask();
		elseif(p_xStateClassID == "BldStrcs")then
			pxState = new CBuildStaircase();
		elseif(p_xStateClassID == "ClmbStrcs")then
			pxState = new CClimbStaircase();
		elseif(p_xStateClassID == "MrgRnm")then
			pxState = new CMirageReanim();
//		elseif(p_xStateClassID == "Contaminate")then
//			pxState = new CContaminate();
		// Crash RPG Abilities
		elseif(p_xStateClassID=="PilotFly")then
			pxState=new CPilotFly();
		elseif(p_xStateClassID=="PilotThrowdwn")then
			pxState=new CPilotThrowdownshot();
		elseif(p_xStateClassID=="FighterSM")then
			pxState=new CFighterSpecialMove();
		elseif(p_xStateClassID=="ShooterM")then
			pxState=new CShooterMinigun();
		elseif(p_xStateClassID=="NoviceFW")then
			pxState=new CNoviceFireworks();
		elseif(p_xStateClassID=="HunterScr")then
			pxState=new CHunterScrunch();
		elseif(p_xStateClassID=="CrashBrrg")then
			pxState=new CCrashBarrage();
		elseif(p_xStateClassID=="CrashEnchn")then
			pxState=new CCrashEnchain();
		elseif(p_xStateClassID=="CrashTrnd")then
			pxState=new CCrashTornado();
		elseif(p_xStateClassID=="CrashTrmts")then
			pxState=new CCrashTermites();
		elseif(p_xStateClassID=="CrashQckSndTsk")then
			pxState=new CCrashQuicksandTask();
		elseif(p_xStateClassID=="CrashShtgn")then
			pxState=new CCrashShotgun();
		elseif(p_xStateClassID=="CrashKck")then
			pxState=new CCrashKick();
		elseif(p_xStateClassID=="KnightTrmpt")then
			pxState=new CKnightTrumpet();
		elseif(p_xStateClassID=="NoviceDV")then
			pxState=new CCrashDestroy();
		elseif(p_xStateClassID=="HunterSwllw")then
			pxState=new CHunterSwallow();
		endif;
		if(pxState!=null)then
			pxState^.SetFactory(this);
			pxState^.SetStateClassID(p_xStateClassID);
			if(p_pxFSM!=null) then //this is for loading
				p_pxFSM^.AddState(pxState);
			endif;
		endif;
		return pxState;
	endproc;
endclass;
	
/*?
	?group URS.Scripts.Server
	?item CTaskMgr
	?desc
		task manager works as a task list.
		if all tasks done can return a state if given

	?prefix CTaskMgr
?*/
class CTaskMgr inherit CObjState

	export var procref <void, string> m_xOnChangeToIdleState;

	class CQueue inherit CTask
	
		proc void USLOnEnter(^CState p_pxFrom, ^CState p_pxTo)
			if(p_pxFrom!=null && p_pxTo==this)then
				while(NumSubs()!=0)do
					var ^CState pxS=GetSubState(0);
					RemSubState(pxS);
					p_pxFrom^.AddSubState(pxS);
				endwhile;
			endif;
			GetFSM()^.Enable(true);
			GetFSM()^.ChangeState(p_pxFrom);
		endproc;
		
		export proc void AddSubStateTop(^CTask p_pxTask)
			if(p_pxTask==null)then return; endif;
			var int i, iC=NumSubs();
			AddSubState(p_pxTask);
			for(i=0)cond(i<iC)iter(i++)do
				var ^CState pxS=GetSubState(0);
				RemSubState(pxS);
				AddSubState(pxS);
			endfor;
		endproc;
		
		export proc bool HasSubs()
			return NumSubs()>0;
		endproc;
		
	endclass;
	
	var CObjHndl m_xOwner;
	var ^CState m_pxReturnState; ///< state to return to if all tasks done
	var array ^CTaskChangeSubscriber m_apxSubscriber;
	
	export constructor()
		SetName("TaskMgr");
	endconstructor;
	
	export proc void SetOwner(CObjHndl p_xOwner)
		m_xOwner=p_xOwner;
	endproc;
	
	/*?
		?item SetReturnState
		?desc set state to return to if all tasks are done
		?param ^CState	state to return to
	?*/
	export proc void SetReturnState(^CState p_pxState)
		m_pxReturnState=p_pxState;
	endproc;
	
	/*?
		?item GetCurTaskName
		?return string	name of current task, if no current task present "None"
	?*/
	export proc string GetCurTaskName()
		if(NumSubs()==0)then
			return "None";
		else
			return GetSubState(0)^.GetName();
		endif;
	endproc;

	/*?
		?item GetCurTask
		?return ^CTask	current task, if no current task present 'null'
	?*/
	export proc ^CTask GetCurTask()
		if(NumSubs()==0)then
			return null;
		endif;
		return cast<CTask>(GetSubState(0));
	endproc;
	
	export proc void RemoveAction(string p_sActionPath)
		var int i,iC=NumSubs();
		for(i=(iC-1))cond(i>=0)iter(i--)do
			var ^CAction pxW=cast<CAction>(GetSubState(i));
			var ^CBuildDownBuilding pxBldDown;
			if(p_sActionPath.Find("/BuildDown")!=-1)then
				pxBldDown=cast<CBuildDownBuilding>(GetSubState(i));
			endif;
			if(pxBldDown!=null)then
				if(i==0)then
					if(pxBldDown^.Break())then
						GetFSM()^.Enable(true);
						GetFSM()^.ChangeState(this);
					endif;
				else
					pxBldDown^.Skip();
					pxBldDown^.GetFactory()^.FreeState(pxBldDown);
				endif;
				break;
			endif;
			if(pxW!=null)then
				if(pxW^.Compare(p_sActionPath))then
					if(i==0)then
						if(pxW^.Break())then
							pxW^.PayBack();
							GetFSM()^.Enable(true);
							GetFSM()^.ChangeState(this);
						endif;
					else
						//pxW^.PayBack();
						pxW^.Skip();
						pxW^.GetFactory()^.FreeState(pxW);
					endif;
					break;
				endif;
			endif;
		endfor;
	endproc;
	
	export proc bool Storno(bool p_bAll)
		var bool bReturn = false;
		var int i,iC=NumSubs();
		for(i=(iC-1))cond(i>=0)iter(i--)do
			var ^CAction pxW=cast<CAction>(GetSubState(i));
			var ^CBuildDownBuilding pxBldDown=cast<CBuildDownBuilding>(GetSubState(i));
			if(pxBldDown!=null)then
				if(i==0)then
					if(pxBldDown^.Break())then
						GetFSM()^.Enable(true);
						GetFSM()^.ChangeState(this);
						bReturn = true;
					endif;
				else
					pxBldDown^.Skip();
					pxBldDown^.GetFactory()^.FreeState(pxBldDown);
					bReturn = true;
				endif;
				if(!p_bAll)then
					break;
				endif;
			endif;
			if(pxW!=null)then
				if(i==0)then
					if(pxW^.Break())then
						pxW^.PayBack();
						GetFSM()^.Enable(true);
						GetFSM()^.ChangeState(this);
						bReturn = true;
					endif;
				else
					pxW^.Skip();
					pxW^.GetFactory()^.FreeState(pxW);
					bReturn = true;
				endif;
				if(!p_bAll)then
					break;
				endif;
			endif;
		endfor;
		return bReturn;
	endproc;
	
	export proc bool CanRemoveAction(string p_sActionPath)
		var int i,iC=NumSubs();
		for(i=(iC-1))cond(i>=0)iter(i--)do
			var ^CAction pxW=cast<CAction>(GetSubState(i));
			var ^CBuildDownBuilding pxBldDown;
			if(p_sActionPath.Find("/BuildDown")!=-1)then
				pxBldDown=cast<CBuildDownBuilding>(GetSubState(i));
			endif;
			if(pxBldDown!=null)then
				if(i==0)then
					if(pxBldDown^.Break())then
						GetFSM()^.Enable(true);
						GetFSM()^.ChangeState(this);
					endif;
				else
					pxBldDown^.Skip();
					pxBldDown^.GetFactory()^.FreeState(pxBldDown);
				endif;
				return true;
			endif;
			if(pxW!=null)then
				if(pxW^.Compare(p_sActionPath))then
					if(i==0)then
						if(pxW^.Break())then
							pxW^.PayBack();
							GetFSM()^.Enable(true);
							GetFSM()^.ChangeState(this);
						endif;
					else
						pxW^.Skip();
						pxW^.GetFactory()^.FreeState(pxW);
					endif;
					return true;
				endif;
			endif;
		endfor;
		return false;
	endproc;
	
	export proc ^CTask FindTaskByName(string p_sName, bool p_bCheckQ)
		if(p_sName==""||NumSubs()==0)then
			return null;
		endif;
		var ^CTask pxTask=cast<CTask>(FindSubStateRecursive(p_sName));
		if(pxTask==null&&p_bCheckQ&&NumSubs()>0)then
			var ^CQueue pxQ=cast<CQueue>(GetSubState(NumSubs()-1));
			if(pxQ!=null)then
				pxTask=cast<CTask>(pxQ^.FindSubStateRecursive(p_sName));
			endif;
		endif;
		return pxTask;
	endproc;
	
	/*?
		?item AddTask
		?desc add given task on the end of tasklist, don't break current task and don't skip tasklist
		?param ^CTask	task to add
	?*/
	export proc void AddTask(^CTask p_pxTask)
		if(p_pxTask==null)then return; endif;
		GetFSM()^.RemState(p_pxTask);
		var ^CObjState pxParent=this;
		if(NumSubs()>0)then
			var ^CQueue pxQ=cast<CQueue>(GetSubState(NumSubs()-1));
			if(pxQ!=null)then
				pxParent=pxQ;
			endif;
		endif;
		pxParent^.AddSubState(p_pxTask);
		if(NumSubs()==1)then
			GetFSM()^.Enable(true);
			GetFSM()^.ChangeState(this);
		endif;
	endproc;
	
	export proc void AddTaskTop(^CTask p_pxTask)
		if(p_pxTask==null)then return; endif;
		GetFSM()^.RemState(p_pxTask);
		var ^CObjState pxParent=this;
		var bool bQ;
		var ^CQueue pxQ;
		if(NumSubs()>0)then
			pxQ=cast<CQueue>(GetSubState(NumSubs()-1));
			if(pxQ!=null)then
				pxParent=pxQ;
				bQ=true;
			endif;
		endif;
		if(bQ)then
			pxQ^.AddSubStateTop(p_pxTask);
		else
			pxParent^.AddSubState(p_pxTask);
		endif;
		if(NumSubs()==1)then
			GetFSM()^.Enable(true);
			GetFSM()^.ChangeState(this);
		endif;
	endproc;
	
	/*?
		?item BreakAll
		?desc break the execution of current task and clear tasklist
	?*/
	export proc void BreakAll()
		while(NumSubs()>1)do
			var ^CTask pxWalk=cast<CTask>(GetSubState(1));
			pxWalk^.ResetPrepare();
			pxWalk^.Skip();
			//pxWalk^.GetFactory()^.FreeState(pxWalk);
			GetFSM()^.FreeStateDelayed(pxWalk);
		endwhile;
		var ^CTask pxTask=GetCurTask();
		if(pxTask!=null)then
			if(pxTask^.Break())then
				pxTask^.ResetPrepare();
//				GetFSM()^.FreeStateDelayed(pxTask);
				GetFSM()^.Enable(true);
				GetFSM()^.ChangeState(this);
			endif;
		endif;
	endproc;
	
	export proc void BreakCurrent()
		var ^CTask pxTask=GetCurTask();
		if(pxTask!=null)then
			if(pxTask^.Break())then
				pxTask^.ResetPrepare();
				GetFSM()^.Enable(true);
				GetFSM()^.ChangeState(this);
			else
				pxTask^.EndTask();
			endif;
		endif;
	endproc;
	
	/*?
		?item	StopCurTask
		?desc	stops the current task and switches to the next in queue
	?*/
	export proc void StopCurTask()
		GetCurTask()^.ResetPrepare();
		GetCurTask()^.EndTask();
	endproc;

	/*?
		?item SetTask
		?desc execute given task, break current task, skip and clear tasklist
		?param ^CTask	task to execute
	?*/
	export proc void SetTask(^CTask p_pxTask)
		//HACK
		if(p_pxTask!=null)then
			if(p_pxTask^.GetName()=="Fight")then
				var string sCurTask=GetCurTaskName();
				if((sCurTask!="Shotgun")&&(sCurTask!="Throwdwn")&&(sCurTask!="Jetpack")&&(sCurTask!="SpecSuitJ")&&(sCurTask!="Jumpjet")&&(sCurTask!="PilotFly")&&(sCurTask!="ClimbLadder")&&(sCurTask!="ClimbBrachio")&&(sCurTask!="ClimbTower")&&(sCurTask!="ClimbStaircase"))then
					BreakAll();
					AddTask(p_pxTask);
				endif;
			else
				BreakAll();
				AddTask(p_pxTask);
			endif;
		endif;
	endproc;
	
	export proc void SetTaskImmediate(^CTask p_pxTask)
		if(p_pxTask==null)then return; endif;
		//HACK
		var string sCurTask=GetCurTaskName();
		if((p_pxTask^.GetName()!="Fight")||((sCurTask!="Shotgun")&&(sCurTask!="Throwdwn")&&(sCurTask!="Jetpack")&&(sCurTask!="Jumpjet")&&(sCurTask!="Finish")&&(sCurTask!="SpecSuitJ")&&(sCurTask!="PilotFly")/*&&(sCurTask!="ClimbLadder")&&(sCurTask!="ClimbBrachio")&&(sCurTask!="ClimbTower")&&(sCurTask!="ClimbStaircase")*/))then
			var ^CQueue pxQ;
			if(NumSubs()>0)then
				pxQ=cast<CQueue>(GetSubState(NumSubs()-1));
			endif;
			if(pxQ==null)then
				pxQ=cast<CQueue>(CSrvWrap.GetUSLFactoryMgr().CreateState(GetFSM(),"Queue"));
				while(NumSubs()>1)do
					var ^CTask pxS=cast<CTask>(GetSubState(1));
					RemSubState(pxS);
					if(pxQ!=null)then
						pxQ^.AddSubState(pxS);
					endif;
				endwhile;
				if(NumSubs()==1)then
					var ^CTask pxS=cast<CTask>(GetSubState(0));
					if(p_pxTask^.GetName()=="Trapped")then
						RemSubState(pxS);
						SetTask(p_pxTask);
						if(pxQ!=null)then
							pxQ^.AddSubStateTop(pxS);
						endif;
//						AddTaskTop(pxS);
					else
						if(pxS^.Break())then
							pxS^.ResetPrepare();
							SetTask(p_pxTask);
						else
							AddTask(p_pxTask);
						endif;
					endif;
				else
					AddTask(p_pxTask);
				endif;
				AddTask(pxQ);
			else
				RemSubState(pxQ);
				SetTask(p_pxTask);
				AddTask(pxQ);
			endif;
		endif;
	endproc;
	
	export proc void AddNextTask(^CTask p_pxTask)
		if(p_pxTask==null)then return; endif;
		var ^CQueue pxQ;
		if(NumSubs()>0)then
			pxQ=cast<CQueue>(GetSubState(NumSubs()-1));
		endif;
		if(pxQ==null)then
			pxQ=cast<CQueue>(CSrvWrap.GetUSLFactoryMgr().CreateState(GetFSM(),"Queue"));
			while(NumSubs()>1)do
				var ^CTask pxS=cast<CTask>(GetSubState(1));
				RemSubState(pxS);
				if(pxQ!=null)then
					pxQ^.AddSubState(pxS);
				endif;
			endwhile;
			AddTask(pxQ);
		endif;
		if(pxQ!=null)then
			pxQ^.AddSubStateTop(p_pxTask);
		endif;
	endproc;

	/*?
		?item SetSubTask
		?desc execute given task as subtask of current task, if no current task present, behaves like SetTask
		?param ^CTask	task to execute
	?*/
	export proc void SetSubTask(^CTask p_pxSubTask)
		if(p_pxSubTask==null)then return; endif;
		var ^CTask pxCurTask=GetCurTask();
		if(pxCurTask==null)then
			SetTask(p_pxSubTask);
		else
			GetFSM()^.RemState(p_pxSubTask);
			pxCurTask^.AddSubState(p_pxSubTask);
			GetFSM()^.Enable(true);
			GetFSM()^.ChangeState(p_pxSubTask);
		endif;
	endproc;

	proc void USLOnEnter(^CState p_pxFrom, ^CState p_pxTo)
		var string sF, sT;
		if(p_pxFrom!=null)then
			sF = p_pxFrom^.GetName();
		endif;
		// substate entered, don't care
		if(p_pxTo!=null && p_pxTo!=this) then
			sT = p_pxTo^.GetName();
			Broadcast(sF, sT);
			return;
		endif;
		if(p_pxFrom==GetCurTask())then // current task ended
			GetFSM()^.FreeStateDelayed(p_pxFrom);
			p_pxFrom=null;
		endif;
		if(NumSubs()==0)then // no task to do
			var ^CGameObj pxOwner=m_xOwner.GetObj();
			var ^CFightingObj pxFO=cast<CFightingObj>(pxOwner);
			if(pxFO!=null) then
				pxFO^.OnEmptyTaskList();
			endif;
			if(m_pxReturnState!=null)then
				if(!m_xOnChangeToIdleState.IsNull())then
					m_xOnChangeToIdleState.Call(sF);
				endif;
				GetFSM()^.ChangeState(m_pxReturnState);
				sT = m_pxReturnState^.GetName();
			else
				GetFSM()^.Enable(false);
			endif;
			// here we end performing of a task
			if(pxOwner!=null)then
				pxOwner^.SetPerformingTask(false);
			endif;
		else
			// here we start perfoming of a task
			var ^CGameObj pxOwner=m_xOwner.GetObj();
			if(pxOwner!=null)then
				pxOwner^.SetPerformingTask(true);
			endif;
			GetFSM()^.ChangeState(GetSubState(0));
			var ^CFightingObj pxFO=cast<CFightingObj>(pxOwner);
			if(pxFO!=null) then
				pxFO^.OnTaskStarted();
			endif;
			sT = "idle";
			if(NumSubs()>0)then
				sT = GetSubState(0)^.GetName();
			endif
		endif;
		Broadcast(sF, sT);
	endproc;

	export proc void Subscribe(^CTaskChangeSubscriber p_pxSubscriber)
		var int i, iC = m_apxSubscriber.NumEntries();
		for (i=0) cond(i<iC) iter(++i)do
			if (m_apxSubscriber[i] == p_pxSubscriber) then return; endif;
		endfor;
		m_apxSubscriber.AddEntry(p_pxSubscriber);
	endproc;

	export proc void Unsubscribe(^CTaskChangeSubscriber p_pxSubscriber)
		var int i, iC = m_apxSubscriber.NumEntries();
		for (i=0) cond(i<iC) iter(++i)do
			if (m_apxSubscriber[i] == p_pxSubscriber) then
				m_apxSubscriber.DeleteEntryUS(i);
				return;
			endif;
		endfor;
	endproc;

	export proc void Broadcast(string p_sFrom, string p_sTo)
		var int i, iC = m_apxSubscriber.NumEntries();
		for (i=0) cond(i<iC) iter(++i)do
			m_apxSubscriber[i]^.OnPush(p_sFrom, p_sTo);
		endfor;
	endproc;
	
	export proc bool HasQueue()
		var int i=NumSubs();
		if(i<1)then return false; endif;
		var ^CQueue pxQ=cast<CQueue>(GetSubState(i-1));
		if(pxQ==null)then return false; endif;
		return pxQ^.HasSubs();
	endproc;
	
endclass;

class CTask inherit CObjState

	var bool m_bUserCommand;
	var bool m_bCivil;
	var bool m_bDoubleEndCheck;

	export destructor()
	enddestructor;

	export constructor()
		m_bDoubleEndCheck = false;
		m_bUserCommand = false;
		m_bCivil = true;
	endconstructor;
	
	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CTask] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var CFourCC xType="Task";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,1);
		var ^CArc pxArc=^(pxWalk^.GetArc());
		(pxArc^) << m_bUserCommand;
		(pxArc^) << m_bCivil;
		pxWalk^.Close();
		KLog.LogWarn("CArc.Save","[CTask] Saving done");
	endproc;

	export proc void Load(^CUOFReaderNode p_pxReaderNode)
		if(p_pxReaderNode^.GetType()=="Task")then
			var ^CArc pxArc=^(p_pxReaderNode^.GetArc());
			(pxArc^) << m_bUserCommand;
			(pxArc^) << m_bCivil;
		else
			super.Load(p_pxReaderNode);
		endif;
	endproc;	
	
	export proc void OnPostLoad()
		//L KLog.LogSpam("MaZi", "CTask::OnPostLoad");
	endproc;

	export proc bool IsUserCommand()
		return m_bUserCommand;
	endproc;
	
	export proc void TaskEndProtector()
		System.Assert(!m_bDoubleEndCheck);
		m_bDoubleEndCheck=true;
	endproc;

	export proc void PayBack()
	endproc;

	export proc void SetUserCommand(bool p_bUserCommand)
		m_bUserCommand = p_bUserCommand;
	endproc;

	export proc void SetCivil(bool p_bCivil)
		m_bCivil = p_bCivil;
	endproc;

	export proc ref bool IsCivil()
		return m_bCivil;
	endproc;

	export proc bool Break()
		return true;
	endproc;

	export proc void ActionCanceled()
	endproc;

	export proc void ActionSucceeded()
	endproc;
	
	export proc void UpdateAggressionPos(CObjHndl p_xHndl)
		if(!p_xHndl.IsValid())then return; endif;
		var ^CFightingObj pxFO=cast<CFightingObj>(p_xHndl.GetObj());
		if(pxFO==null)then return; endif;
		if(IsUserCommand())then
			pxFO^.UpdateAggressionPos(pxFO^.GetPos());
		endif;
	endproc;

	export proc void UpdateAggressionPos(CObjHndl p_xHndl, bool p_bForce)
		if(!p_xHndl.IsValid())then return; endif;
		var ^CFightingObj pxFO=cast<CFightingObj>(p_xHndl.GetObj());
		if(pxFO==null)then return; endif;
		if(IsUserCommand() || p_bForce)then
			pxFO^.UpdateAggressionPos(pxFO^.GetPos());
		endif;
	endproc;

	/// return value specifies if idleanim should be set
	export proc bool OnActionEnd(bool p_bBroken)
		return true;
	endproc;

	export proc void Skip()
	endproc;

	export proc void EndTask()
		TaskEndProtector();
		var ^CFSM pxFSM=GetFSM();
		if(pxFSM!=null&&GetParent()!=null)then
			pxFSM^.ChangeState(GetParent());
		endif;
	endproc;

///HACK, should be implemented elsewhere
	static proc vec3 GetAdoptedDest(vec3 p_vPos,vec3 p_vDest,real p_fOffset)
		var vec3 vWay=(p_vDest-p_vPos);
		var real fLength=vWay.Abs();
		vWay.Normalize();
		vWay*=fLength-p_fOffset;
		return (p_vPos+vWay);
	endproc;

	static proc vec3 GetLookAtRot(vec3 p_vPos)
		var real fArc=Math.ATan2(p_vPos.GetX(),p_vPos.GetY());
		var vec3 vRot;vRot.SetZ(fArc);
		return vRot;
	endproc;

	proc vec3 UseComplexGundlachAlgorithm(vec3 p_vPos, real p_fOffset);
		Random.Seed();
		var real fOffset=(Random.GetInt()%(p_fOffset*100.0f).ToInt()).ToReal()/100.0f;
		if((Random.GetInt()%100)>50)then
			p_vPos.SetX(p_vPos.GetX()+fOffset);
		else
			p_vPos.SetX(p_vPos.GetX()-fOffset);
		endif;
		fOffset=(Random.GetInt()%(p_fOffset*100.0f).ToInt()).ToReal()/100.0f;
		if((Random.GetInt()%100)>50)then
			p_vPos.SetY(p_vPos.GetY()+fOffset);
		else
			p_vPos.SetY(p_vPos.GetY()-fOffset);
		endif;
		return(p_vPos);
	endproc;

	export proc void ResetPrepare()
	endproc;
	

///ENDHACK
endclass;

class CTaskChangeSubscriber

	export constructor()
	endconstructor;

	export destructor()
	enddestructor;

	export proc bool OnPush(string p_sFrom, string p_sTo)
		return false;
	endproc;

endclass;