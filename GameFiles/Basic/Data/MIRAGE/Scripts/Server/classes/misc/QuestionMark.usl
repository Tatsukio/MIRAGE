class CQuestionMark inherit CGameObj
	
	var int m_iCurState;
	
	export const int STATE_INVALID		=-1;
	export const int STATE_INVISIBLE	=0;
	export const int QM_STATE_RED			=1;
	export const int QM_STATE_GREEN		=2;
	export const int QM_STATE_YELLOW	=3;
	export const int EC_STATE_YELLOW	=4;
	
	export constructor()
		m_iCurState=STATE_INVALID;
	endconstructor;
	
	export destructor()
	enddestructor;
	
	export proc void OnInit(bool p_bLoad)
		super.OnInit(p_bLoad);
		SetType("QMRK");
		SetSelectable(true);
		SetHitable(true);
		if(!p_bLoad)then
			var ^CAttribs pxAttribs=InitAttribs();
			SetState(STATE_INVISIBLE);
		endif;
	endproc;
	
	export proc void SetState(string p_sState)
		var int iState=STATE_INVALID;
		if(p_sState=="STATE_INVISIBLE")then
			iState=STATE_INVISIBLE;
		elseif(p_sState=="QM_STATE_RED")then
			iState=QM_STATE_RED;
		elseif(p_sState=="QM_STATE_GREEN")then
			iState=QM_STATE_GREEN;
		elseif(p_sState=="QM_STATE_YELLOW")then
			iState=QM_STATE_YELLOW;
		elseif(p_sState=="EC_STATE_YELLOW")then
			iState=EC_STATE_YELLOW;
		endif;
		SetState(iState);
	endproc;
	
	export proc void SetState(int p_iState)
		if(p_iState==m_iCurState)then return; endif;
		m_iCurState=p_iState;
		SetVisible(false);
		if(p_iState==QM_STATE_RED)then
			SetVisible(true);
			SetGFX("questionmark_red");
			SetAnim("anim",3);
		elseif(p_iState==QM_STATE_GREEN)then
			SetVisible(true);
			SetGFX("questionmark_green");
			SetAnim("anim",3);
		elseif(p_iState==QM_STATE_YELLOW)then
			SetVisible(true);
			SetGFX("questionmark_yellow");
			SetAnim("anim",3);
		elseif(p_iState==EC_STATE_YELLOW)then
			SetVisible(true);
			SetGFX("exclamation_yellow");
			SetAnim("anim",3);
		endif;
	endproc;
	
	export proc void SetToolTip(string p_sToolTip)
		var ^CAttribs pxAttribs=GetAttribs();
		if(pxAttribs!=null)then
			pxAttribs^.SetValue("QuestionMarkToolTip",p_sToolTip);
		endif;
	endproc;
	
	export proc void SetPicture(string p_sPicture)
		var ^CAttribs pxAttribs=GetAttribs();
		if(pxAttribs!=null)then
			pxAttribs^.SetValue("CustomPicture",p_sPicture);
		endif;
	endproc;
	
	export proc void SetName(string p_sName)
		var ^CAttribs pxAttribs=GetAttribs();
		if(pxAttribs!=null)then
			pxAttribs^.SetValue("CustomName",p_sName);
		endif;
	endproc;
	
	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CQuestionMark] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var CFourCC xType="qmrk";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,0);
		var ^CArc pxArc=^(pxWalk^.GetArc());
		(pxArc^) << m_iCurState;
		pxWalk^.Close();
		KLog.LogWarn("CArc.Save","[CQuestionMark] Saving done");
	endproc;
	
	export proc void Load(^CUOFReaderNode p_pxReaderNode)
		if(p_pxReaderNode^.GetType()=="qmrk")then
			var ^CArc pxArc=^(p_pxReaderNode^.GetArc());
			if(p_pxReaderNode^.GetVersion()==0)then
				(pxArc^) << m_iCurState;
			endif;
		else
			super.Load(p_pxReaderNode);
		endif;
	endproc;
	
endclass;
