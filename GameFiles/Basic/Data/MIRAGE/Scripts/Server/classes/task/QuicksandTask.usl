class CQuicksandTask inherit CSpecialActionTask

	var CObjHndl		m_xCharacter;
	var vec3				m_vTarget;
	var string			m_sState;
	var int					m_iRetryCounter;
	var string			m_sTrap;

	export constructor()
		SetName("QuickS");
		SetCivil(false);
		m_iRetryCounter = 0;
		m_sTrap = "Aje_Quicksand_Trap";
	endconstructor;

	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CQuicksandTask] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var CFourCC xType="QSTa";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,1);
		var ^CArc pxArc=^(pxWalk^.GetArc());
		m_xCharacter.DoKArc(pxArc^);
		(pxArc^) << m_vTarget;
		(pxArc^) << m_sState;
		(pxArc^) << m_iRetryCounter;
		(pxArc^) << m_sTrap;
		pxWalk^.Close();
	endproc;

	export proc void Load(^CUOFReaderNode p_pxReaderNode)
		if(p_pxReaderNode^.GetType()=="QSTa")then
			var ^CArc pxArc=^(p_pxReaderNode^.GetArc());
			m_xCharacter.DoKArc(pxArc^);
			(pxArc^) << m_vTarget;
			(pxArc^) << m_sState;
			(pxArc^) << m_iRetryCounter;
			(pxArc^) << m_sTrap;
		else
			super.Load(p_pxReaderNode);
		endif;
	endproc;

	export proc bool Init(CObjHndl p_xCharacter, vec3 p_vTarget, string p_sPath, string p_sTrap)
		m_sState="goto_target";
		if(!p_xCharacter.IsValid())then
			m_sState="EndTask";
			return false;
		endif;
		if(p_vTarget=={0.0,0.0,0.0})then
			m_sState="EndTask";
			return false;
		endif;
		m_xCharacter = p_xCharacter;
		m_vTarget = p_vTarget;
		m_sTrap=p_sTrap;
		SetSpecialActionPath(p_sPath);
		SetPrepareActionPath(p_xCharacter, p_sPath, true);
		return true;
	endproc;

	proc void USLOnEnter(^CState p_pxFrom, ^CState p_pxTo)
		if(m_sState=="EndTask")then
			EndTask();
			return;
		endif;
		SetMaxCounter(1);
	endproc;

	proc void USLOnTick(int p_iTime)
		var ^CCharacter pxCharacter = cast<CCharacter>(m_xCharacter.GetObj());
		if(pxCharacter==null)then EndTask(); return; endif;
		if(m_sState == "goto_target")then
			var real fAttackRange = 30.0; //pxCharacter^.GetAttackRange();
			fAttackRange+=pxCharacter^.GetMiscValueTT("Shaman_Cast_Sandtrap");
			if(!IsInRange())then
				if(pxCharacter^.GetOnWall())then
					EndTask();return;
				endif;
				pxCharacter^.AdvanceAction(CObjHndl.Invalid(),fAttackRange,pxCharacter^.GetDefaultSpeed(),pxCharacter^.GetWalkSet(),5000000.0, pxCharacter^.GetPos(), m_vTarget);
			endif;
			m_sState = "throw";
		elseif(m_sState == "throw")then
			if(!IsInRange())then
				if(m_iRetryCounter>3)then
					EndTask();
				else
					m_iRetryCounter++;
					m_sState = "goto_target";
					return;
				endif;
			else
				if(!StartSpecialActionTimer(pxCharacter))then EndTask();return;endif;
				SetUnStoppable(true);
				var vec3 vCreate=m_vTarget;
				vCreate.SetZ(Math.Max(CSrvWrap.GetScapeMgr().GetHeight(vCreate.GetX(),vCreate.GetY()),CSrvWrap.GetScapeMgr().GetSeaLevel()));
//				var ^CQuicksand pxTrap = cast<CQuicksand>(CSrvWrap.GetObjMgr()^.CreateObj(m_sTrap,pxCharacter^.GetOwner(),vCreate));
				var ^CBuilding pxTrap = cast<CBuilding>(CSrvWrap.GetObjMgr()^.CreateObj(m_sTrap,pxCharacter^.GetOwner(),vCreate));
				if(pxTrap!=null)then
					//pxTrap^.AddHitpoints(pxTrap^.GetMaxHitpoints());
					pxTrap^.SetReady();
				endif;
				if(pxCharacter^.HasAnim("heal_0"))then
					pxCharacter^.AnimAction("heal_0");
				elseif(pxCharacter^.HasAnim("menace"))then
					pxCharacter^.AnimAction("menace");
				endif;
				m_sState = "exit";
				return;
			endif;
		elseif(m_sState == "exit")then
			SetUnStoppable(false);
			m_sState = "EndTask";
		elseif(m_sState == "EndTask")then
			EndTask();
			return;
		endif;
	endproc;

	proc bool IsInRange()
		var ^CCharacter pxCharacter = cast<CCharacter>(m_xCharacter.GetObj());
		if(pxCharacter==null)then return false; endif;
		var real fAttackRange = 32.0; //pxCharacter^.GetAttackRange();
		fAttackRange+=pxCharacter^.GetMiscValueTT("Shaman_Cast_Sandtrap");
		var real fDistance = (m_vTarget - pxCharacter^.GetPos()).Abs2S();
		return fDistance <= fAttackRange*fAttackRange;
	endproc;

	proc void USLOnLeave(^CState p_pxFrom, ^CState p_pxTo)
		super.USLOnLeave(p_pxFrom, p_pxTo);
	endproc;

	export proc bool Break()
		SetPrepareActionPath(m_xCharacter, GetSpecialActionPath(), false);
		if (m_xCharacter.IsValid()) then
			m_xCharacter.GetObj()^.TerminateAction();
		endif;
		return true;
	endproc;

	export proc bool OnActionEnd(bool p_bBroken)
		if(p_bBroken)then
			ResetCounter();
		endif;
		return true;
	endproc;

	export proc void Skip()
	endproc;
	
	export proc void EndTask()
		SetPrepareActionPath(m_xCharacter, GetSpecialActionPath(), false);
		UpdateAggressionPos(m_xCharacter);
		super.EndTask();
	endproc;

endclass;