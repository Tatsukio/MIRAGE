class CMineTask inherit CGenericHarvest
	var CGameTimeSpan				m_xDuration;
	var CGameTimeSpan				m_xPickUpDuration;
	var CGameTimeSpan				m_xDropDuration;
	var CGameTime						m_xStart;
	var real								m_fTargetRadius;
	var int									m_iTick;

	var CObjQuery						m_xDeliverSearch;
	var CObjQuery						m_xHarvestSiteSearch;
	var CFourCC							m_xFCCWeaponLink;
	
	var CObjList						m_xInvalidHarvestSites;
	var bool								m_bAllHarvestSitesInvalid;
	var string							m_sResGFX;
	
	export constructor()
		SetName("Mine");
		m_xFCCWeaponLink="HndR";
		m_sResGFX="Product_Stone_Nor";
	endconstructor;
	
	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CMineTask] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var CFourCC xType="MiTa";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,1);
		var ^CArc pxArc=^(pxWalk^.GetArc());
		m_xDuration.DoKArc(pxArc^);
		m_xPickUpDuration.DoKArc(pxArc^);
		m_xDropDuration.DoKArc(pxArc^);
		m_xStart.DoKArc(pxArc^);
		(pxArc^) << m_fTargetRadius;
		(pxArc^) << m_iTick;
		(pxArc^) << m_sResGFX;
		pxWalk^.Close();
		KLog.LogWarn("CArc.Save","[CMineTask] Saving done");
	endproc;

	export proc void Load(^CUOFReaderNode p_pxReaderNode)
		if(p_pxReaderNode^.GetType()=="MiTa")then
			var ^CArc pxArc=^(p_pxReaderNode^.GetArc());
			m_xDuration.DoKArc(pxArc^);
			m_xPickUpDuration.DoKArc(pxArc^);
			m_xDropDuration.DoKArc(pxArc^);
			m_xStart.DoKArc(pxArc^);
			(pxArc^) << m_fTargetRadius;
			(pxArc^) << m_iTick;
			(pxArc^) << m_sResGFX;
			InitQueries();
		else
			super.Load(p_pxReaderNode);
		endif;
	endproc;
	
	export proc bool Init(CObjHndl p_xWorker,CObjHndl p_xTarget)
		if(!p_xWorker.IsValid()||(!p_xTarget.IsValid()))then
			return false;
		endif;
		m_xWorker=p_xWorker;
		m_xHarvestSite=p_xTarget;
		m_sState="goto_stone";
		var ^CGameObj pxWorker=m_xWorker.GetObj();
		if (pxWorker == null) then return false; endif;
		if(pxWorker^.GetClassName()=="hu_mammoth_lumber_upgrade")then
			m_sResGFX="hu_mammoth_lumber_upgrade_stones";
		endif;
		pxWorker^.AnnounceState("mine");
		//Check if unit may mine
		var ^CFightingObj pxFightingObj=cast<CFightingObj>(pxWorker);
		if(!pxFightingObj^.CanHarvestRes("stone"))then return false;endif;
		var ^CAttribs pxAttr = pxWorker^.GetAttribs();
		if(pxAttr!=null)then
			pxAttr^.SetValue("CurTask",GetName());
		endif;
		InitQueries();
		var ^CLevel pxLevel=CSrvWrap.GetCurLevel();
		if(pxLevel!=null)then
			var ^CPlayer pxPlayer = pxLevel^.GetPlayer(pxWorker^.GetOwner());
			var ^CPropDB pxRes;
			var ^CPropDB.CNode pxResTable;
			if(pxPlayer!=null)then
				//If Player exists, take its DB
				var ^CBasePlayer pxBasePlayer = cast<CBasePlayer>(pxPlayer);
				pxRes = pxBasePlayer^.GetResourceTable();
			endif;
			if(pxRes!=null)then
				pxResTable = pxRes^.GetRoot().Get("STON");
			endif;
			//get all available resources for this tribe
			m_asResources=0;
			var int i;
			if(pxResTable!=null)then
				for(i=0)cond(i<pxResTable^.NumSubs())iter(i++)do
					m_asResources.AddEntry((pxResTable^)[i].Name());
					//KLog.LogError("CHP","MineRes: "+(pxResTable^)[i].Name());
				endfor;
			endif;
			m_afMineVal=m_asResources.NumEntries();
		endif;
		m_xDuration = 1.6;
		m_xPickUpDuration = 0.4;
		m_xDropDuration = 1.2;
		m_vCurDelivery = pxWorker^.GetPos();
		return true;
	endproc;
	
	proc void InitQueries()
		var ^CGameObj pxWorker=m_xWorker.GetObj();
		if(pxWorker==null) then return; endif;
		m_xDeliverSearch.SetOwner(pxWorker^.GetOwner());
		m_xDeliverSearch.SetAttribsNeg("CurTask","BuildUpB");
		m_xDeliverSearch.SetAttribsNeg("ReadyForWork",0);
		m_xDeliverSearch.SetAttribsPos("stoneDelivery",true);
		m_xHarvestSiteSearch.SetType("STON");
		m_xHarvestSiteSearch.SetVisibility(pxWorker^.GetOwner(),true);
	endproc;

	proc void USLOnEnter(^CState p_pxFrom, ^CState p_pxTo)
		var ^CGameObj pxWorker=m_xWorker.GetObj();
		if(pxWorker==null)then EndTask();return; endif;
		var ^CGameObj pxStone=m_xHarvestSite.GetObj();
		if(pxStone==null)then EndTask();return; endif;
		if(pxStone^.GetType()!="STON")then EndTask();return; endif;
		if(pxWorker^.GetClassName()=="hu_mammoth_lumber_upgrade")then
			m_sResGFX="hu_mammoth_lumber_upgrade_stones";
		endif;
		var ^CTransportObj pxTransporter;
		pxTransporter=cast<CTransportObj>(pxWorker);
		if(pxTransporter!=null)then
			if(m_asResources.NumEntries()>0)then
				pxTransporter^.SetTaskDescription(m_asResources[0]);
			endif;
		endif;
		// RT#8432
		var ^CAttribs pxAttr = pxWorker^.GetAttribs();
		if(pxAttr!=null)then
			pxAttr^.SetValue("CurTask",GetName());
		endif;
		SetMaxCounter(4);
		ResetCounter();
	endproc;

	proc void USLOnTick(int p_iTime)
		var ^CTransportObj pxWorker;
		begin CheckWorker;
			var ^CGameObj pxTmp=m_xWorker.GetObj();
			if (pxTmp==null) then
				EndTask();
				return;
			endif;
			if(
				(cast<CHarvester>(pxTmp)==null) &&
				(cast<CMammoth>(pxTmp)==null || !(cast<CMammoth>(pxTmp))^.CanHarvestRes("stone")) &&
				(cast<CMechWalker>(pxTmp)==null || !(cast<CMechWalker>(pxTmp))^.CanHarvestRes("stone"))  &&
				(cast<CLumberjack>(pxTmp)==null || !(cast<CLumberjack>(pxTmp))^.CanHarvestRes("stone"))
			)then
				EndTask();
				return;
			endif;
			pxWorker=cast<CTransportObj>(pxTmp);
		end CheckWorker;
		var ^CStone pxStone;
		begin CheckStone;
			var ^CGameObj pxTmp=m_xHarvestSite.GetObj();
			if(pxTmp!=null)then
				pxStone=cast<CStone>(pxTmp);
			endif;
		end CheckStone;
		var int i;
		begin CheckInventory;
			if(m_sState!="drop_stones"  && m_sState!="wait_drop_stones"&& m_sState!="unlink_stones" )then
				var bool bResFull = true;
				if(!pxWorker^.LinkOccupied())then
					bResFull = false;
				endif;
				if(m_sState!="goto_deliver" && m_sState!="wait_pickup_stones" && m_sState!="goto_stone")then
					if(bResFull)then
						m_sState="pickup_stones";
					endif;
				endif;
				if(pxStone==null && m_sState!="pickup_stones" && m_sState!="wait_pickup_stones" && m_sState!="find_next_stone")then
					m_sState="goto_deliver";
				endif;
			endif;
		end CheckInventory;
		//L CSrvWrap.LogSpam("Mine","state: "+m_sState);
		if(m_sState == "wait_pickup_stones")then
			var CGameTime xNow = CTimeMgr.Get().GetTime();
			if((xNow-m_xStart) < m_xPickUpDuration)then
				return;
			elseif((xNow-m_xStart) < m_xDuration)then
				var string sSetting = CSrvWrap.GetCurLevel()^.GetLevelInfo().GetAttribs().GetValue("Setting");
				//pxWorker^.SetLinkGFX(m_xFCCWeaponLink,"Product_Stone_"+sSetting.Left(3));
				return;
			else
				m_sState = "goto_deliver";
			endif;
		endif;
		if(m_sState == "wait_drop_stones")then
			var CGameTime xNow = CTimeMgr.Get().GetTime();
			if((xNow-m_xStart) < m_xDropDuration)then
				return;
			elseif((xNow-m_xStart) < m_xDuration)then
				///pxWorker^.RemLinkGFX(m_xFCCWeaponLink);
				return;
			else
				if(pxStone!=null)then
					m_sState = "goto_stone";
				else
					m_sState = "find_next_stone";
				endif;
			endif;
		endif;
		if(m_sState=="goto_stone")then
//			m_vCurTarget=GetAdoptedDest(pxWorker^.GetPos(),pxStone^.GetPos(),4.5f);	// 4.5f
			CSrvWrap.GetObjMgr()^.GetFreePos(m_vCurTarget,pxWorker,pxStone^.GetPos());
			if(pxWorker^.GetOnWall())then
				pxWorker^.WallWalkAction(m_vCurTarget,true,pxWorker^.GetDefaultSpeed(),false);
			else
				pxWorker^.WalkAction(m_vCurTarget,pxWorker^.GetDefaultSpeed(),true);
			endif;
			m_sState="rotate_to_target";
		elseif(m_sState=="rotate_to_target")then
			if(pxStone==null)then
				m_sState="find_next_stone";
				return;
			endif;
			if((pxWorker^.GetPos()-m_vCurTarget).Abs()>=2.0)then
			//if(!HasArrivedTarget(pxWorker^.GetPos(), 4.0))then
				if(!CanFollow())then
					ResetCounter();
					m_xInvalidHarvestSites.Include(pxStone^.GetHandle());
					m_sState="find_next_stone";
					return;
				else
					m_sState="goto_stone";
					return;
				endif;
			else
				var vec3 vDir=pxStone^.GetPos()-pxWorker^.GetPos();
				var Quat qTRot;
				qTRot.FromXYDir(vDir.GetX(),vDir.GetY());
				//pxWorker^.SetLinkGFX(m_xFCCWeaponLink,"Hu_Hammer");
				pxWorker^.RotateAction(qTRot);
				m_fProgressStep=1.0; //pxWorker^.GetResourceInventorySize() / (5.0 /*<-number of loops per full charge*/ * pxWorker^.GetTimeFactor("stone"));
				m_sState="mine_stone";
			endif;
		elseif(m_sState=="mine_stone")then
			if((pxWorker^.GetPos()-m_vCurTarget).Abs()>=2.0)then
				m_sState="goto_stone";
			else
				m_sState="add_stone_to_inv";
				pxWorker^.DoMineAnim();
				var CGameTime xNow=CTimeMgr.Get().GetTime();
				m_xLastTick=xNow;
			endif;
		elseif(m_sState=="add_stone_to_inv")then
			if(pxStone==null)then
				m_sState = "find_next_stone";
			else
				var real fBefore=pxWorker^.GetResInvStoneWLO();
				var real fMined=pxStone^.Mine(pxWorker^.GetResInvCap()-fBefore);
				pxWorker^.SetResInvStone(fMined+fBefore);
//				pxWorker^.SetResInvStone(fMined+fBefore);
				pxStone^.OnUpdateFlags();
				m_sState="pickup_stones";
			endif;
		elseif(m_sState=="find_next_stone")then
			var CObjList xStones;
			m_xHarvestSiteSearch.RegionCircle(m_vCurDelivery,100.0);
			if(m_xHarvestSiteSearch.Execute(xStones))then
				xStones.SortDistance(pxWorker^.GetPos());
				while(xStones.NumEntries()>0)do
					if(m_xInvalidHarvestSites.FindEntry(xStones[0])!=-1)then
						xStones.DeleteEntry(0);
						continue;
					endif;
					if(!pxWorker^.CheckMaxAutoprodDist(xStones[0])) then
						xStones.DeleteEntry(0);
						continue;
					endif;
					break;
				endwhile;
				if(xStones.NumEntries()>0)then
					m_xHarvestSite = xStones[0];
					m_sState = "goto_stone";
					m_xInvalidHarvestSites.Clear();
				else
					if(m_bAllHarvestSitesInvalid)then
						CSrvWrap.SendGenericEvtToPlayer(pxWorker^.GetOwner(), "NoMoreStone");
						EndTask();
						return;
					else
						m_bAllHarvestSitesInvalid = true;
						m_xInvalidHarvestSites.Clear();
						return;
					endif;
				endif;
			else
				CSrvWrap.SendGenericEvtToPlayer(pxWorker^.GetOwner(), "NoMoreStone");
				var bool bResInvEmtpy=true;
				bResInvEmtpy = pxWorker^.GetResInvStone()<=0.0;
				if(!bResInvEmtpy)then
					m_sState="goto_deliver";
					return;
				else
					EndTask();
					return();
				endif;
			endif;
		elseif(m_sState=="pickup_stones")then
			//pxWorker^.RemLinkGFX(m_xFCCWeaponLink);
			//pxWorker^.DoTakeAnim();
			m_xStart = CTimeMgr.Get().GetTime();
			m_sState = "goto_deliver";
		elseif(m_sState=="goto_deliver")then
			var CObjList xDeliveries;
			CSrvWrap.GetDiplomacyMgr().AddOtherFriendsToSearch(pxWorker^.GetOwner(), m_xDeliverSearch);
			if(m_xDeliverSearch.Execute(xDeliveries))then
				pxWorker^.LinkToStock(m_sResGFX);
				xDeliveries.SortDistance(pxWorker^.GetPos());
				var ^CGameObj pxDel=xDeliveries[0].GetObj();
				m_vCurDelivery = pxDel^.GetPos();
				m_xCurDelivery = xDeliveries[0];
				m_vCurTarget=m_vCurDelivery;
				//L CSrvWrap.LogSpam("Mine","new delivery "+m_vCurTarget.ToString()+" gefunden");
				var CFourCC xType="cary";
				//pxWorker^.WalkAction(m_vCurTarget,pxWorker^.GetDefaultSpeed(),true,true,0,xType);
				m_fTargetRadius = pxDel^.GetRadius();
				var CGameObj.CAdvanceActionParams xAWAP;
				xAWAP.m_fMinDistance=0.0f;
				xAWAP.m_iPrefSpeed=pxWorker^.GetDefaultSpeed();
				xAWAP.m_xWalkSet="def";
				if(pxWorker^.GetOnWall())then
					pxWorker^.AdvanceWallAction(pxDel^.GetHandle(),xAWAP,true,false);
				else
					pxWorker^.AdvanceAction(pxDel^.GetHandle(),xAWAP);
				endif;
				m_sState="drop_stones";
			else
				//L CSrvWrap.LogWarning("Mine","no delivery target found!");
				pxWorker^.ClearLink();
				EndTask();
				return;
			endif;
		elseif(m_sState=="drop_stones")then
			if((pxWorker^.GetPos()-m_vCurTarget).Abs()>=m_fTargetRadius*1.3)then
				//L CSrvWrap.LogSpam("Mine","Pos "+pxWorker^.GetPos().ToString()+" zu weit vom delivery "+m_vCurTarget.ToString()+" entfernt, laufe nochmal");
				m_sState="goto_deliver";
			else
				var bool bPutSomethingDown = false;
				for(i=0)cond(i<m_asResources.NumEntries())iter(i++)do
					if(pxWorker^.CheckInResInvStone())then
						bPutSomethingDown = true;
					endif;
				endfor;
				//L CSrvWrap.LogInfo("Mine","bPutSomethingDown="+bPutSomethingDown.ToString());
				if(bPutSomethingDown)then
					var ^CFightingObj pxDelivery = cast<CFightingObj>(m_xCurDelivery.GetObj());
					if(pxDelivery!=null)then
						pxDelivery^.AcceptDeliveries();
					endif;
					pxWorker^.ClearLink();
					var string sSetting=CSrvWrap.GetCurLevel()^.GetLevelInfo().GetAttribs().GetValue("Setting");
					//pxWorker^.SetLinkGFX(m_xFCCWeaponLink,"Product_Stone_"+sSetting.Left(3));
					//pxWorker^.SetAnim("belly_put_down",1);
					pxWorker^.WaitAction(1.0f);
					m_xStart = CTimeMgr.Get().GetTime();
					if(pxStone!=null)then
						m_sState = "goto_stone";
					else
						m_sState = "find_next_stone";
					endif;
				else
					//pxWorker^.RemLinkGFX(m_xFCCWeaponLink);
					pxWorker^.WaitAction(2.0f); //wait 2 secs for free checkin
					return;
				endif;
			endif;
		else
			CSrvWrap.LogWarning("Mine","invalid state: "+m_sState);
			pxWorker^.ClearLink();
			EndTask();
		endif;
	endproc;

	proc void USLOnLeave(^CState p_pxFrom, ^CState p_pxTo)
		super.USLOnLeave(p_pxFrom, p_pxTo);
		var ^CGameObj pxWorker=m_xWorker.GetObj();
		if(pxWorker!=null)then pxWorker^.RemLinkGFX(m_xFCCWeaponLink); endif;
		var ^CFightingObj pxChar = cast<CFightingObj>(m_xWorker.GetObj());
		if(pxChar==null)then return; endif;
		pxChar^.ShowWeapons();
		pxChar^.SetTaskDescription("");
	endproc;

	export proc bool Break()
		var ^CGameObj pxWorker=m_xWorker.GetObj();
		if(pxWorker!=null)then pxWorker^.TerminateAction(); endif;
		return true;
	endproc;

endclass;
