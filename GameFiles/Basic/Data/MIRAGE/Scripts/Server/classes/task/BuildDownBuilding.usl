class CBuildDownBuilding inherit CTask

	var CObjHndl				m_xBuilding;				///< this building
	var CGameTime				m_xLastTick;
	var CGameTimeSpan		m_xDuration;
	var string					m_sState;
	var real						m_fProgress;
	var string					m_sAction;
	var string					m_sBuildAction;
	var int							m_iProdID;
	var bool						m_bVPU;

	export constructor()
		SetName("BldDownB");
		m_iProdID=-1;
	endconstructor;
	
	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CBuildDownBuilding] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var CFourCC xType="BDBl";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,3);
		var ^CArc pxArc=^(pxWalk^.GetArc());
		m_xBuilding.DoKArc(pxArc^);
		m_xLastTick.DoKArc(pxArc^);
		m_xDuration.DoKArc(pxArc^);
		(pxArc^) << m_sState;
		(pxArc^) << m_fProgress;
		(pxArc^) << m_sAction;
		(pxArc^) << m_sBuildAction;
		(pxArc^) << m_iProdID;
		(pxArc^) << m_bVPU;
		pxWalk^.Close();
	endproc;

	export proc void Load(^CUOFReaderNode p_pxReaderNode)
		if(p_pxReaderNode^.GetType()=="BDBl")then
			var ^CArc pxArc=^(p_pxReaderNode^.GetArc());
			m_xBuilding.DoKArc(pxArc^);
			m_xLastTick.DoKArc(pxArc^);
			m_xDuration.DoKArc(pxArc^);
			(pxArc^) << m_sState;
			(pxArc^) << m_fProgress;
			(pxArc^) << m_sAction;
			(pxArc^) << m_sBuildAction;
			if(p_pxReaderNode^.GetVersion()>=2)then
				(pxArc^) << m_iProdID;
			endif;
			if(p_pxReaderNode^.GetVersion()>=3)then
				(pxArc^) << m_bVPU;
			endif;
		else
			super.Load(p_pxReaderNode);
		endif;
	endproc;	

	export proc void SetFilter(bool p_bActivate)
		var ^CGameObj pxObj=m_xBuilding.GetObj();
		if(pxObj==null)then return; endif;
		var ^CTechTreeDef pxDef=pxObj^.GetTechTreeDef();
		if(p_bActivate)then
			//pxDef^.EnableFilter("/Filters/Aje/Upgrades/all_buildlings/BuildDown");
			pxDef^.EnableFilter("/Filters/Aje/Upgrades/"+pxObj^.GetClassName()+"/BuildDown");
		else
			//pxDef^.DisableFilter("/Filters/Aje/Upgrades/all_buildlings/BuildDown");
			pxDef^.DisableFilter("/Filters/Aje/Upgrades/"+pxObj^.GetClassName()+"/BuildDown");
		endif;
	endproc;
	
	export proc bool Init(CObjHndl p_xBuilding, string p_sPath)
		m_sState = "EndTask";
		if(!p_xBuilding.IsValid())then return false; endif;
		m_xBuilding = p_xBuilding;
		if(!IsAllowed())then return false; endif;
		m_bVPU=false;
		m_fProgress = 0.0;
		SetFilter(true);
		var ^CFightingObj pxActor=cast<CFightingObj>(m_xBuilding.GetObj());
		if(pxActor!=null)then
			m_iProdID=pxActor^.AddProdQueueItem(p_sPath,m_bVPU);
		endif;
		m_sState = "add_progress";
		return true;
	endproc;

	export proc bool InitVPU(CObjHndl p_xBuilding, string p_sPath)
		m_sState = "EndTask";
		if(!p_xBuilding.IsValid())then return false; endif;
		m_xBuilding = p_xBuilding;
		if(!IsAllowed())then return false; endif;
		m_bVPU=true;
		m_fProgress = 0.0;
		SetFilter(true);
		var ^CFightingObj pxActor=cast<CFightingObj>(m_xBuilding.GetObj());
		if(pxActor!=null)then
			m_iProdID=pxActor^.AddProdQueueItem(p_sPath,m_bVPU);
		endif;
		m_sState = "add_progress";
		return true;
	endproc;

	proc void USLOnEnter(^CState p_pxFrom, ^CState p_pxTo)
		if(m_sState=="EndTask")then
			EndTask();
			return;
		endif;
		var ^CBuilding pxBuilding = cast<CBuilding>(m_xBuilding.GetObj());
		if(pxBuilding==null)then
			EndTask();
			return;
		endif;
		var CTechTree xTechTree = pxBuilding^.GetTechTree();
		m_sBuildAction = pxBuilding^.GetBuildAction();
		var string sActionPath=pxBuilding^.GetBuildAction();
		var ^CTechTree.CNode pxBuild=xTechTree.FindNode(sActionPath);
		if(pxBuild!=null)then
			m_xDuration = xTechTree.GetValueR(sActionPath+"/duration",10.0);
		else
			m_xDuration = xTechTree.GetValueR(pxBuilding^.GetObjPath()+"/duration",10.0);
		endif;
		//var string sActionPath="Actions/"+pxBuilding^.GetTribeName()+"/Build/BLDG/"+pxBuilding^.GetClassName();
		m_xDuration*=pxBuilding^.GetTechTreeActionModifier(sActionPath, "duration");
		m_xDuration*=0.5;
		m_sAction = "Actions/"+pxBuilding^.GetTribeName()+"/Moves/BLDG/BuildDown";
		m_xLastTick = CTimeMgr.Get().GetTime();
		var ^CAttribs pxAttr = pxBuilding^.GetAttribs();
		if(pxAttr!=null)then
//			pxAttr^.SetValue("CurTask",GetName());
//			pxAttr^.SetValue("CurProcessObj",m_sAction);
//			pxAttr^.SetValue("CurProcess",0);
			pxBuilding^.SetAttribAction("CurTask",GetName(),m_bVPU);
			pxBuilding^.SetAttribAction("CurProcessObj",m_sAction,m_bVPU);
			pxBuilding^.SetAttribAction("CurProcess",0,m_bVPU);
		else
			EndTask();
			return;
		endif;
	endproc;

	proc void USLOnTick(int p_iTime)
		var ^CBuilding pxBuilding = cast<CBuilding>(m_xBuilding.GetObj());
		if(pxBuilding==null)then
			EndTask();
			return;
		endif;
		if(m_sState=="add_progress" && !pxBuilding^.GetIncapacitated())then
			var CGameTime xNow=CTimeMgr.Get().GetTime();
			var CGameTimeSpan xDiff=xNow-m_xLastTick;
			m_xLastTick=xNow;
			m_fProgress += 100.0*(xDiff.GetSecondsF()/(m_xDuration.GetSecondsF()));
			var ^CAttribs pxAttr = pxBuilding^.GetAttribs();
			if(pxAttr!=null)then
				pxAttr^.SetValue("CurProcess",m_fProgress.ToInt());
				pxBuilding^.SetAttribAction("CurProcess",m_fProgress.ToInt(),m_bVPU);
			else
				EndTask();
				return;
			endif;
			if(m_fProgress>=100.0)then
				//die silent, no special fx please
				pxBuilding^.GrantResources(pxBuilding^.GetOwner());
				pxBuilding^.TieUpAllLooseEnds();
				var int iPlayer=pxBuilding^.GetOwner();
				var ^CBasePlayer pxBPl = CBasePlayer.GetPlayer(iPlayer);
				if(pxBPl!=null)then
					CSrvWrap.SendGenericEvtToPlayer(iPlayer,"RecycleDone");
				endif;
				EndTask();
				pxBuilding^.DieFastAndSilent();
				return;
			endif;
		elseif(m_sState=="EndTask")then
			EndTask();
			return;
		endif;
	endproc;

	proc void USLOnLeave(^CState p_pxFrom, ^CState p_pxTo)
		super.USLOnLeave(p_pxFrom, p_pxTo);
	endproc;

	export proc void Skip()
		SetFilter(false);
		var ^CFightingObj pxActor=cast<CFightingObj>(m_xBuilding.GetObj());
		if(pxActor!=null)then
			pxActor^.RemoveProdQueueItem(m_iProdID,m_bVPU);
		endif;
	endproc;
	
	export proc bool Break()
		if(m_xBuilding.IsValid())then
			var ^CFightingObj pxBuilding = cast<CFightingObj>(m_xBuilding.GetObj());
			if(pxBuilding!=null)then
				pxBuilding^.SetAttribAction("CurTask","none",m_bVPU);
				pxBuilding^.SetAttribAction("CurProcessObj","",m_bVPU);
				pxBuilding^.SetAttribAction("CurProcess",0,m_bVPU);
				SetFilter(false);
				pxBuilding^.RemoveProdQueueItem(m_iProdID,m_bVPU);
			endif;
		endif;
		return true;
	endproc;
	
	proc bool IsAllowed()
		var ^CBuilding pxBuilding = cast<CBuilding>(m_xBuilding.GetObj());
		if(pxBuilding==null)then
			return false;
		endif;
		if(pxBuilding^.IsDeconstructible())then // Henry: Dismantable attrib set in SDK...
			return false;
		endif;
//		m_sBuildAction = pxBuilding^.GetBuildAction();
//		var CTechTree xTechTree = pxBuilding^.GetTechTree();
//		var ^CTechTree.CNode pxBuild=xTechTree.FindNode(m_sBuildAction);
////		if(pxBuild==null)then
//		if(pxBuild==null||!pxBuild^.IsVisible())then
//			return false;
//		endif;
		return true;
	endproc;
	
endclass;
