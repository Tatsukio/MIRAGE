class CTornado inherit CSpecialActionTask

	var CObjHndl		m_xCharacter;
	var vec3				m_vTarget;
	var string			m_sState;
	var int					m_iRetryCounter;

	export constructor()
		SetName("Tornado");
		SetCivil(false);
		m_iRetryCounter = 0;
	endconstructor;
	
	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CTornado] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var CFourCC xType="Torn";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,1);
		var ^CArc pxArc=^(pxWalk^.GetArc());
		m_xCharacter.DoKArc(pxArc^);
		(pxArc^) << m_vTarget;
		(pxArc^) << m_sState;
		(pxArc^) << m_iRetryCounter;
		pxWalk^.Close();
	endproc;

	export proc void Load(^CUOFReaderNode p_pxReaderNode)
		if(p_pxReaderNode^.GetType()=="Torn")then
			var ^CArc pxArc=^(p_pxReaderNode^.GetArc());
			m_xCharacter.DoKArc(pxArc^);
			(pxArc^) << m_vTarget;
			(pxArc^) << m_sState;
			(pxArc^) << m_iRetryCounter;
		else
			super.Load(p_pxReaderNode);
		endif;
	endproc;

	export proc bool Init(CObjHndl p_xCharacter, vec3 p_vTarget, string p_sPath)
		m_sState="goto_target";
		if(!p_xCharacter.IsValid())then
			m_sState="EndTask";
			return false;
		endif;
		if(p_vTarget=={0.0,0.0,0.0})then
			m_sState="EndTask";
			return false;
		endif;
		SetSpecialActionPath(p_sPath);
		SetPrepareActionPath(p_xCharacter, p_sPath, true);
		m_xCharacter = p_xCharacter;
		m_vTarget = p_vTarget;
		return true;
	endproc;

	proc void USLOnEnter(^CState p_pxFrom, ^CState p_pxTo)
		var ^CFightingObj pxFightingObj=cast<CFightingObj>(m_xCharacter.GetObj());
		if(pxFightingObj==null || !pxFightingObj^.CheckSpecialActionTimer(GetSpecialActionPath()))then
			EndTask();
			return;
		endif;
		if(m_sState=="EndTask")then
			EndTask();
		endif;
	endproc;

	proc void USLOnTick(int p_iTime)
		var ^CCharacter pxCharacter = cast<CCharacter>(m_xCharacter.GetObj());
		if(pxCharacter==null)then EndTask(); return; endif;
		if(pxCharacter^.GetEffectFlag(CFightingObj.EFFECT_AJE_CAMOUFLAGE))then
			pxCharacter^.SetEffectFlag(CFightingObj.EFFECT_AJE_CAMOUFLAGE, false);
		endif;
		if(m_sState == "goto_target")then
			var real fAttackRange	= 30.0; //pxCharacter^.GetAttackRange();
			fAttackRange+=pxCharacter^.GetMiscValueTT("Shaman_Cast_Tornado");
			var CFourCC xMoep;
			if(!IsInRange())then
				if(pxCharacter^.GetOnWall())then
					EndTask();return;
				endif;
				pxCharacter^.AdvanceAction(CObjHndl.Invalid(),fAttackRange,pxCharacter^.GetDefaultSpeed(),pxCharacter^.GetWalkSet(),5000000.0, pxCharacter^.GetPos(), m_vTarget);
			endif;
			m_sState = "throw";
		elseif(m_sState == "throw")then
			if(!IsInRange())then
				if(m_iRetryCounter>3)then
					EndTask();
				else
					m_iRetryCounter++;
					m_sState = "goto_target";
					return;
				endif;
			else
				//create Tornado-Object and throw it...
				if(!StartSpecialActionTimer(pxCharacter))then EndTask();return;endif;
				SetUnStoppable(true);
				var ^CTornadoObj pxTornado = cast<CTornadoObj>(CSrvWrap.GetObjMgr()^.CreateObj("Aje_Tornado",pxCharacter^.GetOwner(),m_vTarget));
				if(pxTornado!=null)then
					pxTornado^.Set(m_vTarget,m_xCharacter);
				endif;
				pxCharacter^.AnimAction("tornado");
				m_sState = "EndTask";
				return;
			endif;
		elseif(m_sState == "EndTask")then
			SetUnStoppable(false);
			EndTask();
			return;
		endif;
	endproc;

	proc bool IsInRange()
		var ^CCharacter pxCharacter = cast<CCharacter>(m_xCharacter.GetObj());
		if(pxCharacter==null)then return false; endif;
		var real fAttackRange = 32.0; //pxCharacter^.GetAttackRange();
		fAttackRange+=pxCharacter^.GetMiscValueTT("Shaman_Cast_Tornado");
		var real fDistance = (m_vTarget - pxCharacter^.GetPos()).Abs2S();
		return fDistance <= fAttackRange*fAttackRange;
	endproc;

	proc void USLOnLeave(^CState p_pxFrom, ^CState p_pxTo)
		super.USLOnLeave(p_pxFrom, p_pxTo);
	endproc;

	export proc bool Break()
		if(GetUnStoppable())then
			return false;
		endif;
		SetPrepareActionPath(m_xCharacter, GetSpecialActionPath(), false);
		if(m_xCharacter.IsValid())then
			m_xCharacter.GetObj()^.TerminateAction();
		endif;
		return true;
	endproc;

	export proc void Skip()
	endproc;
	
	export proc void EndTask()
		SetPrepareActionPath(m_xCharacter, GetSpecialActionPath(), false);
		UpdateAggressionPos(m_xCharacter);
		super.EndTask();
	endproc;

endclass;