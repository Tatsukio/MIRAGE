class CPickUp inherit CTargetTask

	var CObjHndl	m_xWorker;
	var CObjHndl	m_xItem;
	var CObjHndl	m_xUnit;
	var string		m_sState;

	export constructor()
		SetName("PickUp");
		SetCivil(false);
	endconstructor;
	
	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CPickUp] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var CFourCC xType="Pick";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,1);
		var ^CArc pxArc=^(pxWalk^.GetArc());
		m_xWorker.DoKArc(pxArc^);
		m_xItem.DoKArc(pxArc^);
		m_xUnit.DoKArc(pxArc^);
		(pxArc^) << m_sState;
		pxWalk^.Close();
		KLog.LogWarn("CArc.Save","[CPickUp] Saving done");
	endproc;
	
	export proc void Load(^CUOFReaderNode p_pxReaderNode)
		if(p_pxReaderNode^.GetType()=="Pick")then
			var ^CArc pxArc=^(p_pxReaderNode^.GetArc());
			m_xWorker.DoKArc(pxArc^);
			m_xItem.DoKArc(pxArc^);
			m_xUnit.DoKArc(pxArc^);
			(pxArc^) << m_sState;
		else
			super.Load(p_pxReaderNode);
		endif;
	endproc;
	
	export proc bool Init(CObjHndl p_xWorker,CObjHndl p_xItem)
		if(!p_xWorker.IsValid()||!p_xItem.IsValid())then
			m_sState="EndTask";
			return false;
		endif;
		m_xWorker=p_xWorker;
		m_xItem=p_xItem;
		m_xUnit=m_xWorker;
		m_sState="check_inv";
		return true;
	endproc;
	
	proc void USLOnEnter(^CState p_pxFrom, ^CState p_pxTo)
		var ^CGameObj pxWorker=m_xWorker.GetObj();
		var ^CGameObj pxItem=m_xItem.GetObj();
		if((pxWorker==null)||(pxItem==null))then EndTask(); return; endif;
		m_sState="check_inv";
	endproc;
	
	export proc bool OnActionEnd(bool p_bBroken)
		if(p_bBroken)then
			ResetCounter();
		endif;
		return true;
	endproc;
	
	proc void USLOnTick(int p_iTime)
		var ^CFightingObj pxWorker=cast<CFightingObj>(m_xWorker.GetObj());
		var ^CGameObj pxItem=m_xItem.GetObj();
		var ^CGameObj pxUnit = m_xUnit.GetObj();
		if((pxWorker==null)||(pxItem==null)||(pxUnit==null))then return; endif;
		if(pxItem^.GetOwner()!=-1)then EndTask(); return; endif;
		var int iUnitOwner=pxUnit^.GetOwner();
		var string sItemClass=pxItem^.GetClassName();
		if(!CArtifactMgr.Get().IsAllowedToPickUpItem(iUnitOwner,sItemClass))then EndTask(); return; endif;
		if(m_sState=="check_inv")then
			var ^CInventory pxInv=pxWorker^.GetInventory();
			if(pxInv!=null && pxInv^.IsFull())then
				CFeedback.Print(pxWorker^.GetOwner(), CFeedback.SYSTEM, "_NT_PickUpFailInvFull");
				EndTask();
			else
				m_sState="goto_item";
			endif;
		elseif(m_sState=="goto_item")then
			var vec3 vTarget=GetAdoptedDest(pxUnit^.GetPos(),pxItem^.GetPos(),0.9f);
			var int iSpeed=2;
			var ^CFightingObj pxF=cast<CFightingObj>(pxUnit);
			if(pxF!=null)then
				iSpeed=pxF^.GetDefaultSpeed();
			endif;
			if(pxUnit^.GetOnWall() && cast<CCharacter>(pxUnit)!=null)then
				pxUnit^.WallWalkAction(vTarget,true,iSpeed,false);
			else
				pxUnit^.WalkAction(vTarget,iSpeed);
			endif;
			SetCurrentTarget(vTarget);
			pxWorker^.UpdateAggressionPos(vTarget);
			SetMaxCounter(2);
			m_sState="take_item";
		elseif(m_sState=="take_item")then
			var real fAdd=pxWorker^.GetCollisionRadius()/2.0f;
			var vec3 vTmp=pxWorker^.GetPos();
			if(pxWorker^.IsFlyingUnit())then
				vTmp.SetZ(GetCurrentTarget().GetZ());
			endif;
			if(!HasArrivedTarget(vTmp,4.0+fAdd))then
				if(CanFollow())then
					m_sState="goto_item";
				else
					pxWorker^.UpdateAggressionPos(pxWorker^.GetPos());
					EndTask();
				endif;
				return;
			else
				if(cast<CCharacter>(pxUnit)!=null)then
					pxUnit^.AnimAction("pick_up");
				endif;
			endif;
			m_sState="put_in_inv";
		elseif(m_sState=="put_in_inv")then
			var ^CInventory pxInv=pxWorker^.GetInventory();
			if(pxInv==null)then
				EndTask();
				return;
			endif;
//			var CFourCC xLink = "INVE";
			//pxItem^.LinkAction(pxWorker^.GetHandle(), xLink);
			//pxItem^.SetVisible(false);
			pxWorker^.AddItem(pxItem^.GetHandle());
/*
			var ^CItem pxI = cast<CItem>(pxItem);
			if(pxI != null)then
				pxI^.OnTaken(pxWorker);
			endif;
			var CObjHndl xTrsp = pxWorker^.GetTransportObj();
			if(!xTrsp.IsValid())then
				xTrsp = m_xUnit;
			endif;
			if(xTrsp.IsValid())then
				var ^CTransportObj pxTO = cast<CTransportObj>(xTrsp.GetObj());
				if(pxTO!=null)then
					// HACK to enforce InfoWindow-Update
					var real fO = pxTO^.GetHitpoints();
					if(fO==1.0f)then 
						pxTO^.SetHitpoints(fO+1.0f);
					else
						pxTO^.SetHitpoints(fO-1.0f);
					endif;
					pxTO^.SetHitpoints(fO);
					// ENDHACK
				endif;
				
				var ^CFightingObj pxFO = cast<CFightingObj>(pxUnit);
				if(pxFO!=null)then
					pxFO^.GetBestWeapon(null, true);
				endif;
			endif;
*/
			EndTask();
		endif;
	endproc;
	
	proc void USLOnLeave(^CState p_pxFrom, ^CState p_pxTo)
		super.USLOnLeave(p_pxFrom, p_pxTo);
		var ^CGameObj pxObj = m_xWorker.GetObj();
		if(pxObj!=null)then
			CSrvWrap.SendGenericEvtToPlayer(pxObj^.GetOwner(), "update_inv");
		endif;
	endproc;
	
	export proc bool Break()
		var ^CGameObj pxUnit=m_xUnit.GetObj();
		if(pxUnit!=null)then
			pxUnit^.TerminateAction();
			CSrvWrap.SendGenericEvtToPlayer(pxUnit^.GetOwner(), "update_inv");
		endif;
		return true;
	endproc;

	export proc void Skip()
	endproc;
	
	export proc void EndTask()
		UpdateAggressionPos(m_xWorker);
		super.EndTask();
	endproc;

endclass;
