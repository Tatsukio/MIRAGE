class CHealANML inherit CSpecialActionTask
	
	var CObjHndl m_xActor;
	var string m_sState;
		
	export constructor()
		SetName("HealAnml");
	endconstructor;

	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CHealANML] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var CFourCC xType="HeAN";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,1);
		var ^CArc pxArc=^(pxWalk^.GetArc());
		m_xActor.DoKArc(pxArc^);
		(pxArc^) << m_sState;
		pxWalk^.Close();
		KLog.LogWarn("CArc.Save","[CHealANML] Saving done");
	endproc;

	export proc void Load(^CUOFReaderNode p_pxReaderNode)
		if(p_pxReaderNode^.GetType()=="HeAN")then
			var ^CArc pxArc=^(p_pxReaderNode^.GetArc());
			m_xActor.DoKArc(pxArc^);
			(pxArc^) << m_sState;
		else
			super.Load(p_pxReaderNode);
		endif;
	endproc;

	export proc bool Init(CObjHndl p_xActor, string p_sPath)
		if(!p_xActor.IsValid())then return false; endif;
		SetSpecialActionPath(p_sPath);
		m_xActor = p_xActor;
		return true;
	endproc;

	proc void USLOnEnter(^CState p_pxFrom, ^CState p_pxTo)
		var ^CFightingObj pxFightingObj=cast<CFightingObj>(m_xActor.GetObj());
		if(pxFightingObj==null || !pxFightingObj^.CheckSpecialActionTimer(GetSpecialActionPath()))then
			EndTask();
			return;
		endif;
		m_sState = "do_anim";
	endproc;

	proc void USLOnTick(int p_iTime)
		if(m_xActor.IsValid())then
			var ^CFightingObj pxActor = cast<CFightingObj>(m_xActor.GetObj());
			if(pxActor==null)then
				EndTask();
				return;
			endif;
			if(m_sState == "do_anim") then
				if(!StartSpecialActionTimer(pxActor))then EndTask();return;endif;
				pxActor^.MemorizeCurrentFightState(CObjHndl.Invalid(),false,false);
				SetUnStoppable(true);
				if(pxActor^.IsOnOpenTransporter())then
					pxActor^.SetSLEAnim("heal_0",2,true,true);
				elseif(!pxActor^.GetTransportObj().IsValid())then
					pxActor^.AnimAction("heal_0",1,true,true);
				endif;
				pxActor^.AddFX("fx_hermite_heal",10.0);
				m_sState = "heal";
			elseif(m_sState == "heal") then
				SetUnStoppable(false);
				var real fFactor = 2.0f, fRange = 50.0f;
				var CObjQuery xQ;
				xQ.SetType("ANML", false);
				xQ.SetType("CHTR", true);
				xQ.SetType("SHIP", true);
				xQ.SetType("VHCL", true);
				xQ.SetOwner(pxActor^.GetOwner());
				CSrvWrap.GetDiplomacyMgr().AddMyFriendsToSearch(pxActor^.GetOwner(), xQ);
				xQ.RegionCircle(pxActor^.GetPos(), fRange);
				var CObjList xL;
				xQ.Execute(xL);
				var int i, iC = xL.NumEntries();
				for(i=0) cond(i<iC) iter(++i) do
//					var ^CAnimal pxF = cast<CAnimal>(xL[i].GetObj());
					var ^CFightingObj pxF = cast<CFightingObj>(xL[i].GetObj());
					if(pxF!=null)then
//						pxF^.FullHeal();
						pxF^.HealMe(pxF^.GetMaxHitpoints()/fFactor);
					endif;
				endfor;
				m_sState="EndTask";
				if(!pxActor^.GetTransportObj().IsValid())then
					pxActor^.ReturnToFight();
				endif;
				return;
			elseif(m_sState=="EndTask")then
				EndTask();
				return;
			endif;
		else
			EndTask();
			return;
		endif;
	endproc;

	proc void USLOnLeave(^CState p_pxFrom, ^CState p_pxTo)
		super.USLOnLeave(p_pxFrom, p_pxTo);
		var ^CFightingObj pxActor = cast<CFightingObj>(m_xActor.GetObj());
		if(pxActor!=null)then
			pxActor^.RemoveFX("fx_hermite_heal");
		endif;
	endproc;

	export proc bool Break()
		if(GetUnStoppable())then
			return false;
		endif;
		if (m_xActor.IsValid()) then
			m_xActor.GetObj()^.TerminateAction();
		endif;
		return true;
	endproc;

	export proc void Skip()
	endproc;
	
	proc bool Check()
		var ^CFightingObj pxActor = cast<CFightingObj>(m_xActor.GetObj());
		if(pxActor!=null)then
			return true;
		endif;
		return false;
	endproc;

	export proc void EndTask()
		UpdateAggressionPos(m_xActor);
		super.EndTask();
	endproc;
	
endclass;