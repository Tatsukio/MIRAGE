class CPlaceWaterMine inherit CTask

	var CObjHndl m_xObj;
	var string m_sState;
	var vec3 m_vDest;
	var bool m_bAIHelp;
	
	export const real fMINDISTANCE = 8.0f;
	
	export constructor()
		SetName("WateMine");
		SetCivil(false);
		m_bAIHelp=false;
	endconstructor;
	
	destructor()
		ClearGhost();
	enddestructor;
	
	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CPlaceWaterMine] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var CFourCC xType="WaMi";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,2);
		var ^CArc pxArc=^(pxWalk^.GetArc());
		m_xObj.DoKArc(pxArc^);
		(pxArc^) << m_vDest;
		(pxArc^) << m_sState;
		(pxArc^) << m_bAIHelp;
		pxWalk^.Close();
	endproc;

	export proc void Load(^CUOFReaderNode p_pxReaderNode)
		if(p_pxReaderNode^.GetType()=="WaMi")then
			var ^CArc pxArc=^(p_pxReaderNode^.GetArc());
			m_xObj.DoKArc(pxArc^);
			(pxArc^) << m_vDest;
			(pxArc^) << m_sState;
			if(p_pxReaderNode^.GetVersion()>=2)then
				(pxArc^) << m_bAIHelp;
			endif;
		else
			super.Load(p_pxReaderNode);
		endif;
	endproc;
	
	export proc bool Init(CObjHndl p_xObj, vec3 p_vDest, bool p_bAIHelp)
		m_xObj = p_xObj;
		m_vDest = p_vDest;
		m_bAIHelp = p_bAIHelp;
		if(!m_xObj.IsValid() || m_vDest=={0.0,0.0,0.0} || CSrvWrap.GetScapeMgr().GetHeight(m_vDest.GetX(),m_vDest.GetY())>CSrvWrap.GetScapeMgr().GetSeaLevel())then
			m_sState="end_task";
			return false;
		endif;
		AddGhost();
		m_sState="goto";
		return true;
	endproc;

	proc void USLOnEnter(^CState p_pxFrom, ^CState p_pxTo)
		if(m_sState=="end_task")then
			EndTask();
			return;
		endif;
	endproc;

	proc void USLOnTick(int p_iTime)
		var ^CFightingObj pxActor = cast<CFightingObj>(m_xObj.GetObj());
		if (pxActor == null || m_sState=="end_task")then
			EndTask();
			return;
		endif;
		if(m_sState == "goto")then
			//test if there is already a mine or a turret
			var CObjList xL;
			var CObjQuery xQ;
			xQ.RegionCircle(m_vDest,CPlaceWaterMine.fMINDISTANCE);
			xQ.SetClass("ninigi_mineship_mine",false);
			if(!m_bAIHelp)then
				xQ.SetClass("ninigi_water_turret",true);
			endif;
			xQ.Execute(xL);
			if(xL.NumEntries()>0)then
				m_sState = "produce_mine";
				return;
			endif;
			var vec3 vDir = (m_vDest - pxActor^.GetPos()).GetNormalized();
			pxActor^.WalkAction(m_vDest+vDir*pxActor^.GetRadius(), pxActor^.GetMaxSpeed());
			m_sState = "rotate";
		elseif(m_sState == "rotate") then
			var vec3 vDir = (m_vDest - pxActor^.GetPos()).GetNormalized();
			var Quat qR; qR.FromXYDir(-vDir.GetX(), -vDir.GetY());
			pxActor^.RotateAction(qR);
			m_sState = "place_mine";
		elseif(m_sState == "place_mine") then
			//test if there is already a mine or a turret
			var CObjList xL;
			var CObjQuery xQ;
			xQ.RegionCircle(m_vDest,CPlaceWaterMine.fMINDISTANCE);
			xQ.SetClass("ninigi_mineship_mine",false);
			if(!m_bAIHelp)then
				xQ.SetClass("ninigi_water_turret",true);
			endif;
			xQ.Execute(xL);
			if(xL.NumEntries()>0)then
				m_sState = "produce_mine";
				return;
			endif;
			//var ^CWaterMine pxMine = cast<CWaterMine>(CSrvWrap.GetObjMgr()^.CreateObj("ninigi_mineship_mine", pxActor^.GetOwner(), m_vDest));
			var ^CVirtualProduceUnit pxUnit = cast<CVirtualProduceUnit>(pxActor^.GetProduceUnit().GetObj());
			if(pxUnit!=null)then
				pxUnit^.HandleGamePlayCommand("Action", null, m_vDest, "Actions/Ninigi/Build/SHIP/ninigi_mineship_mine");
			endif;
			m_sState = "produce_mine";
		elseif(m_sState == "produce_mine")then
			var ^CVirtualProduceUnit pxUnit = cast<CVirtualProduceUnit>(pxActor^.GetProduceUnit().GetObj());
			if(pxUnit!=null && pxUnit^.GetCurTaskName()=="Action")then
			else
				pxActor^.UpdateAggressionPos(pxActor^.GetPos());
				m_sState = "end_task";
				EndTask();
			endif;
		endif;
	endproc;

	proc void USLOnLeave(^CState p_pxFrom, ^CState p_pxTo)
		super.USLOnLeave(p_pxFrom, p_pxTo);
	endproc;

	export proc bool Break()
		ClearGhost();
		EndTask();
		return true;
	endproc;

	export proc void Skip()
		ClearGhost();
		EndTask();
	endproc;
	
	export proc void EndTask()
		ClearGhost();
		super.EndTask();
	endproc;
	
	proc void AddGhost()
		if(!m_xObj.IsValid())then return; endif;
		var ^CGameObj pxObj = m_xObj.GetObj();
		var ^CAttribs pxAttr = pxObj^.GetAttribs();
		if(pxAttr!=null)then
			var string sTargets = pxAttr^.GetValue("MineTargets");
			pxAttr^.SetValue("MineTargets",AddPos(sTargets,m_vDest));
		endif;
	endproc;

	proc void ClearGhost()
		if(!m_xObj.IsValid())then return; endif;
		var ^CGameObj pxObj = m_xObj.GetObj();
		if(pxObj==null)then return; endif;
		var ^CAttribs pxAttr = pxObj^.GetAttribs();
		if(pxAttr!=null)then
			var string sTargets = pxAttr^.GetValue("MineTargets");
			pxAttr^.SetValue("MineTargets",RemPos(sTargets,m_vDest));
		endif;
	endproc;

	static proc string RemPos(string p_sTargets, vec3 p_vPos)
		var string sTargets = p_sTargets;
//		if(sTargets.Find(p_vPos.ToString()+"|")!=-1)then
			sTargets.Replace(p_vPos.ToString()+"|","");
//		endif;
		return sTargets;
	endproc;
	
	static proc string AddPos(string p_sTargets, vec3 p_vPos)
		return (p_sTargets+p_vPos.ToString()+"|");
	endproc;

endclass;

class CPlaceWaterTurret inherit CTask

	var CObjHndl m_xObj;
	var string m_sState;
	var vec3 m_vDest;
	var bool m_bAIHelp;

	export constructor()
		SetName("WateTurr");
		SetCivil(false);
		m_bAIHelp=false;
	endconstructor;
	
	destructor()
		ClearGhost();
	enddestructor;
	
	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CPlaceWaterTurret] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var CFourCC xType="WaTu";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,2);
		var ^CArc pxArc=^(pxWalk^.GetArc());
		m_xObj.DoKArc(pxArc^);
		(pxArc^) << m_vDest;
		(pxArc^) << m_sState;
		(pxArc^) << m_bAIHelp;
		pxWalk^.Close();
	endproc;

	export proc void Load(^CUOFReaderNode p_pxReaderNode)
		if(p_pxReaderNode^.GetType()=="WaTu")then
			var ^CArc pxArc=^(p_pxReaderNode^.GetArc());
			m_xObj.DoKArc(pxArc^);
			(pxArc^) << m_vDest;
			(pxArc^) << m_sState;
			if(p_pxReaderNode^.GetVersion()>=2)then
				(pxArc^) << m_bAIHelp;
			endif;
		else
			super.Load(p_pxReaderNode);
		endif;
	endproc;

	export proc bool Init(CObjHndl p_xObj, vec3 p_vDest, bool p_bAIHelp)
		m_xObj = p_xObj;
		m_vDest = p_vDest;
		m_bAIHelp = p_bAIHelp;
		if(!m_xObj.IsValid() || m_vDest=={0.0,0.0,0.0} || CSrvWrap.GetScapeMgr().GetHeight(m_vDest.GetX(),m_vDest.GetY())>CSrvWrap.GetScapeMgr().GetSeaLevel())then
			m_sState="end_task";
			return false;
		endif;
		AddGhost();
		m_sState="goto";
		return true;
	endproc;

	proc void USLOnEnter(^CState p_pxFrom, ^CState p_pxTo)
		if(m_sState=="end_task") then EndTask(); return; endif;
	endproc;

	proc void USLOnTick(int p_iTime)
		var ^CFightingObj pxActor = cast<CFightingObj>(m_xObj.GetObj());
		if(pxActor == null || m_sState=="end_task")then
			EndTask();
			return;
		endif;
		if(m_sState == "goto")then
			//test if there is already a mine or a turret
			var CObjList xL;
			var CObjQuery xQ;
			xQ.RegionCircle(m_vDest,CPlaceWaterMine.fMINDISTANCE);
			xQ.SetClass("ninigi_water_turret",false);
			if(!m_bAIHelp)then
				xQ.SetClass("ninigi_mineship_mine",true);
			endif;
			xQ.Execute(xL);
			if(xL.NumEntries()>0)then
				m_sState = "produce_mine";
				return;
			endif;
			var vec3 vDir = (m_vDest - pxActor^.GetPos()).GetNormalized();
			pxActor^.WalkAction(m_vDest+vDir*pxActor^.GetRadius(), pxActor^.GetMaxSpeed());
			m_sState = "rotate";
		elseif(m_sState == "rotate") then
			var vec3 vDir = (m_vDest - pxActor^.GetPos()).GetNormalized();
			var Quat qR; qR.FromXYDir(-vDir.GetX(), -vDir.GetY());
			pxActor^.RotateAction(qR);
			m_sState = "place_mine";
		elseif(m_sState == "place_mine") then
			//test if there is already a mine or a turret
			var CObjList xL;
			var CObjQuery xQ;
			xQ.RegionCircle(m_vDest,CPlaceWaterMine.fMINDISTANCE);
			xQ.SetClass("ninigi_water_turret",false);
			if(!m_bAIHelp)then
				xQ.SetClass("ninigi_mineship_mine",true);
			endif;
			xQ.Execute(xL);
			if(xL.NumEntries()>0)then
				m_sState = "produce_mine";
				return;
			endif;
			var ^CVirtualProduceUnit pxUnit = cast<CVirtualProduceUnit>(pxActor^.GetProduceUnit().GetObj());
			if(pxUnit!=null)then
				pxUnit^.HandleGamePlayCommand("Action", null, m_vDest, "Actions/Ninigi/Build/SHIP/ninigi_water_turret");
			endif;
			m_sState = "produce_mine";
		elseif(m_sState == "produce_mine")then
			var ^CVirtualProduceUnit pxUnit = cast<CVirtualProduceUnit>(pxActor^.GetProduceUnit().GetObj());
			if(pxUnit!=null && pxUnit^.GetCurTaskName()=="Action")then
			else
				pxActor^.UpdateAggressionPos(pxActor^.GetPos());
				m_sState = "end_task";
				EndTask();
			endif;
		endif;
	endproc;

	proc void USLOnLeave(^CState p_pxFrom, ^CState p_pxTo)
		super.USLOnLeave(p_pxFrom, p_pxTo);
	endproc;

	export proc bool Break()
		ClearGhost();
		EndTask();
		return true;
	endproc;

	export proc void Skip()
		ClearGhost();
		EndTask();
	endproc;
	
	export proc void EndTask()
		ClearGhost();
		super.EndTask();
	endproc;
	
	proc void AddGhost()
		if(!m_xObj.IsValid())then return; endif;
		var ^CGameObj pxObj = m_xObj.GetObj();
		var ^CAttribs pxAttr = pxObj^.GetAttribs();
		if(pxAttr!=null)then
			var string sTargets = pxAttr^.GetValue("WaterTurretTargets");
			pxAttr^.SetValue("WaterTurretTargets",AddPos(sTargets,m_vDest));
		endif;
	endproc;

	proc void ClearGhost()
		if(!m_xObj.IsValid())then return; endif;
		var ^CGameObj pxObj = m_xObj.GetObj();
		var ^CAttribs pxAttr = pxObj^.GetAttribs();
		if(pxAttr!=null)then
			var string sTargets = pxAttr^.GetValue("WaterTurretTargets");
			pxAttr^.SetValue("WaterTurretTargets",RemPos(sTargets,m_vDest));
		endif;
	endproc;

	static proc string RemPos(string p_sTargets, vec3 p_vPos)
		var string sTargets = p_sTargets;
		sTargets.Replace(p_vPos.ToString()+"|","");
		return sTargets;
	endproc;
	
	static proc string AddPos(string p_sTargets, vec3 p_vPos)
		return (p_sTargets+p_vPos.ToString()+"|");
	endproc;

endclass;