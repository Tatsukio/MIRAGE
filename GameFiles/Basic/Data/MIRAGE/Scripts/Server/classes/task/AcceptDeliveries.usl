class CAcceptDeliveries inherit CTask

	var CObjHndl	m_xActor;
	var int				m_iDropCount;
	var string		m_sState;
	var bool			m_bCheck;

	export constructor()
		SetName("AcceptDe");
		m_iDropCount = 0;
		m_bCheck = false;
	endconstructor;
	
	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CAcceptDeliveries] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var CFourCC xType="AcDe";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,1);
		var ^CArc pxArc=^(pxWalk^.GetArc());
		m_xActor.DoKArc(pxArc^);
		(pxArc^) << m_iDropCount;
		(pxArc^) << m_sState;
		(pxArc^) << m_bCheck;
		pxWalk^.Close();
		KLog.LogWarn("CArc.Save","[CAcceptDeliveries] Saving done");
	endproc;

	export proc void Load(^CUOFReaderNode p_pxReaderNode)
		if(p_pxReaderNode^.GetType()=="AcDe")then
			var ^CArc pxArc=^(p_pxReaderNode^.GetArc());
			m_xActor.DoKArc(pxArc^);
			(pxArc^) << m_iDropCount;
			(pxArc^) << m_sState;
			(pxArc^) << m_bCheck;
		else
			super.Load(p_pxReaderNode);
		endif;
	endproc;
	
	export proc bool Init(CObjHndl p_xActor)
		m_sState = "EndTask";
		if(!p_xActor.IsValid())then
			return false;
		endif;
		m_sState = "startanim";
		m_xActor = p_xActor;
		return true;
	endproc;

	proc void USLOnEnter(^CState p_pxFrom, ^CState p_pxTo)
		if(m_sState=="EndTask")then
			EndTask();
			return;
		endif;
	endproc;

	proc void USLOnTick(int p_iTime)
		var ^CGameObj pxActor = m_xActor.GetObj();
		if(pxActor==null)then
			EndTask();
			return;
		endif;
		m_bCheck = true;
		if(m_sState=="startanim")then
			pxActor^.AnimAction("deliver",m_iDropCount+1,true,true);
			m_sState = "continueanim";
		elseif(m_sState=="continueanim")then
			//pxActor^.AnimAction("deliver",1,false,false);
			if(m_iDropCount>0)then
				m_iDropCount--;
			else
				m_sState = "endanim";
			endif;
		elseif(m_sState=="endanim")then
			//pxActor^.AnimAction("deliver",1,false,true);
			m_sState = "EndTask";
		elseif(m_sState=="EndTask")then
			EndTask();
			return;
		endif;
	endproc;

	export proc void AddAnimLoop()
		if(m_iDropCount<5)then
			m_iDropCount++;
			if(m_bCheck)then
				if(m_sState=="EndTask")then
					m_sState = "startanim";
				else
					m_sState = "continueanim";
				endif;
				m_bCheck = false;
			endif;
		endif;
	endproc;

	proc void USLOnLeave(^CState p_pxFrom, ^CState p_pxTo)
		super.USLOnLeave(p_pxFrom, p_pxTo);
		return;
	endproc;

	export proc bool Break()
		return true;
	endproc;
	
endclass;
