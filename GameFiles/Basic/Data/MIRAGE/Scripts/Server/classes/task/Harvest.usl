class CGenericHarvest inherit CTargetTask
	var CObjHndl 		m_xWorker;			///< worker harvesting
	var CObjHndl		m_xCurDelivery;		///< current delivery station
	var CObjHndl		m_xHarvestSite;
	var CGameTime		m_xLastTick;
	var array string 	m_asResources;
	var array real	 	m_afMineVal;
	var vec3			m_vCurTarget;
	var vec3			m_vCurDelivery;
	var string 			m_sState;
	var int				m_iWalkFailCnt;
	var real			m_fProgressStep;
	var string			m_sWeapon;
	var string			m_sThing;
	var CFourCC			m_xThingLink;
	var string			m_sWaitAnim;
	
	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CGenericHarvest] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var CFourCC xType="GeHa";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,2);
		var ^CArc pxArc=^(pxWalk^.GetArc());
		m_xWorker.DoKArc(pxArc^);
		m_xCurDelivery.DoKArc(pxArc^);
		m_xHarvestSite.DoKArc(pxArc^);
		m_xLastTick.DoKArc(pxArc^);
		var int i,iNumRes=m_asResources.NumEntries();
		(pxArc^) << iNumRes;
		for(i=0) cond(i<iNumRes) iter(i++)do
			(pxArc^) << m_asResources[i];
		endfor;
		var int iNumMV=m_afMineVal.NumEntries();
		(pxArc^) << iNumMV;
		for(i=0) cond(i<iNumMV) iter(i++)do
			(pxArc^) << m_afMineVal[i];
		endfor;
		(pxArc^) << m_vCurTarget;
		(pxArc^) << m_vCurDelivery;
		(pxArc^) << m_sState;
		(pxArc^) << m_iWalkFailCnt;
		(pxArc^) << m_fProgressStep;
		pxWalk^.Close();
	endproc;

	export proc void Load(^CUOFReaderNode p_pxReaderNode)
		if(p_pxReaderNode^.GetType()=="GeHa")then
			var ^CArc pxArc=^(p_pxReaderNode^.GetArc());
			m_xWorker.DoKArc(pxArc^);
			m_xCurDelivery.DoKArc(pxArc^);
			m_xHarvestSite.DoKArc(pxArc^);
			m_xLastTick.DoKArc(pxArc^);
			var int i,iNumRes;
			(pxArc^) << iNumRes;
			m_asResources=iNumRes;
			for(i=0) cond(i<iNumRes) iter(i++)do
				(pxArc^) << m_asResources[i];
			endfor;
			var int iNumMV;
			(pxArc^) << iNumMV;
			m_afMineVal=iNumMV;
			for(i=0) cond(i<iNumMV) iter(i++)do
				(pxArc^) << m_afMineVal[i];
			endfor;
			(pxArc^) << m_vCurTarget;
			(pxArc^) << m_vCurDelivery;
			(pxArc^) << m_sState;
			(pxArc^) << m_iWalkFailCnt;
			(pxArc^) << m_fProgressStep;
			var ^CFightingObj pxWorker = cast<CFightingObj>(m_xWorker.GetObj());
			if(pxWorker!=null)then
				if(pxWorker^.GetClassName().Find("arry_s0")!=-1)then
					m_sThing = "aje_clay_jug";
					m_xThingLink = "HndR";
					m_sWaitAnim = "standing";
				else
					m_sWeapon = pxWorker^.GetClassName().Left(pxWorker^.GetClassName().Find("_"))+"_axe";
					SetThing(pxWorker^.GetTribeName());
				endif;
			endif;
			//KLog.LogWarn("CHP","GeHa");
		else
			super.Load(p_pxReaderNode);
		endif;
	endproc;
	
	export proc void SetThing(string p_sTribe)
		if(p_sTribe=="Hu")then
			m_sThing = "hu_pannier";
			m_xThingLink = "Back";
			m_sWaitAnim = "standing";
		elseif(p_sTribe=="Aje")then
			m_sThing = "aje_clay_jug";
			m_xThingLink = "HndR";
			m_sWaitAnim = "standing";
		elseif(p_sTribe=="Ninigi")then
			m_sThing = "ninigi_basket";
			m_xThingLink = "HndR";
			m_sWaitAnim = "standing";
		elseif(p_sTribe=="SEAS")then
			m_sThing = "seas_backpack";
			m_xThingLink = "Back";
			m_sWaitAnim = "standing";
		endif;
	endproc;
	
	proc void SetWaitAnim()
		//wait in proper stand
		var ^CGameObj pxObj=m_xWorker.GetObj();
		if(pxObj!=null && pxObj^.HasAnim(m_sWaitAnim) && pxObj^.GetCurrentAnimName()!=m_sWaitAnim)then
			pxObj^.SetAnim(m_sWaitAnim,3);
		endif;
	endproc;
	
	/// return value specifies if idleanim should be set
	export proc bool OnActionEnd(bool p_bBroken)
		if(p_bBroken)then
			ResetCounter();
		endif;
		if(m_sState=="drop_trees")then
			SetWaitAnim();
		endif;
		return false;
	endproc;
	
	proc CObjHndl Convert2ObjTree(ref CForestSrvMgr.CTree po_rxForTree)
		CSrvWrap.GetForestMgr().Refresh(po_rxForTree);
		var CObjHndl xRet;
		if(!po_rxForTree.IsValid())then return xRet; endif; //invalid
		var int iTreeType=CSrvWrap.GetForestMgr().GetTreeType(po_rxForTree);
		if(iTreeType==-1)then return xRet; endif; //is already objtree
		var vec3 vTreePos;
		if(CSrvWrap.GetForestMgr().GetTreePos(po_rxForTree, vTreePos)==true)then
			m_vCurTarget=vTreePos;
		endif;
		var string sSetting=CSrvWrap.GetCurLevel()^.GetLevelInfo().GetAttribs().GetValue("Setting");
		if(sSetting=="Cave1")then
			sSetting="Savanna";
		elseif(sSetting=="Cave2")then
			sSetting="Ashvalley";
		elseif(sSetting=="Cave3")then
			sSetting="Oasis";
		endif;
		var string sTree=sSetting+"_Tree_0"+(iTreeType+1).ToString();
		xRet=CSrvWrap.GetForestMgr().ConvertTree(po_rxForTree,sTree);
		//KLog.LogError("CHP","Convert2ObjTree "+po_rxForTree.GetObjHandle().AsInt().ToString()+" "+(po_rxForTree.GetObjHandle().GetObj()!=null).ToString());
		return xRet;
	endproc;

	export proc void EndTask()
		UpdateAggressionPos(m_xWorker);
		super.EndTask();
	endproc;

endclass;

class CHarvest inherit CGenericHarvest
	var CObjHndl	m_xCurLog;
	var CObjHndl	m_xCurTree;
	var CForestSrvMgr.CTree m_xForTree;

	var vec3		m_vJobPos;			///< wood on this pos
	var real 		m_fDelivRadius;
	var bool		m_bFirstHit;
	var bool		m_bLastHit;
	var bool 		m_bWalkAction;			// true, if a WalkAction was started, its not a must to use it everytime
	var vec3		m_vLastImportantPos;	// valid if m_bWalkAction is true
	var vec3 		m_vCurLogPos;
	var vec3 		m_vCurDeliverPos;

	var CObjQuery	m_xWoodLogSearch;
	var CObjQuery	m_xTreeSearch;
	var CObjQuery	m_xDeliverSearch;
	var CFourCC 	m_xFCCWeaponLink;
	var array vec3	m_avOldInvalidJobPos;
	var bool		m_bAllJobPosInvalid;
	var CObjList	m_xInvalidDeliveries;
	var bool		m_bAllDeliveriesInvalid;
	const int 		MAX_INVALID_TARGETS = 10;
	
	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CHarvest] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var CFourCC xType="Harv";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,1);
		var ^CArc pxArc=^(pxWalk^.GetArc());
		m_xCurLog.DoKArc(pxArc^);
		m_xCurTree.DoKArc(pxArc^);
		m_xForTree.DoKArc(pxArc^);
		(pxArc^) << m_vJobPos;
		(pxArc^) << m_fDelivRadius;
		(pxArc^) << m_bFirstHit;
		(pxArc^) << m_bLastHit;
		(pxArc^) << m_bWalkAction;
		(pxArc^) << m_vLastImportantPos;
		(pxArc^) << m_vCurLogPos;
		(pxArc^) << m_vCurDeliverPos;
		pxWalk^.Close();
	endproc;

	export proc void Load(^CUOFReaderNode p_pxReaderNode)
		if(p_pxReaderNode^.GetType()=="Harv")then
			var ^CArc pxArc=^(p_pxReaderNode^.GetArc());
			m_xCurLog.DoKArc(pxArc^);
			m_xCurTree.DoKArc(pxArc^);
			m_xForTree.DoKArc(pxArc^);
			(pxArc^) << m_vJobPos;
			(pxArc^) << m_fDelivRadius;
			(pxArc^) << m_bFirstHit;
			(pxArc^) << m_bLastHit;
			(pxArc^) << m_bWalkAction;
			(pxArc^) << m_vLastImportantPos;
			(pxArc^) << m_vCurLogPos;
			(pxArc^) << m_vCurDeliverPos;
			m_xFCCWeaponLink="HndR";
			InitSearch();
			//KLog.LogWarn("CHP","Harv");
		else
			super.Load(p_pxReaderNode);
		endif;
	endproc;

	export proc void SetThing(string p_sTribe)
		m_sWaitAnim = "shoulder_standanim";
	endproc;
	
	proc CObjHndl CreateObjTree(ref CForestSrvMgr.CTree po_rxForTree)
		CSrvWrap.GetForestMgr().Refresh( po_rxForTree );
		if ( po_rxForTree.IsValid() ) then
			var CObjHndl xTree;
			var CObjHndl xInvalid;
			var real fTreeRotZ=CSrvWrap.GetForestMgr().GetTreeRotZ(po_rxForTree);
			var string sSetting=CSrvWrap.GetCurLevel()^.GetLevelInfo().GetAttribs().GetValue("Setting");
			if(sSetting=="Cave1")then
				sSetting="Savanna";
			elseif(sSetting=="Cave2")then
				sSetting="Ashvalley";
			elseif(sSetting=="Cave3")then
				sSetting="Oasis";
			endif;
			var vec3 vTreePos;
			if(CSrvWrap.GetForestMgr().GetTreePos(po_rxForTree, vTreePos)==true)then
				m_vCurTarget = vTreePos;
				var int iTreeType = CSrvWrap.GetForestMgr().GetTreeType(po_rxForTree);
				if ( iTreeType != -1 ) then
					var ^CGameObj pxObj=CSrvWrap.GetObjMgr()^.CreateObj(sSetting+"_Tree_0"+(iTreeType+1).ToString()+"_Timber",(-1),m_vCurTarget);
					xTree=pxObj^.GetHandle();
					pxObj^.SetRot(Quat.RotationZ(fTreeRotZ));
					//CSrvWrap.LogSpam("Harvest","Setting:  "+sSetting+"_Tree_0"+(iTreeType+1).ToString()+"_Timber");
				else
					if ( po_rxForTree.IsValid() ) then
						var ^CGameObj pxObj = po_rxForTree.GetObjHandle().GetObj();
						pxObj^.SetRot(Quat.RotationZ(fTreeRotZ));
						var string sName = pxObj^.GetClassName();
						//CSrvWrap.LogSpam("Harvest","Timber:  "+sName);
						var ^CGameObj pxTemp=CSrvWrap.GetObjMgr()^.CreateObj(sName+"_Timber",(-1),m_vCurTarget);
						if(pxTemp!=null)then
							xTree=pxTemp^.GetHandle();
							pxTemp^.SetRot(Quat.RotationZ(fTreeRotZ));
						else
							CSrvWrap.LogWarning( "Harvest", "Somthing got really messed up here." );
							return(xInvalid);
						endif;
						if(!po_rxForTree.IsConvertedFromFake()) then
							//KLog.LogError("CHP","create Stump");
							//if tree is converted, trunk exists already as "fake-trunk"
							var ^CGameObj pxTrunk;
							pxTrunk=CSrvWrap.GetObjMgr()^.CreateObj(sName+"_Stump",(-1),m_vCurTarget);
							if(pxTrunk!=null)then
								pxTrunk^.SetRot(Quat.RotationZ(fTreeRotZ));
							else
								CSrvWrap.LogWarning( "Harvest", "Somthing got really messed up here." );
								return(xInvalid);
							endif;
						endif;
					else
						//L CSrvWrap.LogSpam( "Harvest", "CreateObjTree .. po_rxForTree is not valid!!!" );
					endif;
				endif;
				// delete all old invalid treepos of the last jobsearch
				m_avOldInvalidJobPos=0;
				CSrvWrap.GetForestMgr().ChopTree(po_rxForTree);
			else
				//L CSrvWrap.LogSpam( "Harvest","CreateObjTree - GetTreePos false" );
				m_sState="search_for_jobs";
			endif;
			return xTree;
		else
			var CObjHndl xInvalidObj;
			return xInvalidObj;
		endif;
	endproc;

	export proc bool Init(CObjHndl p_xWorker,vec3 p_vPos)
		if(!p_xWorker.IsValid())then
			return false;
		endif;
		//L CSrvWrap.LogSpam( "Harvest","Init Worker "+p_xWorker.AsInt().ToString() );
		SetName("Harvest");
		m_xWorker=p_xWorker;
		var ^CFightingObj pxWorker = cast<CFightingObj>(m_xWorker.GetObj());
		if(pxWorker==null || p_vPos=={0.0,0.0,0.0})then return false; endif;
		pxWorker^.AnnounceState("harvest");
		var ^CAttribs pxAttr = pxWorker^.GetAttribs();
		if(pxAttr!=null)then
			pxAttr^.SetValue("CurTask",GetName());
		endif;
		if(pxWorker^.GetClassName().Find("arry_s0")!=-1)then
			m_sWeapon = "hu_axe";
		else
			m_sWeapon = pxWorker^.GetClassName().Left(pxWorker^.GetClassName().Find("_"))+"_axe";
		endif;
		m_xFCCWeaponLink="HndR";
		m_vJobPos=p_vPos;
		m_vCurTarget = p_vPos;
		InitSearch();
		if(pxWorker^.GetClassName().Find("arry_s0")!=-1)then
			m_sThing = "aje_clay_jug";
			m_xThingLink = "HndR";
			m_sWaitAnim = "standing";
		else
			SetThing(pxWorker^.GetTribeName());
		endif;
		var bool bNewTree = false;
		var CForestSrvMgr.CTree xForTree;
		bNewTree = CSrvWrap.GetForestMgr().FindHarvestTree( xForTree, pxWorker^.GetPos(), m_vCurTarget );
		if(xForTree.IsValid())then
			if ( bNewTree == true ) then
				CSrvWrap.GetForestMgr().SetHitPoints(xForTree, CSrvWrap.GetForestMgr().GetMaxHPFakeTrees() ); // 6 hits to chop a tree
			endif;
			m_xForTree = xForTree;
			m_sState = "goto_chop_forest";
		else
			m_sState = "search_for_jobs";
		endif;
		var ^CLevel pxLevel=CSrvWrap.GetCurLevel();
		if(pxLevel!=null)then
			var ^CPlayer pxPlayer = pxLevel^.GetPlayer(pxWorker^.GetOwner());
			var ^CPropDB pxRes;
			var ^CPropDB.CNode pxResTable;
			if(pxPlayer!=null)then
				//If Player exists, take its DB
				var ^CBasePlayer pxBasePlayer = cast<CBasePlayer>(pxPlayer);
				pxRes = pxBasePlayer^.GetResourceTable();
			endif;
			if(pxRes!=null)then
				pxResTable = pxRes^.GetRoot().Get("WOOD");
			endif;
			//get all available resources for this tribe
			m_asResources=0;
			var int i;
			if(pxResTable!=null)then
				for(i=0)cond(i<pxResTable^.NumSubs())iter(i++)do
					m_asResources.AddEntry((pxResTable^)[i].Name());
				endfor;
			endif;
			m_afMineVal=m_asResources.NumEntries();
		endif;
		return true;
	endproc;

	export proc bool Init(CObjHndl p_xWorker, CObjHndl p_xTarget)
		if(!p_xWorker.IsValid()||!p_xTarget.IsValid())then
			return false;
		endif;
		// CSrvWrap.LogSpam( "Harvest", "WRONG INIT" );
		SetName("Harvest");
		m_xWorker=p_xWorker;
		var ^CFightingObj pxWorker = cast<CFightingObj>(m_xWorker.GetObj());
		var ^CGameObj pxTarget = p_xTarget.GetObj();
		if(pxWorker==null || pxTarget==null )then return false; endif;
		if(pxWorker^.GetClassName().Find("arry_s0")!=-1)then
			m_sWeapon = "hu_axe";
		else
			m_sWeapon = pxWorker^.GetClassName().Left(pxWorker^.GetClassName().Find("_"))+"_axe";
		endif;
		m_xFCCWeaponLink="HndR";
		m_vCurTarget = pxTarget^.GetPos();
		if(pxTarget^.GetType()=="WOOD")then
			m_xCurLog = p_xTarget;
			m_vJobPos = pxTarget^.GetPos();
			m_sState = "goto_harvest";
		elseif(pxTarget^.GetType()=="TREE")then
			// CSrvWrap.LogSpam( "Harvest","Init:: TREE case" );
			m_xCurTree = p_xTarget;
			m_vJobPos = pxTarget^.GetPos();
			m_sState = "goto_chop";
		else
			//L CSrvWrap.LogSpam( "Harvest","exit 1" );
			m_sState = "exit";
			return false;
		endif;
		InitSearch();
		if(pxWorker^.GetClassName().Find("arry_s0")!=-1)then
			m_sThing = "aje_clay_jug";
			m_xThingLink = "HndR";
			m_sWaitAnim = "standing";
		else
			SetThing(pxWorker^.GetTribeName());
		endif;
		return true;
	endproc;

	proc void InitSearch()
		var ^CFightingObj pxWorker = cast<CFightingObj>(m_xWorker.GetObj());
		if(pxWorker==null)then return; endif;
		m_xWoodLogSearch.SetType("WOOD");
		m_xTreeSearch.SetType("TREE");
		m_xDeliverSearch.SetOwner(pxWorker^.GetOwner());
		m_xDeliverSearch.SetAttribsNeg("CurTask","BuildUpB");
		m_xDeliverSearch.SetAttribsNeg("ReadyForWork",0);
		m_xDeliverSearch.SetAttribsPos("woodDelivery",true);
		var CObjList xL;
		if(m_xDeliverSearch.Execute(xL))then
			xL.SortDistance(m_vCurTarget);
			var int i;
			for(i=0)cond(i<xL.NumEntries())iter(i++)do
				if(xL[i].IsValid()&&(i==xL.NumEntries()-1||pxWorker^.CheckMaxAutoprodDist(xL[i])))then
					m_vCurDelivery = xL[i].GetObj()^.GetPos();
					break;
				endif;
			endfor;
		endif;
	endproc;

	// Proc USLOnEnter ======================================================
	proc void USLOnEnter(^CState p_pxFrom, ^CState p_pxTo)
		var ^CFightingObj pxWorker = cast<CFightingObj>(m_xWorker.GetObj());
		if (pxWorker==null) then
			//L CSrvWrap.LogSpam( "Harvest","USLOnEnter No Worker -> EndTask" );
			EndTask();
			return;
		endif;
		var ^CLevel pxLevel=CSrvWrap.GetCurLevel();
		if(pxLevel!=null)then
			var ^CPlayer pxPlayer = pxLevel^.GetPlayer(pxWorker^.GetOwner());
			var ^CPropDB pxRes;
			var ^CPropDB.CNode pxResTable;
			if(pxPlayer!=null)then
				//If Player exists, take its DB
				var ^CBasePlayer pxBasePlayer = cast<CBasePlayer>(pxPlayer);
				pxRes = pxBasePlayer^.GetResourceTable();
			endif;
			if(pxRes!=null)then
				pxResTable = pxRes^.GetRoot().Get("WOOD");
			endif;
			//get all available resources for this tribe
			m_asResources=0;
			var int i;
			if(pxResTable!=null)then
				for(i=0)cond(i<pxResTable^.NumSubs())iter(i++)do
					m_asResources.AddEntry((pxResTable^)[i].Name());
				endfor;
			endif;
			m_afMineVal=m_asResources.NumEntries();
		endif;
		if (m_sState=="exit") then
			CSrvWrap.LogWarning( "Harvest","USLOnEnter State==Exit -> EndTask" );
			EndTask();
			return;
		endif;
		var ^CCharacter pxChar = cast<CCharacter>(m_xWorker.GetObj());
		if(pxChar==null)then EndTask(); return; endif;
		pxChar^.HideWeapons();
		// RT#8432
		var ^CAttribs pxAttr = pxChar^.GetAttribs();
		if(pxAttr!=null)then
			pxAttr^.SetValue("CurTask",GetName());
		endif;
		if(m_asResources.NumEntries()>0)then
			pxChar^.SetTaskDescription(m_asResources[0]);
		endif;
		SetMaxCounter(1);
	endproc;

	proc bool AddFailedTarget()
		m_avOldInvalidJobPos.AddEntry(m_vCurTarget);
		if (m_avOldInvalidJobPos.NumEntries()>MAX_INVALID_TARGETS) then
			//m_avOldInvalidJobPos.DeleteEntries(0,m_avOldInvalidJobPos.NumEntries()-10);
			return false;
		endif;
		return true;
	endproc;

	proc bool CheckWalkFail(ref vec3 p_rvWorker,string p_sSuccState,string p_sFailState)
		if(m_vLastImportantPos==p_rvWorker)then
			// WalkAction failed
			m_iWalkFailCnt++;
			if(!AddFailedTarget()) then return false; endif;
			if(m_iWalkFailCnt>=15) then
				CSrvWrap.LogWarning("Harvest","Failed 1 - "+m_xWorker.AsInt().ToString());
				m_sState="exit";
				return false;
			endif;
			m_sState=p_sFailState;
			return false;
		else
			// try to get nearer with another WalkAction
			m_bWalkAction=false;
			m_iWalkFailCnt=0;
			m_sState=p_sSuccState;
			return true;
		endif;
	endproc;

	proc bool CheckWalkPos(ref vec3 p_rvPos)
		var int i;
		var int iC=m_avOldInvalidJobPos.NumEntries();
		for (i=0) cond (i<iC) iter (i++)do
			if ((p_rvPos-m_avOldInvalidJobPos[i]).Abs()<3.0f) then
				return false;
			endif;
		endfor;
		return true;
	endproc;

	// Proc USLOnTick =======================================================
	proc void USLOnTick(int p_iTime)
		if(m_bAllDeliveriesInvalid)then
			EndTask();
			return;
		endif;
		var ^CCharacter pxWorker;
		begin CheckWorker;
			if(!m_xWorker.IsValid())then
				EndTask();
				return;
			endif;
			pxWorker=cast<CCharacter>(m_xWorker.GetObj());
			if(pxWorker==null)then
				//L CSrvWrap.LogSpam( "Harvest","USLOnTick WorkerObj==NULL -> EndTask" );
				EndTask();
				return;
			endif;
		end CheckWorker;
		//L CSrvWrap.LogSpam( "Harvest", " State for Worker"+m_xWorker.AsInt().ToString()+"State "+m_sState);
		var int i;
		var bool bResFull = true;
		for(i=0)cond(i<m_asResources.NumEntries())iter(i++)do
			if(!(pxWorker^.ResInvIsFull(m_asResources[i])&&m_sState!="drop_trees"))then
				bResFull = false;
			endif;
		endfor;
		if(bResFull && (m_sState=="goto_harvest" || m_sState=="rotate_to_log" || m_sState=="harvest_log"))then
			m_sState="goto_deliver";
		endif;
		var bool bConvertedFakeTree=false;
		CSrvWrap.GetForestMgr().Refresh(m_xForTree);
		if(m_xForTree.IsObject()&&m_xForTree.GetObjHandle().GetObj()!=null) then
			m_xCurTree=m_xForTree.GetObjHandle(); //forest tree could have benn converted
			bConvertedFakeTree=true;
		endif;
		var ^CTree pxTree;
		begin CheckTree;
			var ^CGameObj pxTmp=m_xCurTree.GetObj();
			if(pxTmp!=null)then
				pxTree=cast<CTree>(pxTmp);
			endif;
		end CheckTree;
		var ^CWood pxLog;
		begin CheckLog;
			var ^CGameObj pxTmp=m_xCurLog.GetObj();
			if(pxTmp!=null)then
				pxLog=cast<CWood>(pxTmp);
			endif;
		end CheckLog;
		var vec3 vPosWorker=pxWorker^.GetPos();
		//L CSrvWrap.LogSpam( "Harvest", "m_sState: "+m_sState );
		if(m_sState=="goto_chop")then
			if(pxTree==null)then
				m_sState="search_for_jobs";
			else
				pxWorker^.HideWeapons();
				pxWorker^.SetLinkGFX(m_xFCCWeaponLink,m_sWeapon);
				CSrvWrap.GetObjMgr()^.GetFreePos(m_vCurTarget,pxWorker,pxTree^.GetPos());
				if(pxWorker^.GetOnWall())then
					pxWorker^.WallWalkAction(m_vCurTarget,true,pxWorker^.GetDefaultSpeed(),false);
				else
					pxWorker^.WalkAction(m_vCurTarget,pxWorker^.GetDefaultSpeed(),true);
				endif;
				SetCurrentTarget(m_vCurTarget);
				m_sState="rotate_to_tree";
			endif;
		elseif(m_sState=="goto_chop_forest")then
			//L CSrvWrap.LogSpam( "Harvest", "Goto_Chop_Forest Worker "+m_xWorker.AsInt().ToString() );
			if(CSrvWrap.GetForestMgr().GetTreePos(m_xForTree, m_vJobPos))then
				pxWorker^.SetLinkGFX(m_xFCCWeaponLink,m_sWeapon);
				CSrvWrap.GetObjMgr()^.GetFreePos(m_vCurTarget,pxWorker,m_vJobPos);
				if(pxWorker^.GetOnWall())then
					pxWorker^.WallWalkAction(m_vCurTarget,true,pxWorker^.GetDefaultSpeed(),false);
				else
					pxWorker^.WalkAction(m_vCurTarget,pxWorker^.GetDefaultSpeed(),true);
				endif;
				SetCurrentTarget(m_vCurTarget);
				m_sState="rotate_to_tree_forest";
			else
				m_vJobPos=pxWorker^.GetPos();
				m_sState="search_for_jobs";
			endif;
		elseif(m_sState=="rotate_to_tree_forest"||m_sState=="rotate_to_tree")then
			//L CSrvWrap.LogSpam( "Harvest", "Rotate_To_Tree_Forest Worker "+m_xWorker.AsInt().ToString() );
			if(!m_xForTree.IsValid()&&pxTree==null)then
				m_sState="search_for_jobs";
				return;
			endif;
			if(!HasArrivedTarget(pxWorker^.GetPos(),8.0))then
				if(!CanFollow())then
					ResetCounter();
					m_sState="search_for_jobs";
					if(!AddFailedTarget())then
						CSrvWrap.SendGenericEvtToPlayer(pxWorker^.GetOwner(), "NoMoreWood");
						EndTask();
						return;
					endif;
				else
					if(m_sState=="rotate_to_tree_forest")then
						m_sState="goto_chop_forest";
					else
						m_sState="goto_chop";
					endif;
					return;
				endif;
			else
				//L CSrvWrap.LogSpam( "Harvest", "Do RotateAction Worker"+m_xWorker.AsInt().ToString() );
				var vec3 vDir=m_vJobPos-pxWorker^.GetPos();
				var Quat qTRot;
				qTRot.FromXYDir(vDir.GetX(),vDir.GetY());
				pxWorker^.RotateAction(qTRot);
				m_bFirstHit=true;
				if(m_sState=="rotate_to_tree_forest") then
					m_sState="chop_tree_forest";
				else
					m_sState="chop_tree";
					m_bFirstHit=true;
				endif;
			endif;
		elseif(m_sState=="chop_tree"||m_sState=="chop_tree_forest")then
			if(pxTree!=null)then	//real tree
				var CGameTime xNow=CTimeMgr.Get().GetTime();
				if(m_bFirstHit) then
					pxWorker^.SetSLEAnim("chop_tree",9999,true,true);
				endif;
				pxWorker^.WaitAction(1.0f);
				if(m_bFirstHit)then
					m_bFirstHit=false;
				endif;
				m_xLastTick=xNow;
				if(!pxTree^.Hit(5.0f)) then
					var CGameEvtPtr xEvt=CGameEvtPtr.CreateEvent("Bash");
					xEvt.SetBool(0,true);
					pxTree^.HandleEvent(xEvt);
				else
					var CGameEvtPtr xEvt=CGameEvtPtr.CreateEvent("Chop");
					pxTree^.HandleEvent(xEvt);
				endif;
			elseif(m_xForTree.IsFakeTree()&&m_xForTree.IsValid())then	//forest tree
				var CGameTime xNow=CTimeMgr.Get().GetTime();
				if(m_bFirstHit) then
					pxWorker^.SetSLEAnim("chop_tree",9999,true,true);
				endif;
				pxWorker^.WaitAction(1.0f);
				if(m_bFirstHit)then
					m_bFirstHit=false;
				endif;
				m_xLastTick=xNow;
				var real fCurHitPoints = CSrvWrap.GetForestMgr().HitTree(m_xForTree, 5.0f );
				if ( fCurHitPoints <= 0.0f ) then
					CreateObjTree(m_xForTree);
				else
					Convert2ObjTree(m_xForTree);
				endif;
			else //invalid
				if(!m_bFirstHit) then
					pxWorker^.AnimActionStopLoop();
				endif;
				m_sState="search_for_jobs";
			endif;
		elseif(m_sState=="search_for_jobs")then
			//L CSrvWrap.LogSpam( "Harvest","Search_For_Jobs Worker "+m_xWorker.AsInt().ToString() );
			begin FindWoodLog;
				m_xWoodLogSearch.RegionCircle(m_vJobPos,64.0f);
				var CObjList xLog;
				if(m_xWoodLogSearch.Execute(xLog))then
					xLog.SortDistance(m_vJobPos);
					var int i;
					for (i=0) cond (i<xLog.NumEntries()) iter(++i)do
						var ^CWood pxWood = cast<CWood>(xLog[i].GetObj());
						if (pxWood!=null) then
							if(CheckWalkPos(pxWood^.GetPos())&&pxWorker^.CheckMaxAutoprodDist(pxWood^.GetPos())) then
								if (pxWood^.AddWorker(pxWorker^.GetHandle())) then
									//L CSrvWrap.LogSpam( "Harvest","Search_For_Jobs Worker -> Found a WOOD"+m_xWorker.AsInt().ToString() );
									m_xCurLog=xLog[i];
									m_sState="goto_harvest";
									return;
								endif;
							endif;
						endif;
					endfor;
				endif;
			end FindWoodLog;
			begin FindForestTree;
				var bool bNewTree=false;
				var CForestSrvMgr.CTree xTree;
				var int iSkip=0;
				var vec3 vTree;
				var bool bTreeFound;
				while(true)do
					var bool bNewTree=CSrvWrap.GetForestMgr().FindNextTreeShortDelivery(xTree,m_vJobPos,m_vCurDelivery,64.0f,iSkip);
					if(!xTree.IsValid()) then break; endif;
					if ( bNewTree == true ) then
						CSrvWrap.GetForestMgr().SetHitPoints(m_xForTree, CSrvWrap.GetForestMgr().GetMaxHPFakeTrees() ); // 6 hits to chop a tree
					endif;
					CSrvWrap.GetForestMgr().GetTreePos( xTree, vTree );
					if(Math.Abs(vTree.GetZ()-vPosWorker.GetZ())>10.0f) then //tree z diff to high
						iSkip++;
						continue;
					else
						if(!CheckWalkPos(vTree)) then
							iSkip++;
							continue;
						endif;
					endif;
					if(!pxWorker^.CheckMaxAutoprodDist(vTree)) then
						iSkip++;
						continue;
					endif;
					bTreeFound=true;
					break;
				endwhile;
				if(bTreeFound) then
					m_xForTree = xTree;
					if ( bNewTree == true ) then
						CSrvWrap.GetForestMgr().SetHitPoints(m_xForTree, CSrvWrap.GetForestMgr().GetMaxHPFakeTrees() ); // 6 hits to chop a tree
					endif;
					m_vJobPos=vTree;
					m_sState = "goto_chop_forest";
					//L CSrvWrap.LogSpam( "Harvest","1 new Tree Found for Worker "+m_xWorker.AsInt().ToString() );
					return;
				endif;
				m_xTreeSearch.RegionCircle(m_vJobPos,64.0f);
				var CObjList xTrees;
				if(m_xTreeSearch.Execute(xTrees))then
					xTrees.SortDistance(m_vJobPos);
					var int i;
					for (i=0) cond (i<xTrees.NumEntries()) iter(++i)do
						var ^CTree pxTree= cast<CTree>(xTrees[i].GetObj());
						if (pxTree!=null) then
							if(CheckWalkPos(pxTree^.GetPos())&&pxWorker^.CheckMaxAutoprodDist(pxTree^.GetPos())) then
								m_xCurTree=pxTree^.GetHandle();
								m_sState="goto_chop";
								//L CSrvWrap.LogSpam( "Harvest","new Tree Found for Worker "+m_xWorker.AsInt().ToString() );
								return;
							endif;
						endif;
					endfor;
				endif;
			end FindForestTree;
			if(!m_bAllJobPosInvalid && m_avOldInvalidJobPos.NumEntries()>0)then
				m_avOldInvalidJobPos=0;
				m_bAllJobPosInvalid=true;
				return;
			endif;
			//L CSrvWrap.LogSpam( "Harvest","no new job found! endtask"+m_xWorker.AsInt().ToString() );
			pxWorker^.RemLinkGFX(m_xFCCWeaponLink);
			CSrvWrap.SendGenericEvtToPlayer(pxWorker^.GetOwner(), "NoMoreWood");
			EndTask();
			return;
		elseif(m_sState=="goto_harvest")then
			if(pxLog==null)then
				m_sState="search_for_jobs";
			else
				m_vCurLogPos = pxLog^.GetPos();
				CSrvWrap.GetObjMgr()^.GetFreePos(m_vCurTarget,pxWorker,m_vCurLogPos);
				SetCurrentTarget(m_vCurTarget);
				m_sState="rotate_to_log";
				//L CSrvWrap.LogSpam( "Harvest","Goto_Harvest Started WalkAction for Worker "+m_xWorker.AsInt().ToString());
				if(!IsAlreadyAtTargetPos(pxWorker^.GetPos(), 8.0))then
					if(pxWorker^.GetOnWall())then
						pxWorker^.WallWalkAction(m_vCurTarget,true,pxWorker^.GetDefaultSpeed(),false);
					else
						pxWorker^.WalkAction(m_vCurTarget,pxWorker^.GetDefaultSpeed(),true);
					endif;
				else
					USLOnTick(0);
					return;
				endif;
			endif;
		elseif(m_sState=="rotate_to_log")then
			//L CSrvWrap.LogSpam( "Harvest","Rotate_To_Log for Worker "+m_xWorker.AsInt().ToString() );
			if(pxLog==null)then
				//L CSrvWrap.LogSpam( "Harvest","Rotate_To_Log pxLog==null for Worker "+m_xWorker.AsInt().ToString() );
				m_sState="search_for_jobs";
			else
				if(!HasArrivedTarget(pxWorker^.GetPos(),8.0))then
					if(!CanFollow())then
						ResetCounter();
						m_sState="search_for_jobs";
						if(!AddFailedTarget())then
							CSrvWrap.SendGenericEvtToPlayer(pxWorker^.GetOwner(), "NoMoreWood");
							EndTask();
							return;
						endif;
					else
						m_sState="goto_harvest";
						return;
					endif;
				else
					var vec3 vDir=pxLog^.GetPos()-pxWorker^.GetPos();
					var Quat qTRot;
					qTRot.FromXYDir(vDir.GetX(),vDir.GetY());
					pxWorker^.SetLinkGFX(m_xFCCWeaponLink,m_sWeapon);
					pxWorker^.RotateAction(qTRot);
					m_bFirstHit=true;
					m_bLastHit=false;
					//L CSrvWrap.LogSpam( "Harvest","Rotate_To_Log RotateAction for Worker "+m_xWorker.AsInt().ToString() );
					m_sState="harvest_log";
				endif;
			endif;
		elseif(m_sState=="harvest_log")then
			m_fProgressStep = pxWorker^.GetResourceInventorySize(m_asResources[0]) / (5.0 /*<-number of loops per full charge*/ * pxWorker^.GetTimeFactor(m_xHarvestSite));
			if(m_fProgressStep<0.0001f)then
				m_fProgressStep=1.0f;
			endif;
			//L CSrvWrap.LogSpam( "Harvest","Harvest_Log for Worker "+m_xWorker.AsInt().ToString() );
			if(pxLog==null)then
				//L CSrvWrap.LogSpam( "Harvest","Harvest_Log pxLog==Null for Worker "+m_xWorker.AsInt().ToString() );
				m_sState="search_for_jobs";
			else
				if (pxLog^.IsInList(pxWorker^.GetHandle())==false) then
					pxLog^.AddWorker(pxWorker^.GetHandle());
				endif;
				if (pxLog^.IsInList(pxWorker^.GetHandle())) then
					//L CSrvWrap.LogSpam( "Harvest","Harvest_Log Mining for Worker "+m_xWorker.AsInt().ToString() );
					var real fMineAll;
					for(i=0)cond(i<m_asResources.NumEntries())iter(i++)do
						m_afMineVal[i]=pxWorker^.GetResInvSpace(m_asResources[i]);
						fMineAll+=m_afMineVal[i];
					endfor;
					var int iNumSteps=Math.F2I(fMineAll/m_fProgressStep);
					m_sState="add_forest_to_inv";
					if(fMineAll==0.0)then
						m_sState="goto_deliver";
					endif;
					pxWorker^.AnimAction("hacking_dirt",iNumSteps,true,true);
					var CGameTime xNow=CTimeMgr.Get().GetTime();
					m_xLastTick=xNow;
				else
					//L CSrvWrap.LogSpam( "Harvest","Harvest_Log No Place for Worker ... searching other tree for Worker "+m_xWorker.AsInt().ToString() );
					var CForestSrvMgr.CTree xTree;
					// var bool bNewTree = CSrvWrap.GetForestMgr().FindNextTree(xTree, pxWorker^.GetPos(),32.0f);
					var bool bNewTree=CSrvWrap.GetForestMgr().FindNextTreeShortDelivery(xTree, pxWorker^.GetPos(),m_vCurDelivery,32.0f);
					if(xTree.IsValid())then
						//L CSrvWrap.LogSpam( "Harvest","Harvest_Log Got Valid Tree for Worker "+m_xWorker.AsInt().ToString() );
						if ( bNewTree == true ) then
							CSrvWrap.GetForestMgr().SetHitPoints(m_xForTree, CSrvWrap.GetForestMgr().GetMaxHPFakeTrees() ); // 6 hits to chop a tree
						endif;
						m_xForTree = xTree;
						m_sState="goto_chop_forest";
					else
						//L CSrvWrap.LogSpam( "Harvest","Harvest_Log Got No Valid Tree Goto-> search_for_jobs for Worker "+m_xWorker.AsInt().ToString() );
						m_sState="search_for_jobs";
					endif;
				endif;
			endif;
		elseif(m_sState=="add_forest_to_inv")then
			if(pxLog!=null) then
				var real fMinedAll=0.0f;
				for(i=0)cond(i<m_asResources.NumEntries())iter(i++)do
					var real fMined=pxLog^.Mine(m_afMineVal[i]);
					pxWorker^.ResInvAdd(m_asResources[i],fMined);
					fMinedAll+=fMined;
				endfor;
			else
				m_sState="search_for_jobs";
				return;
			endif;
			var string sSetting=CSrvWrap.GetCurLevel()^.GetLevelInfo().GetAttribs().GetValue("Setting");
			pxWorker^.AnimAction("shoulder_pick_up");
			pxWorker^.SetLinkGFX(m_xFCCWeaponLink,"Product_Wood_"+sSetting.Left(3));
			m_sState="goto_deliver";
		elseif(m_sState=="goto_deliver")then
			//L CSrvWrap.LogSpam( "Harvest","Goto_Deliver for Worker "+m_xWorker.AsInt().ToString() );
			var string sSetting=CSrvWrap.GetCurLevel()^.GetLevelInfo().GetAttribs().GetValue("Setting");
			pxWorker^.SetLinkGFX(m_xFCCWeaponLink,"Product_Wood_"+sSetting.Left(3));
			var CObjList xDeliveries;
			CSrvWrap.GetDiplomacyMgr().AddOtherFriendsToSearch(pxWorker^.GetOwner(), m_xDeliverSearch);
			if(m_xDeliverSearch.Execute(xDeliveries))then
			//L CSrvWrap.LogSpam( "Harvest","Goto_deliver Search DeliverPos Worker "+m_xWorker.AsInt().ToString() );
				xDeliveries.SortDistance(pxWorker^.GetPos());
				var bool bFound = true;
				while(xDeliveries.NumEntries()>0)do
					if(!xDeliveries[0].IsValid())then xDeliveries.DeleteEntry(0); continue; endif;
					if(m_xInvalidDeliveries.FindEntry(xDeliveries[0])!=-1)then xDeliveries.DeleteEntry(0); continue; endif;
					if(xDeliveries.NumEntries()>1&&!pxWorker^.CheckMaxAutoprodDist(xDeliveries[0]))then xDeliveries.DeleteEntry(0); continue; endif;
					break;
				endwhile;
				if(xDeliveries.NumEntries()==0)then
					if(m_bAllDeliveriesInvalid)then
						EndTask();
						return;
					endif;
					m_xInvalidDeliveries.Clear();
					pxWorker^.SetAnim("standanim",3);
					pxWorker^.WaitAction(3.0);
					m_bAllDeliveriesInvalid=true;
					return;
				endif;
				m_vCurDeliverPos=xDeliveries[0].GetObj()^.GetPos();
				m_xCurDelivery=xDeliveries[0];
				m_vCurTarget=m_vCurDeliverPos;
				m_vCurDelivery=m_vCurDeliverPos;
				var CGameObj.CAdvanceActionParams xAWAP;
				xAWAP.m_fMinDistance=0.0f;
				xAWAP.m_iPrefSpeed=pxWorker^.GetDefaultSpeed();
				xAWAP.m_xWalkSet="sldr";
				var ^CFightingObj pxDelivery=cast<CFightingObj>(m_xCurDelivery.GetObj()^.GetGroupedRootParentObj());
				if(pxDelivery!=null)then
					if(pxDelivery^.CanWalk() || pxDelivery^.CanSwim())then
						SetCurrentTarget(m_xCurDelivery);
					endif;
				else
					SetCurrentTarget(CObjHndl.Invalid());
				endif;
				SetCurrentTarget(m_vCurDeliverPos);
				m_sState="drop_trees";
				if(!IsAlreadyAtTargetPos(pxWorker^.GetPos(), 5.0))then
					if(pxWorker^.GetOnWall())then
						pxWorker^.AdvanceWallAction(m_xCurDelivery,xAWAP,true,false);
					else
						pxWorker^.AdvanceAction(m_xCurDelivery,xAWAP);
					endif;
				else
					USLOnTick(0);
					return;
				endif;
			else
				//L CSrvWrap.LogSpam( "Harvest", "Goto_Deliver No place for delivery found (2)!");
				pxWorker^.RemLinkGFX(m_xFCCWeaponLink);
				EndTask();
				return;
			endif;
		elseif(m_sState=="drop_trees")then
			//L CSrvWrap.LogSpam( "Harvest","Drop_Trees for Worker "+m_xWorker.AsInt().ToString() );
			if(!m_xCurDelivery.IsValid())then
				m_sState="goto_deliver";
				return;
			endif;
			if(!HasArrivedTarget(pxWorker^.GetPos(),m_xCurDelivery.GetObj()^.GetRadius()*3.0))then
				if(!CanFollow())then
					ResetCounter();
					m_sState="goto_deliver";
					m_xInvalidDeliveries.Include(m_xCurDelivery);
				else
					m_sState="goto_deliver";
					return;
				endif;
			else
				var bool bContinue=false;
				var int i;
				for(i=0)cond(i<m_asResources.NumEntries())iter(i++)do
					if(!pxWorker^.ResInvIsEmpty(m_asResources[i]))then
						bContinue=true;
						break;
					endif;
				endfor;
				if(!bContinue)then
					m_sState="search_for_jobs";
					return;
				endif;
				m_xInvalidDeliveries.Clear();
				var bool bPutSomethingDown = pxWorker^.CheckInResInvAllPossible(m_xCurDelivery.GetObj());
				if(bPutSomethingDown)then
					m_sState="put_log_down";
					SetCurrentTarget(CObjHndl.Invalid());
				else
					//L CSrvWrap.LogSpam( "Harvest","drop_trees CheckInResInv false Worker "+m_xWorker.AsInt().ToString() );
					if ( pxWorker^.ResInvIsEmpty("wood")) then
						m_sState="search_for_jobs";
						SetCurrentTarget(CObjHndl.Invalid());
						return;
					endif;
					pxWorker^.WaitAction(2.0f); //wait 2 secs for free checkin
					//L CSrvWrap.LogSpam( "Harvest","drop_trees Inv not full or something like that Worker "+m_xWorker.AsInt().ToString() );
					return;
				endif;
			endif;
		elseif(m_sState=="put_log_down")then
			var ^CFightingObj pxDelivery = cast<CFightingObj>(m_xCurDelivery.GetObj());
			if(pxDelivery!=null)then
				pxDelivery^.AcceptDeliveries();
			endif;
			//L CSrvWrap.LogSpam( "Harvest","drop_trees CheckInResInv true/Anim-play-Ablegen  Worker "+m_xWorker.AsInt().ToString() );
			// pxWorker^.AnimAction("put_down");	// looks better than shoulder down
			// pxWorker^.SetAnim("shoulder_put_down",1);
			pxWorker^.AnimAction("shoulder_put_down");
			m_sState="remove_linked_log";
		elseif(m_sState=="remove_linked_log")then
			pxWorker^.RemLinkGFX(m_xFCCWeaponLink);
			if(pxTree!=null)then
				m_sState="goto_tree";
			elseif(pxLog!=null)then
				m_sState="goto_harvest";
			else
				m_sState="search_for_jobs";
			endif;
		else
			//L CSrvWrap.LogSpam("Harvest","invalid state: "+m_sState);
			pxWorker^.RemLinkGFX(m_xFCCWeaponLink);
			EndTask();
		endif;
	endproc;

	// Proc USLOnLeave ======================================================
	proc void USLOnLeave(^CState p_pxFrom, ^CState p_pxTo)
		super.USLOnLeave(p_pxFrom, p_pxTo);
		//L CSrvWrap.LogSpam( "Harvest", "Harvest USLONLEAVE "+m_xWorker.AsInt().ToString()+"State "+m_sState);
		var ^CGameObj pxWorker=m_xWorker.GetObj();
		if(pxWorker!=null)then
			//L CSrvWrap.LogSpam( "Harvest", ""+m_xWorker.AsInt().ToString());
			pxWorker^.RemLinkGFX(m_xFCCWeaponLink);
			(cast<CFightingObj>(pxWorker)^.ShowWeapons());
		endif;
		var int iT, iC;
		iC = m_avOldInvalidJobPos.NumEntries();
		for ( iT=0 ) cond ( iT<iC ) iter ( iT++ )do
			m_avOldInvalidJobPos.DeleteEntryUS(iT);
			iT--; iC--;
		endfor;
		var ^CCharacter pxChar = cast<CCharacter>(m_xWorker.GetObj());
		if(pxChar==null)then return; endif;
		pxChar^.SetTaskDescription("");
	endproc;

	// Proc Break ===========================================================
	export proc bool Break()
		var ^CGameObj pxWorker=m_xWorker.GetObj();
		if(pxWorker!=null)then pxWorker^.TerminateAction(); endif;
		if (m_xCurLog.IsValid()) then
			var ^CWood pxLog = cast<CWood>(m_xCurLog.GetObj());
			if (pxLog!=null) then
				pxLog^.Remove(m_xWorker);
			endif;
		endif;
		return true;
	endproc;

endclass;
