class CThrowdownshot inherit CSpecialActionTask

	////////////////For Tuning///////////////////////////

	const real	m_fRange=60.0f;								// Range of the weapon.
	////////////////////////////////////////////////////

	var CObjHndl	m_xFighter;
	var CObjHndl	m_xEnemy;
	var string 		m_sState;

	var CFourCC		m_xFCCRightHandLink;
	var CFourCC		m_xFCCShieldLink;
	var CFourCC		m_xFCCLeftHandLink;
	var CFourCC		m_xFCCHeadLink;
	var CFourCC		m_xFCCBackLink;

	export constructor()
		SetName("Throwdownshot");
		SetCivil(false);
		m_xFCCShieldLink="Shld";
		m_xFCCRightHandLink="HndR";
		m_xFCCLeftHandLink="HndL";
		m_xFCCHeadLink="Head";
		m_xFCCBackLink="Back";
	endconstructor;

	export destructor()
	enddestructor;
	
	export proc void Save(^CUOFWriterNode p_pxWriterNode)
		KLog.LogWarn("CArc.Save","[CThrowdownshot] Saving '"+p_pxWriterNode^.GetType().ToString()+"'");
		super.Save(p_pxWriterNode);
		var CFourCC xType="TDSh";
		var ^CUOFWriterNode pxWalk=p_pxWriterNode^.AddSubChunk(xType,1);
		var ^CArc pxArc=^(pxWalk^.GetArc());
		m_xFighter.DoKArc(pxArc^);
		m_xEnemy.DoKArc(pxArc^);
		(pxArc^) << m_sState;
		pxWalk^.Close();
	endproc;

	export proc void Load(^CUOFReaderNode p_pxReaderNode)
		if(p_pxReaderNode^.GetType()=="TDSh")then
			var ^CArc pxArc=^(p_pxReaderNode^.GetArc());
			m_xFighter.DoKArc(pxArc^);
			m_xEnemy.DoKArc(pxArc^);
			(pxArc^) << m_sState;
		else
			super.Load(p_pxReaderNode);
		endif;
	endproc;	

	export proc bool Init(CObjHndl p_xFighter, CObjHndl p_xEnemy, string p_sPath)
		if(!p_xFighter.IsValid() || !p_xEnemy.IsValid())then
			m_sState="EndTask";
			return false;
		endif;
		SetName("Throwdownshot");
		SetSpecialActionPath(p_sPath);
		m_xFighter=p_xFighter;
		m_xEnemy=p_xEnemy;
		return true;
	endproc;

	proc void USLOnEnter(^CState p_pxFrom, ^CState p_pxTo)
		var ^CFightingObj pxFightingObj=cast<CFightingObj>(m_xFighter.GetObj());
		if(pxFightingObj==null||!pxFightingObj^.CheckSpecialActionTimer(GetSpecialActionPath())||!m_xEnemy.IsValid())then
			EndTask();
			return;
		endif;
	endproc;

	proc void USLOnTick(int p_iTime)
		if(!m_xFighter.IsValid())then EndTask();return;endif;
		if(!m_xEnemy.IsValid())then	EndTask();return;endif;
		if(m_xFighter==m_xEnemy)then EndTask();return;endif;
		var ^CFightingObj pxFighter = cast<CFightingObj>(m_xFighter.GetObj());
		var ^CFightingObj pxEnemy = cast<CFightingObj>(m_xEnemy.GetObj());
		if(pxEnemy==null)then EndTask();return;endif;
		if(m_sState!="finished" && m_sState!="fire")then
			var bool bInvalid; var CObjHndl xInvalid;
			if(pxFighter^.IsInCombatRange(pxEnemy, bInvalid, xInvalid,m_fRange))then
				if(!pxEnemy^.IsDead())then
					var vec3 vTarget=GetLookAtRot(pxEnemy^.GetPos()-pxFighter^.GetPos());
					//pxFighter^.SetRotation(vTarget);
					pxFighter^.RotateToEnemy(pxEnemy,pxEnemy^.GetPos());
					m_sState="fire";
					return;
				endif;
			else
				if(pxFighter^.GetMovableInFight() && !pxFighter^.GetOnWall())then
					var CGameObj.CAdvanceActionParams xAWAP;
					xAWAP.m_fMinDistance=pxFighter^.GetAttackRange()-2.0f;
					xAWAP.m_iPrefSpeed=pxFighter^.GetMaxSpeed();
					xAWAP.m_fProjectileFallOff=pxFighter^.GetProjectileFallOffCone();
					pxFighter^.AdvanceAction(pxEnemy^.GetHandle(),xAWAP);
				else
					EndTask();
					return;
				endif;
			endif;
		endif;
		if(m_sState=="fire")then
			pxFighter^.SetLinkGFX(m_xFCCLeftHandLink, "item_special_bow");
			if(!StartSpecialActionTimer(pxFighter))then EndTask();return;endif;
			SetUnStoppable(true);
			pxFighter^.MemorizeCurrentFightState(m_xEnemy,true,false);
			if(pxFighter^.HasAnim("throwdownshot"))then
				pxFighter^.AnimAction("throwdownshot");
			endif;
			pxFighter^.CreateProjectileAndShoot(pxEnemy, pxEnemy^.GetPos(), "bela_special_arrow");
			m_sState="finished";
		elseif(m_sState=="finished")then
			SetUnStoppable(false);
			pxFighter^.ShowWeapons();
			m_sState="EndTask";
			pxFighter^.ReturnToFight();
			return;
		elseif(m_sState=="EndTask")then
			EndTask();
			return;
		endif;
	endproc;

	proc void USLOnLeave(^CState p_pxFrom, ^CState p_pxTo)
		super.USLOnLeave(p_pxFrom, p_pxTo);
	endproc;

	export proc bool Break()
		if(GetUnStoppable())then
			return false;
		endif;
		var ^CFightingObj pxObj = cast<CFightingObj>(m_xFighter.GetObj());
		if(pxObj!=null)then
			pxObj^.TerminateAction();
			if(m_sState!="finished")then
				pxObj^.ResetSpecialActionTimer("Actions/Special/Moves/CHTR/Snipershot");
			endif;
		endif;
		return true;
	endproc;

	//Updates enemy
	export proc void UpdateEnemy(CObjHndl p_xEnemy)
		if(p_xEnemy.IsValid())then
			m_xEnemy=p_xEnemy;
		endif;

	endproc;

	export proc void EndTask()
		UpdateAggressionPos(m_xFighter);
		super.EndTask();
	endproc;

endclass;
